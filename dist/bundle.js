/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 24);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__ = __webpack_require__(26);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__ = __webpack_require__(27);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__ = __webpack_require__(28);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__ = __webpack_require__(29);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__ = __webpack_require__(30);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__ = __webpack_require__(17);\n/**\n * @fileoverview gl-matrix - High performance matrix and vector operations\n * @author Brandon Jones\n * @author Colin MacKenzie IV\n * @version 2.4.0\n */\n\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n// END HEADER\n\n\n\n\n\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n  glMatrix: __WEBPACK_IMPORTED_MODULE_0__gl_matrix_common__,\n  mat2: __WEBPACK_IMPORTED_MODULE_1__gl_matrix_mat2__, mat2d: __WEBPACK_IMPORTED_MODULE_2__gl_matrix_mat2d__, mat3: __WEBPACK_IMPORTED_MODULE_3__gl_matrix_mat3__, mat4: __WEBPACK_IMPORTED_MODULE_4__gl_matrix_mat4__,\n  quat: __WEBPACK_IMPORTED_MODULE_5__gl_matrix_quat__,\n  vec2: __WEBPACK_IMPORTED_MODULE_6__gl_matrix_vec2__, vec3: __WEBPACK_IMPORTED_MODULE_7__gl_matrix_vec3__, vec4: __WEBPACK_IMPORTED_MODULE_8__gl_matrix_vec4__,\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix.js\n// module id = 0\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix.js?");

/***/ }),
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__lib_MathAdditional__ = __webpack_require__(31);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__render_Shader__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__render_Renderer__ = __webpack_require__(32);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Input__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__render_DebugDraw__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__scene_Scene__ = __webpack_require__(35);\n\nvar mat3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].mat3;\n\n\n\n\n\n\n\n\n\nvar Application = function Application (data) {\n  var this$1 = this;\n\n\n  if (Application.instance) {\n    throw new Error('Application already instantiated');\n  }\n\n  Application.instance = this;\n\n  this.element = window.document.body;\n  this.devicePixelRatio = window.devicePixelRatio || 1;\n\n  window.addEventListener('resize', function () { return this$1.onResize(); });\n  this.createCanvas(this.element);\n  this.onResize();\n  this.setupWebGL();\n\n  this.input = new __WEBPACK_IMPORTED_MODULE_5__Input__[\"a\" /* default */]();\n\n  if (this.gl) {\n    Application.gl = this.gl;\n    this.scene = new __WEBPACK_IMPORTED_MODULE_7__scene_Scene__[\"a\" /* default */]();\n    this.renderer = new __WEBPACK_IMPORTED_MODULE_3__render_Renderer__[\"a\" /* default */]({\n      gl: this.gl,\n      scene: this.scene\n    });\n\n    this.startRenderLoop();\n  }\n};\n\nApplication.prototype.createCanvas = function createCanvas (element) {\n  this.canvas = document.createElement('canvas');\n  element.appendChild(this.canvas);\n};\n\nApplication.prototype.onResize = function onResize () {\n  var dpr = this.dpr = this.devicePixelRatio;\n  var doc = window.document;\n  var width = (window.innerWidth || doc.clientWidth);\n  var height = (window.innerHeight || doc.clientHeight);\n\n  if (width !== this.width || height !== this.height) {\n    this.width = width;\n    this.height = height;\n\n    this.canvas.width = width;\n    this.canvas.height = height;\n  }\n};\n\nApplication.prototype.setupWebGL = function setupWebGL () {\n  var gl = null;\n\n  try {\n    gl = this.canvas.getContext(\"webgl\") || this.canvas.getContext(\"experimental-webgl\");\n  }\n  catch(e) {}\n\n  if (!gl) {\n    gl = null;\n    console.error('Can\\'t get gl context');\n    return;\n  }\n\n  this.gl = gl;\n};\n\nApplication.prototype.startRenderLoop = function startRenderLoop () {\n    var this$1 = this;\n\n  this.lastTime = 0;\n  this.renderFunc = function () { return this$1.onAnimationFrame(); };\n  window.requestAnimationFrame(this.renderFunc);\n};\n\nApplication.prototype.onAnimationFrame = function onAnimationFrame () {\n  var gl = this.gl;\n\n  var now = Date.now() / 1000; // seconds\n  var lastTime = this.time || now;\n  var dt = now - lastTime;\n\n  this.time = now;\n\n  this.input.update();\n\n  gl.viewport(0, 0, this.width, this.height);\n  this.scene.update(dt);\n  this.render(dt, gl);\n  this.renderer.render();\n\n  // Debug render\n  if (this.debugDraw) {\n    this.debugDraw.render();\n  }\n\n  window.requestAnimationFrame(this.renderFunc);\n};\n\nApplication.prototype.setupDebugDraw = function setupDebugDraw (shader) {\n  this.debugDraw = new __WEBPACK_IMPORTED_MODULE_6__render_DebugDraw__[\"a\" /* default */]({\n    shader: shader\n  });\n\n  return this.debugDraw;\n};\n\nApplication.prototype.render = function render (dt, gl) {\n  // override\n};\n\n// Public\n\nApplication.prototype.createShader = function createShader (source) {\n  var shader = new __WEBPACK_IMPORTED_MODULE_2__render_Shader__[\"a\" /* default */](this.gl);\n  shader.load(source);\n  return shader;\n};\n\nApplication.prototype.createMesh = function createMesh () {\n  var mesh = new __WEBPACK_IMPORTED_MODULE_4__render_Mesh__[\"a\" /* default */](this.gl);\n  return mesh;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Application);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/Application.js\n// module id = 1\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/Application.js?");

/***/ }),
/* 2 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"EPSILON\", function() { return EPSILON; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"ARRAY_TYPE\", function() { return ARRAY_TYPE; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"RANDOM\", function() { return RANDOM; });\n/* harmony export (immutable) */ __webpack_exports__[\"setMatrixArrayType\"] = setMatrixArrayType;\n/* harmony export (immutable) */ __webpack_exports__[\"toRadian\"] = toRadian;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n/**\n * Common utilities\n * @module glMatrix\n */\n\n// Configuration Constants\nvar EPSILON = 0.000001;\nvar ARRAY_TYPE = (typeof Float32Array !== 'undefined') ? Float32Array : Array;\nvar RANDOM = Math.random;\n\n/**\n * Sets the type of array used when creating new vectors and matrices\n *\n * @param {Type} type Array type, such as Float32Array or Array\n */\nfunction setMatrixArrayType(type) {\n  ARRAY_TYPE = type;\n}\n\nvar degree = Math.PI / 180;\n\n/**\n * Convert Degree To Radian\n *\n * @param {Number} a Angle in Degrees\n */\nfunction toRadian(a) {\n  return a * degree;\n}\n\n/**\n * Tests whether or not the arguments have approximately the same value, within an absolute\n * or relative tolerance of glMatrix.EPSILON (an absolute tolerance is used for values less\n * than or equal to 1.0, and a relative tolerance is used for larger values)\n *\n * @param {Number} a The first number to test.\n * @param {Number} b The second number to test.\n * @returns {Boolean} True if the numbers are approximately equal, false otherwise.\n */\nfunction equals(a, b) {\n  return Math.abs(a - b) <= EPSILON*Math.max(1.0, Math.abs(a), Math.abs(b));\n}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/common.js\n// module id = 2\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/common.js?");

/***/ }),
/* 3 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\n\nvar floor = Math.floor;\n\nvar helperVec = vec3.create();\nvar normal = vec3.create();\nvar a = vec3.create();\nvar b = vec3.create();\nvar c = vec3.create();\n\nvar VERTEX_SIZE = 3;\nvar NORMAL_SIZE = 3;\nvar COLOR_SIZE = 4;\nvar TEXCOORD_SIZE = 2;\n\nvar Mesh = function Mesh (opts) {\n  this.gl = __WEBPACK_IMPORTED_MODULE_0__Application__[\"a\" /* default */].gl;\n\n  this.keepData = opts && opts.keepData;\n  this.componentCount = opts && opts.componentCount || 3;\n  this.bufferUsage = opts && opts.bufferUsage || this.gl.STATIC_DRAW;\n\n  this.vbo = null;\n  this.hasIndices = false;\n  this.indexBuffer = null;\n  this.indices = null;\n  this.faceCount = 0;\n\n  this.hasVertices = false;\n  this.vertices = null;\n  this.vertexOffset = 0;\n  this.vertexOffsetBytes = 0;\n\n  this.hasNormals = false;\n  this.normals = null;\n  this.normalOffset = 0;\n  this.normalOffsetBytes = 0;\n\n  this.hasTexCoord0 = false;\n  this.texCoord0 = null;\n  this.texCoord0Offset = 0;\n  this.texCoord0OffsetBytes = 0;\n\n  this.hasColors = false;\n  this.colors = null;\n  this.colorOffset = 0;\n  this.colorOffsetBytes = 0;\n};\n\nMesh.prototype.deleteBuffer = function deleteBuffer () {\n  var gl = this.gl;\n  if (this.vbo) {\n    gl.deleteBuffer(this.vbo);\n  }\n};\n\nMesh.prototype.createBuffer = function createBuffer () {\n    var this$1 = this;\n\n  var gl = this.gl;\n  this.deleteBuffer();\n\n  this.stride = this.getStrideSize();\n  this.strideBytes = this.stride * 4;\n\n  var currentOffset = 0;\n  if (this.hasVertices) {\n    this.vertexOffset = currentOffset;\n    this.vertexOffsetBytes = currentOffset * 4;\n    currentOffset += VERTEX_SIZE;\n    this.vertexCount = floor(this.vertices.length / 3);\n  }\n  if (this.hasNormals) {\n    this.normalOffset = currentOffset;\n    this.normalOffsetBytes = currentOffset * 4;\n    currentOffset += NORMAL_SIZE;\n  }\n  if (this.hasTexCoord0) {\n    this.texCoord0Offset = currentOffset;\n    this.texCoord0OffsetBytes = currentOffset * 4;\n    currentOffset += TEXCOORD_SIZE;\n  }\n  if (this.hasColors) {\n    this.colorOffset = currentOffset;\n    this.colorOffsetBytes = currentOffset * 4;\n    currentOffset += COLOR_SIZE;\n  }\n\n  var bufferData = new Float32Array(floor(this.stride * this.vertexCount));\n\n  for (var i = 0; i < this.vertexCount; i++) {\n    var offset = i * this$1.stride;\n    if (this$1.hasVertices) {\n      currentOffset = offset + this$1.vertexOffset;\n      bufferData[currentOffset] = this$1.vertices[i * 3];\n      bufferData[currentOffset + 1] = this$1.vertices[i * 3 + 1];\n      bufferData[currentOffset + 2] = this$1.vertices[i * 3 + 2];\n    }\n\n    if (this$1.hasNormals) {\n      currentOffset = offset + this$1.normalOffset;\n      bufferData[currentOffset] = this$1.normals[i * 3];\n      bufferData[currentOffset + 1] = this$1.normals[i * 3 + 1];\n      bufferData[currentOffset + 2] = this$1.normals[i * 3 + 2];\n    }\n\n    if (this$1.hasColors) {\n      currentOffset = offset + this$1.colorOffset;\n      bufferData[currentOffset] = this$1.colors[i * 4];\n      bufferData[currentOffset + 1] = this$1.colors[i * 4 + 1];\n      bufferData[currentOffset + 2] = this$1.colors[i * 4 + 2];\n      bufferData[currentOffset + 3] = this$1.colors[i * 4 + 3];\n    }\n  }\n\n  this.vbo = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n  gl.bufferData(gl.ARRAY_BUFFER, bufferData, this.bufferUsage);\n\n  if (this.hasIndices) {\n    var indices = new Uint16Array(this.indices);\n    this.indexBuffer = gl.createBuffer();\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, this.indexBuffer);\n    gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, indices, this.bufferUsage);\n  }\n\n  // Free data arrays\n  if (!this.keepData) {\n    this.vertices = null;\n    this.normals = null;\n    this.texCoord0 = null;\n    this.colors = null;\n    this.indices = null;\n  }\n};\n\nMesh.prototype.getStrideSize = function getStrideSize () {\n  var result = 0;\n  if (this.hasVertices) { result += VERTEX_SIZE; }\n  if (this.hasNormals) { result += NORMAL_SIZE; }\n  if (this.hasColors) { result += COLOR_SIZE; }\n  if (this.hasTexCoord0) { result += TEXCOORD_SIZE; }\n  return result;\n};\n\nMesh.prototype.setVBO = function setVBO (buffer) {\n  this.vbo = buffer;\n};\n\nMesh.prototype.setVertices = function setVertices (vertices) {\n  var gl = this.gl;\n  this.vertices = vertices;\n  this.hasVertices = vertices && !!vertices.length;\n\n  if (!this.hasIndices) {\n    this.faceCount = floor(vertices.length / this.componentCount / 3);\n  }\n};\n\nMesh.prototype.setIndices = function setIndices (indices) {\n  this.indices = indices;\n  this.hasIndices = indices && !!indices.length;\n\n  if (this.hasIndices) {\n    this.faceCount = floor(this.indices.length / this.componentCount);\n  }\n};\n\nMesh.prototype.setColors = function setColors (colors) {\n  this.colors = colors;\n  this.hasColors = colors && !!colors.length;\n};\n\nMesh.prototype.calculateNormals = function calculateNormals () {\n  if (!this.vertices || !this.vertices.length) {\n    return;\n  }\n\n  var gl = this.gl;\n  var normals = new Array(this.vertices.length);\n  for (var i = 0; i < normals.length; i++) {\n    normals[i] = 0;\n  }\n\n  var vertices = this.vertices;\n  var indices = this.indices;\n  var faceCount = this.faceCount;\n\n  for (var i$1 = 0; i$1 < faceCount; i$1++) {\n    var faceOffset = i$1 * 3;\n    var indexA = indices ? indices[faceOffset] * 3 : faceOffset * 3;\n    var indexB = indices ? indices[faceOffset + 1] * 3 : faceOffset * 3 + 3;\n    var indexC = indices ? indices[faceOffset + 2] * 3 : faceOffset * 3 + 6;\n\n    vec3.set(a, vertices[indexA], vertices[indexA + 1], vertices[indexA + 2]);\n    vec3.set(b, vertices[indexB], vertices[indexB + 1], vertices[indexB + 2]);\n    vec3.set(c, vertices[indexC], vertices[indexC + 1], vertices[indexC + 2]);\n    vec3.subtract(b, b, a);\n    vec3.subtract(c, c, a);\n    vec3.cross(normal, b, c);\n    for (var j = 0; j < 3; j++) {\n      normals[indexA + j] += normal[j];\n      normals[indexB + j] += normal[j];\n      normals[indexC + j] += normal[j];\n    }\n  }\n\n  for (var i$2 = 0; i$2 < normals.length / 3; i$2++) {\n    vec3.set(normal, normals[i$2 * 3], normals[i$2 * 3 + 1], normals[i$2 * 3 + 2]);\n    vec3.normalize(normal, normal);\n    for (var j$1 = 0; j$1 < 3; j$1++) {\n      normals[i$2 * 3 + j$1] = normal[j$1];\n    }\n  }\n\n  this.normals = normals;\n  this.hasNormals = true;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Mesh);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/Mesh.js\n// module id = 3\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/Mesh.js?");

/***/ }),
/* 4 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__render_Shader__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Application__ = __webpack_require__(1);\n\n\n\nvar Resources = function Resources () {\n  this.shaders = {};\n  this.geometry = {};\n  this.hierarchy = {};\n};\n\nResources.prototype.addGeometry = function addGeometry (name, data) {\n\n};\n\nResources.prototype.addHierarchy = function addHierarchy (name, data) {\n\n};\n\nResources.prototype.addShader = function addShader (name, src) {\n  var shader = new __WEBPACK_IMPORTED_MODULE_0__render_Shader__[\"a\" /* default */]();\n  shader.load(src);\n  this.shaders[name] = shader;\n\n  return shader;\n};\n\nResources.prototype.getShader = function getShader (name) {\n  return this.shaders[name];\n};;\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (new Resources());\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/Resources.js\n// module id = 4\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/Resources.js?");

/***/ }),
/* 5 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var PI = Math.PI;\nvar sin = Math.sin;\nvar cos = Math.cos;\n\nvar utils = {\n\n  generateSphere: function generateSphere (mesh, parallelCount, meridianCount, radius) {\n    if ( radius === void 0 ) radius = 1;\n\n    var vertices = [];\n    var indices = [];\n    var currentIndex = 0;\n\n    for (var j = 0; j < parallelCount; j++) {\n      var parallel = PI * j / (parallelCount - 1);\n\n      for (var i = 0; i < meridianCount; i++) {\n        var meridian = 2.0 * PI * i / meridianCount;\n        vertices.push(\n          radius * sin(parallel) * cos(meridian),\n          radius * sin(parallel) * sin(meridian),\n          radius * cos(parallel)\n        );\n\n        indices.push(j * parallelCount + i);\n        indices.push(((j + 1) % parallelCount) * parallelCount + i);\n        indices.push(((j + 1) % parallelCount) * parallelCount + (i + 1) % meridianCount);\n\n        indices.push(((j + 1) % parallelCount) * parallelCount + (i + 1) % meridianCount);\n        indices.push(((j) % parallelCount) * parallelCount + (i + 1) % meridianCount);\n        indices.push(j * parallelCount + i);\n      }\n    }\n\n    mesh.setVertices(vertices);\n    mesh.setIndices(indices);\n  },\n\n  generateBox: function generateBox (mesh, sizeX, sizeY, sizeZ) {\n    var halfX = sizeX * 0.5;\n    var halfY = sizeY * 0.5;\n    var halfZ = sizeZ * 0.5;\n\n    var srcVertices = [\n      -halfX, -halfY, -halfZ,\n      halfX, -halfY, -halfZ,\n      halfX, -halfY, halfZ,\n      -halfX, -halfY, halfZ,\n      -halfX, halfY, -halfZ,\n      halfX, halfY, -halfZ,\n      halfX, halfY, halfZ,\n      -halfX, halfY, halfZ ];\n    var srcIndices = [\n      3, 0, 2, 0, 1, 2, // +y\n      4, 7, 6, 4, 6, 5, // -y\n      7, 4, 0, 7, 0, 3, // -x\n      5, 2, 1, 5, 6, 2, // +x\n      4, 5, 1, 4, 1, 0, // -z\n      7, 3, 6, 6, 3, 2  // +z\n    ];\n\n    var vertices = [];\n\n    // duplicate vertices\n    for (var i = 0; i < srcIndices.length; i++) {\n      vertices.push(srcVertices[srcIndices[i] * 3]);\n      vertices.push(srcVertices[srcIndices[i] * 3 + 1]);\n      vertices.push(srcVertices[srcIndices[i] * 3 + 2]);\n    }\n\n    mesh.setVertices(vertices);\n  }\n\n}\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (utils);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/utils.js\n// module id = 5\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/utils.js?");

/***/ }),
/* 6 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Application__ = __webpack_require__(1);\n\n\nvar VERTEX_START = '[vertex]';\nvar FRAGMENT_START = '[fragment]';\nvar MAX_UNIFORMS = 20;\nvar NO_UNIFORM = -2;\n\nvar UNIFORM_LIGHT_DIR = 10;\nvar UNIFORM_PROJECTION_MATRIX = 0;\nvar UNIFORM_MODELVIEW_MATRIX = 1;\nvar UNIFORM_NORMAL_MATRIX = 2;\n\nvar ATTRIBUTE_POSITION = 0;\nvar ATTRIBUTE_NORMAL = 1;\nvar ATTRIBUTE_COLOR = 2;\n\nvar UNIFORM_NAMES = {};\nUNIFORM_NAMES[UNIFORM_LIGHT_DIR] = 'uLightDir';\nUNIFORM_NAMES[UNIFORM_PROJECTION_MATRIX] = 'uPMatrix';\nUNIFORM_NAMES[UNIFORM_MODELVIEW_MATRIX] = 'uMVMatrix';\nUNIFORM_NAMES[UNIFORM_NORMAL_MATRIX] = 'uNormalMatrix'\n\nvar ATTRIBUTE_NAMES = {};\nATTRIBUTE_NAMES[ATTRIBUTE_POSITION] = 'aPosition';\nATTRIBUTE_NAMES[ATTRIBUTE_NORMAL] = 'aNormal';\nATTRIBUTE_NAMES[ATTRIBUTE_COLOR] = 'aColor';\n\nvar Shader = function Shader () {\n  var gl = this.gl = __WEBPACK_IMPORTED_MODULE_0__Application__[\"a\" /* default */].gl;\n\n  this.errorStrings = ( obj = {}, obj[gl.VERTEX_SHADER] = 'vertex', obj[gl.FRAGMENT_SHADER] = 'fragment', obj );\n  var obj;\n\n  this.uniformLocations = new Array(MAX_UNIFORMS);\n  this.uniformLocations.fill(NO_UNIFORM);\n  this.program = null;\n  this.loaded = false;\n  this.attribLocations = {};\n};\n\nShader.prototype.load = function load (dataString) {\n  var lines = dataString.match(/[^\\r\\n]+/g); // split by line break\n  var fragmentLines = [];\n  var vertexLines = [];\n\n  var currentArray = null;\n\n  var vertexExist = false;\n  var fragmentExist = false;\n\n  for (var i = 0; i < lines.length; i++) {\n    var line = lines[i];\n\n    if (line === VERTEX_START) {\n      currentArray = vertexLines;\n      vertexExist = true;\n      continue;\n    }\n    if (line === FRAGMENT_START) {\n      currentArray = fragmentLines;\n      fragmentExist = true;\n      continue;\n    }\n\n    if (currentArray) {\n      currentArray.push(line);\n    }\n  }\n\n  if (!fragmentExist) {\n    console.error('Shader error: [fragment] definition not found');\n    return;\n  }\n\n  if (!vertexExist) {\n    console.error('Shader error: [vertex] definition not found');\n    return;\n  }\n\n  var fragmentString = fragmentLines.join('\\n');\n  var vertexString = vertexLines.join('\\n');\n\n  this.compileShader(vertexString, fragmentString);\n};\n\nShader.prototype.loadShader = function loadShader (source, type) {\n  var gl = this.gl;\n  var shader = gl.createShader(type);\n  gl.shaderSource(shader, source);\n  gl.compileShader(shader);\n\n  var success = gl.getShaderParameter(shader, gl.COMPILE_STATUS);\n  if (!success) {\n    var compilationLog = gl.getShaderInfoLog(shader);\n    console.error((this.errorStrings[type]) + \" shader compile error: \" + compilationLog);\n    shader = null;\n  }\n\n  return shader;\n};\n\nShader.prototype.bindAttribLocations = function bindAttribLocations (program) {\n  var gl = this.gl;\n  for (var attribID in ATTRIBUTE_NAMES) {\n    gl.bindAttribLocation(program, parseInt(attribID), ATTRIBUTE_NAMES[attribID]);\n  }\n};\n\nShader.prototype.use = function use () {\n  var gl = this.gl;\n  gl.useProgram(this.program);\n};\n\nShader.prototype.compileShader = function compileShader (vertexSource, fragmentSource) {\n  var gl = this.gl;\n\n  var vertexCompiled = this.loadShader(vertexSource, gl.VERTEX_SHADER);\n  var fragmentCompiled = this.loadShader(fragmentSource, gl.FRAGMENT_SHADER);\n\n  if (!vertexCompiled || !fragmentCompiled) {\n    return;\n  }\n\n  this.program = gl.createProgram();\n  this.bindAttribLocations(this.program);\n  gl.attachShader(this.program, vertexCompiled);\n  gl.attachShader(this.program, fragmentCompiled);\n  gl.linkProgram(this.program);\n  var success = gl.getProgramParameter(this.program, gl.LINK_STATUS);\n  if (success) {\n    this.loaded = true;\n    gl.useProgram(this.program);\n  } else {\n    var compilationLog = gl.getShaderInfoLog(this.program);\n    console.error('Shader link error: ' + compilationLog);\n  }\n};\n\nShader.prototype.getAttribLocation = function getAttribLocation (name) {\n  var gl = this.gl;\n\n  var result = this.attribLocations[name];\n\n  if (!result) {\n    result = gl.getAttribLocation(this.program, name);\n    if (result !== -1) {\n      this.attribLocations[name] = result;\n    } else {\n      console.error((\"Can't get shader attrib: \" + name));\n    }\n  }\n\n  return result;\n};\n\nShader.prototype.getUniformLocation = function getUniformLocation (id) {\n  var gl = this.gl;\n\n  var result = this.uniformLocations[id];\n\n  if (result === NO_UNIFORM) {\n    result = gl.getUniformLocation(this.program, UNIFORM_NAMES[id]);\n    this.uniformLocations[id] = result;\n    if (result === -1) {\n      console.error((\"Can't get shader uniform: \" + (UNIFORM_NAMES[id])));\n    }\n  }\n\n  return result;\n};\n\nShader.prototype.setUniformMat4 = function setUniformMat4 (name, value) {\n  var gl = this.gl;\n\n  var location = this.getUniformLocation(name);\n  if (location === -1) {\n    return;\n  }\n\n  gl.uniformMatrix4fv(location, false, value);\n};\n\nShader.prototype.setUniform3 = function setUniform3 (name, value) {\n  var gl = this.gl;\n\n  var location = this.getUniformLocation(name);\n  if (location === -1) {\n    return;\n  }\n\n  gl.uniform3fv(location, value);\n};\n\nShader.prototype.setUniform4 = function setUniform4 (name, value) {\n  var gl = this.gl;\n\n  var location = this.getUniformLocation(name);\n  if (location === -1) {\n    return;\n  }\n\n  gl.uniform4fv(location, value);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Shader);\n\nShader.UNIFORM_LIGHT_DIR = UNIFORM_LIGHT_DIR;\nShader.UNIFORM_PROJECTION_MATRIX = UNIFORM_PROJECTION_MATRIX;\nShader.UNIFORM_MODELVIEW_MATRIX = UNIFORM_MODELVIEW_MATRIX;\nShader.UNIFORM_NORMAL_MATRIX = UNIFORM_NORMAL_MATRIX;\n\nShader.ATTRIBUTE_POSITION = ATTRIBUTE_POSITION;\nShader.ATTRIBUTE_NORMAL = ATTRIBUTE_NORMAL;\nShader.ATTRIBUTE_COLOR = ATTRIBUTE_COLOR;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/Shader.js\n// module id = 6\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/Shader.js?");

/***/ }),
/* 7 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var ObjectPool = function ObjectPool (constructor, defaultOpts) {\n  this.constructMethod = constructor;\n  this.pool = [];\n  this.availableCount = 0;\n  this.defaultOpts = defaultOpts;\n};\n\nObjectPool.prototype.obtain = function obtain () {\n  if (this.availableCount > 0) {\n    var index = this.availableCount - 1;\n    var object = this.pool[index];\n    this.pool[index] = null;\n    this.availableCount = index;\n    return object;\n  }\n\n  return new this.constructMethod(this.defaultOpts);\n};\n\nObjectPool.prototype.release = function release (object) {\n  this.pool[this.availableCount] = object;\n  this.availableCount += 1;\n  if (object.prepareForPool) {\n    object.prepareForPool();\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ObjectPool);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/ObjectPool.js\n// module id = 7\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/ObjectPool.js?");

/***/ }),
/* 8 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_render_Mesh__ = __webpack_require__(3);\n\n\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\nvar floor = Math.floor;\n\nvar MAX_VERTICES = 1000;\nvar VERTEX_COMPONENT_COUNT = 3;\nvar COLOR_COMPONENT_COUNT = 4;\nvar COMPONENT_COUNT = VERTEX_COMPONENT_COUNT + COLOR_COMPONENT_COUNT;\n\nvar DebugDraw = function DebugDraw (opts) {\n  var gl = this.gl = __WEBPACK_IMPORTED_MODULE_0__Application__[\"a\" /* default */].gl;\n  this.renderer = __WEBPACK_IMPORTED_MODULE_0__Application__[\"a\" /* default */].instance.renderer;\n\n  this.shader = opts.shader;\n  this.renderOpts = { renderMode: gl.LINES };\n\n  this.linesMesh = new __WEBPACK_IMPORTED_MODULE_2_engine_render_Mesh__[\"a\" /* default */]({\n    componentCount: 2\n  });\n\n  this.vertexCount = 0;\n\n  this.vertexData = new Float32Array(MAX_VERTICES * COMPONENT_COUNT);\n\n  this.vbo = gl.createBuffer();\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n  gl.bufferData(gl.ARRAY_BUFFER, this.vertexData, gl.DYNAMIC_DRAW);\n\n  this.linesMesh.setVBO(this.vbo);\n  this.linesMesh.strideBytes = COMPONENT_COUNT * 4;\n  this.linesMesh.colorOffsetBytes = VERTEX_COMPONENT_COUNT * 4;\n  this.linesMesh.hasColors = true;\n  this.linesMesh.hasVertices = true;\n  this.vertexCount = 0;\n};\n\nDebugDraw.prototype.addLine = function addLine (p1, p2, color) {\n  this.addLineXYZ(p1[0], p1[1], p1[2], p2[0], p2[1], p2[2], color);\n};\n\nDebugDraw.prototype.addLineXYZ = function addLineXYZ (x1, y1, z1, x2, y2, z2, color) {\n    var arguments$1 = arguments;\n    var this$1 = this;\n\n  var count = this.vertexCount;\n\n  for (var i = 0; i < 2; i++) {\n    this$1.vertexData[count * COMPONENT_COUNT] = arguments$1[i * VERTEX_COMPONENT_COUNT];\n    this$1.vertexData[count * COMPONENT_COUNT + 1] = arguments$1[i * VERTEX_COMPONENT_COUNT + 1];\n    this$1.vertexData[count * COMPONENT_COUNT + 2] = arguments$1[i * VERTEX_COMPONENT_COUNT + 2];\n    this$1.vertexData[count * COMPONENT_COUNT + 3] = color[0];\n    this$1.vertexData[count * COMPONENT_COUNT + 4] = color[1];\n    this$1.vertexData[count * COMPONENT_COUNT + 5] = color[2];\n    this$1.vertexData[count * COMPONENT_COUNT + 6] = 1;\n    count++;\n  }\n\n  this.vertexCount = count;\n};\n\nDebugDraw.prototype.clear = function clear () {\n  this.vertexCount = 0;\n};\n\nDebugDraw.prototype.updateBuffer = function updateBuffer () {\n  var gl = this.gl;\n  gl.bindBuffer(gl.ARRAY_BUFFER, this.vbo);\n  gl.bufferSubData(gl.ARRAY_BUFFER, 0, this.vertexData, 0, this.vertexCount * COMPONENT_COUNT * 4);\n\n  this.linesMesh.faceCount = floor(this.vertexCount / 2);\n};\n\nDebugDraw.prototype.render = function render () {\n  if (this.vertexCount === 0) {\n    return;\n  }\n\n  var gl = this.gl;\n  gl.disable(gl.DEPTH_TEST);\n  this.updateBuffer();\n  this.linesMesh.faceCount = floor(this.vertexCount / 2);\n  this.renderer.renderMesh(this.linesMesh, this.shader, null, this.renderOpts);\n  this.clear();\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (DebugDraw);\n\nDebugDraw.GREEN = [0.1, 9.8, 0.1];\nDebugDraw.RED = [0.8, 0.1, 0.1];\nDebugDraw.BLUE = [142/255, 208/255, 255/255];\nDebugDraw.ORANGE = [1, 161/255, 40/255];\nDebugDraw.LIME = [224/255, 234/255, 180/255];\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/DebugDraw.js\n// module id = 8\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/DebugDraw.js?");

/***/ }),
/* 9 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_engine_Resources__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__entities_AxisBasisObject__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__entities_GridEntity__ = __webpack_require__(42);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__entities_Camera__ = __webpack_require__(43);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_engine_Input__ = __webpack_require__(19);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_src_utils__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_engine_render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_math__ = __webpack_require__(0);\n\n\n\n\n\n\n\n\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].vec3;\n\nvar BaseScene = function BaseScene () {\n  this.renderer = __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */].instance.renderer;\n\n  var shader = __WEBPACK_IMPORTED_MODULE_1_engine_Resources__[\"a\" /* default */].getShader('vertexColorShader');\n  this.debugDraw = __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */].instance.setupDebugDraw(shader);\n\n  this.initEntities();\n};\n\nBaseScene.prototype.initEntities = function initEntities () {\n\n  this.axisBasis = new __WEBPACK_IMPORTED_MODULE_2__entities_AxisBasisObject__[\"a\" /* default */]();\n  this.grid = new __WEBPACK_IMPORTED_MODULE_3__entities_GridEntity__[\"a\" /* default */]({\n    cols: 12,\n    rows: 12,\n    step: 1\n  });\n\n  this.camera = new __WEBPACK_IMPORTED_MODULE_4__entities_Camera__[\"a\" /* default */]();\n  this.cameraMoveVector = vec3.create();\n};\n\nBaseScene.prototype.reset = function reset () {\n  this.camera.setPosition(0, 3, 6);\n  this.camera.rotate(0, -Math.PI / 10);\n  vec3.set(this.cameraMoveVector, 0, 0, 0);\n};\n\nBaseScene.prototype.render = function render (dt, gl) {\n  gl.clearColor(0.0, 0.0, 0.0, 1.0);\n  gl.enable(gl.DEPTH_TEST);\n  gl.depthFunc(gl.LEQUAL);\n  gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n  gl.enable(gl.CULL_FACE);\n  gl.cullFace(gl.BACK);\n\n  this.handleInput(dt);\n\n  this.camera.recalculate();\n  this.renderer.setMatrices(this.camera.worldMatrix, this.camera.projectionMatrix);\n\n  gl.depthMask(false);\n  this.grid.render();\n  this.axisBasis.render();\n  gl.depthMask(true);\n};\n\nBaseScene.prototype.handleInput = function handleInput (dt) {\n  var MOVE_SPEED = 10 * dt;\n  var ROTATE_SPEED = Math.PI / 2 * dt;\n  var rotateH = 0;\n  var rotateV = 0;\n  var input = __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */].instance.input;\n\n  vec3.set(this.cameraMoveVector, 0, 0, 0);\n  if (input.keyDown('A'.charCodeAt(0))) {\n    this.cameraMoveVector[0] -= 1;\n  }\n  if (input.keyDown('D'.charCodeAt(0))) {\n    this.cameraMoveVector[0] += 1;\n  }\n  if (input.keyDown('S'.charCodeAt(0))) {\n    this.cameraMoveVector[2] += 1;\n  }\n  if (input.keyDown('W'.charCodeAt(0))) {\n    this.cameraMoveVector[2] -= 1;\n  }\n  if (input.keyDown('Q'.charCodeAt(0))) {\n    this.cameraMoveVector[1] -= 1;\n  }\n  if (input.keyDown('E'.charCodeAt(0))) {\n    this.cameraMoveVector[1] += 1;\n  }\n\n  if (input.mouseDown()) {\n    rotateH -= input.mouseDelta[0] * 0.006;\n    rotateV -= input.mouseDelta[1] * 0.006;\n  }\n\n  vec3.normalize(this.cameraMoveVector, this.cameraMoveVector);\n  vec3.scale(this.cameraMoveVector, this.cameraMoveVector, MOVE_SPEED);\n\n  this.camera.move(this.cameraMoveVector[0], this.cameraMoveVector[1], this.cameraMoveVector[2]);\n  this.camera.rotate(rotateH, rotateV);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (BaseScene);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/BaseScene.js\n// module id = 9\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/BaseScene.js?");

/***/ }),
/* 10 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_engine_Resources__ = __webpack_require__(4);\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\n\n\n\n\nvar sharedMesh = null;\n\nvar AxisBasisObject = function AxisBasisObject () {\n  this.renderer = __WEBPACK_IMPORTED_MODULE_2_engine_Application__[\"a\" /* default */].instance.renderer;\n  var gl = __WEBPACK_IMPORTED_MODULE_2_engine_Application__[\"a\" /* default */].gl;\n\n  this.transform = mat4.create();\n\n  if (!sharedMesh) {\n    sharedMesh = new __WEBPACK_IMPORTED_MODULE_0_engine_render_Mesh__[\"a\" /* default */]();\n    sharedMesh.setVertices([\n      0, 0, 0,\n      1, 0, 0,\n      0, 0, 0,\n      0, 1, 0,\n      0, 0, 0,\n      0, 0, 1\n    ]);\n\n    sharedMesh.setColors([\n      1, 0, 0, 1,\n      1, 0, 0, 1,\n      0, 1, 0, 1,\n      0, 1, 0, 1,\n      0, 0, 1, 1,\n      0, 0, 1, 1\n    ]);\n\n    sharedMesh.setIndices([\n      0, 1, 2, 3, 4, 5\n    ]);\n\n    sharedMesh.createBuffer();\n  }\n\n  this.mesh = sharedMesh;\n\n  this.renderOpts = {\n    renderMode: gl.LINES\n  };\n\n  this.shader = __WEBPACK_IMPORTED_MODULE_3_engine_Resources__[\"a\" /* default */].getShader('vertexColorShader');\n};\n\nAxisBasisObject.prototype.render = function render () {\n  this.renderer.renderMesh(this.mesh, this.shader, this.transform, this.renderOpts);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (AxisBasisObject);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entities/AxisBasisObject.js\n// module id = 10\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/entities/AxisBasisObject.js?");

/***/ }),
/* 11 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_lib_ObjectPool__ = __webpack_require__(7);\n\n\nvar FPPair = function FPPair () {};\n\nFPPair.prototype.setup = function setup (particle, forceGenerator) {\n  this.particle = particle;\n  this.forceGenerator = forceGenerator;\n};\n\nFPPair.prototype.prepareForPool = function prepareForPool () {\n  this.setup(null, null);\n};\n\nvar ParticleForceRegistry = function ParticleForceRegistry () {\n  this.pool = new __WEBPACK_IMPORTED_MODULE_0_engine_lib_ObjectPool__[\"a\" /* default */](FPPair);\n  this.pairList = [];\n};\n\nParticleForceRegistry.prototype.add = function add (particle, forceGenerator) {\n  var pair = this.pool.obtain();\n  pair.setup(particle, forceGenerator);\n  this.pairList.push(pair);\n};\n\nParticleForceRegistry.prototype.removePair = function removePair (particle, forceGenerator) {\n    var this$1 = this;\n\n  var list = this.pairList;\n  var len = list.length;\n\n  for (var i = len - 1; i >= 0; i--) {\n    var pair = list[i];\n    if (pair.particle === particle && pair.forceGenerator === forceGenerator) {\n      this$1.pool.release(pair);\n      list[i] = list[--len];\n      list.length = len;\n      return;\n    }\n  }\n};\n\nParticleForceRegistry.prototype.removeParticle = function removeParticle (particle) {\n    var this$1 = this;\n\n  var list = this.pairList;\n  var len = list.length;\n\n  for (var i = len - 1; i >= 0; i--) {\n    var pair = list[i];\n    if (pair.particle === particle) {\n      this$1.pool.release(pair);\n      list[i] = list[--len];\n    }\n  }\n\n  list.length = len;\n};\n\nParticleForceRegistry.prototype.clear = function clear () {\n    var this$1 = this;\n\n  for (var i = 0, list = this$1.pairList; i < list.length; i += 1) {\n    var pair = list[i];\n\n      this$1.pool.release(pair);\n  }\n  this.pairList.length = 0;\n};\n\nParticleForceRegistry.prototype.updateForces = function updateForces (dt) {\n  var list = this.pairList;\n  var len = list.length;\n\n  for (var i = 0; i < len; i++) {\n    var pair = list[i];\n    pair.forceGenerator.updateForce(pair.particle, dt);\n  }\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ParticleForceRegistry);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/particles/ParticleForceRegistry.js\n// module id = 11\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/particles/ParticleForceRegistry.js?");

/***/ }),
/* 12 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__ParticleForceGenerator__ = __webpack_require__(45);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\n\nvar helperVec = vec3.create();\n\nvar GravityForceGenerator = (function (ParticleForceGenerator) {\n  function GravityForceGenerator (x, y, z) {\n    if ( x === void 0 ) x = 0;\n    if ( y === void 0 ) y = 10;\n    if ( z === void 0 ) z = 0;\n\n    this.gravity = vec3.create();\n    vec3.set(this.gravity, x, y, z);\n  }\n\n  if ( ParticleForceGenerator ) GravityForceGenerator.__proto__ = ParticleForceGenerator;\n  GravityForceGenerator.prototype = Object.create( ParticleForceGenerator && ParticleForceGenerator.prototype );\n  GravityForceGenerator.prototype.constructor = GravityForceGenerator;\n\n  GravityForceGenerator.prototype.updateForce = function updateForce (particle, dt) {\n    if (particle.inverseMass === 0) {\n      return;\n    }\n\n    vec3.scale(helperVec, this.gravity, particle.mass);\n    particle.addForce(helperVec);\n  };\n\n  return GravityForceGenerator;\n}(__WEBPACK_IMPORTED_MODULE_0__ParticleForceGenerator__[\"a\" /* default */]));\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GravityForceGenerator);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/particles/GravityForceGenerator.js\n// module id = 12\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/particles/GravityForceGenerator.js?");

/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\n\nvar helperVec = vec3.create();\nvar impulsePerInvMass = vec3.create();\nvar movePerInvMass = vec3.create();\nvar accCausedVelocity = vec3.create();\n\nvar ParticleContact = function ParticleContact () {\n  this.particle1 = null\n  this.particle2 = null\n  this.restitution = 1;\n  this.contactNormal = vec3.create();\n  this.penetration = 0;\n};\n\nParticleContact.prototype.setup = function setup (particle1, particle2, restitution, contactNormal) {\n  this.particle1 = particle1;\n  this.particle2 = particle2;\n  this.restitution = restitution;\n  vec3.copy(this.contactNormal, contactNormal);\n};\n\nParticleContact.prototype.resolve = function resolve (dt) {\n  this.resolveVelocity(dt);\n};\n\nParticleContact.prototype.calculateSeparatingSpeed = function calculateSeparatingSpeed () {\n  if (this.particle2) {\n    vec3.subtract(helperVec, this.particle1.velocity, this.particle2.velocity);\n    return vec3.dot(helperVec, this.contactNormal);\n  } else {\n    return vec3.dot(this.particle1.velocity, this.contactNormal);\n  }\n};\n\nParticleContact.prototype.resolveVelocity = function resolveVelocity (dt) {\n  var particle1 = this.particle1;\n  var particle2 = this.particle2;\n\n  var separatingSpeed = this.calculateSeparatingSpeed();\n\n  if (separatingSpeed > 0) {\n    return;\n  }\n\n  var newSepSpeed = -separatingSpeed * this.restitution;\n\n  // Correct separating speed if movement was caused by acceleration from the rest position (zero relative speed)\n  vec3.copy(accCausedVelocity, particle1.acceleration);\n  if (particle2) {\n    vec3.subtract(accCausedVelocity, accCausedVelocity, particle2.acceleration);\n  };\n\n  // Acceleration value towards the contact normal\n  var accCausedSepVelocity = vec3.dot(accCausedVelocity, this.contactNormal) * dt;\n  if (accCausedSepVelocity < 0) { // Amount of acceleration\n    newSepSpeed += this.restitution * accCausedSepVelocity;\n    if (newSepSpeed < 0) {\n      newSepSpeed = 0;\n    }\n  }\n\n  var deltaSpeed = newSepSpeed - separatingSpeed;\n  var totalInvMass = particle1.inverseMass;\n  if (particle2) {\n    totalInvMass += particle2.inverseMass;\n  }\n\n  if (totalInvMass <= 0) {\n    return;\n  }\n\n  // Total impulse\n  var impulse = deltaSpeed / totalInvMass; // same as deltaSpeed * (p1.mass + p2.mass)\n  vec3.scale(impulsePerInvMass, this.contactNormal, impulse);\n\n  vec3.scaleAndAdd(particle1.velocity, particle1.velocity, impulsePerInvMass, particle1.inverseMass);\n  if (particle2) {\n    vec3.scaleAndAdd(particle2.velocity, particle2.velocity, impulsePerInvMass, -particle2.inverseMass);\n  }\n\n  // Also resolve penetration\n  if (this.penetration > 0) {\n    vec3.scale(movePerInvMass, this.contactNormal, this.penetration / totalInvMass);\n\n    // Shift for particle1\n    vec3.scale(helperVec, movePerInvMass, particle1.inverseMass);\n    vec3.add(particle1.position, particle1.position, helperVec);\n\n    // Shift for particle2\n    if (particle2) {\n      // Shift for particle1\n      vec3.scale(helperVec, movePerInvMass, particle2.inverseMass);\n      vec3.add(particle2.position, particle2.position, helperVec);\n    }\n  }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ParticleContact);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/particles/ParticleContact.js\n// module id = 13\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/particles/ParticleContact.js?");

/***/ }),
/* 14 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"c\", function() { return CollisionPrimitive; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"d\", function() { return CollisionSphere; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return CollisionPlane; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CollisionBox; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_lib_ObjectPool__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\n\nvar CollisionPrimitive = function CollisionPrimitive () {\n  this.offset = mat4.create();\n  this.transform = mat4.create();\n  this.body = null;\n  this.type = 0;\n};\n\nCollisionPrimitive.prototype.claculateInternals = function claculateInternals () {\n  mat4.multiply(this.transform, this.body.transformMatrix, this.offset);\n};\n\nCollisionPrimitive.prototype.setup = function setup (body, offset) {\n  this.body = body;\n\n  if (offset) {\n    mat4.copy(this.offset, offset);\n  } else {\n    mat4.identity(this.offset);\n  }\n};\n\nCollisionPrimitive.prototype.getAxis = function getAxis (out, axis) {\n  mat4.getAxis(out, this.transform, axis);\n};\n\nvar CollisionSphere = (function (CollisionPrimitive) {\n  function CollisionSphere () {\n    CollisionPrimitive.call(this);\n    this.radius = 0;\n    this.type = CollisionPrimitive.SPHERE;\n  }\n\n  if ( CollisionPrimitive ) CollisionSphere.__proto__ = CollisionPrimitive;\n  CollisionSphere.prototype = Object.create( CollisionPrimitive && CollisionPrimitive.prototype );\n  CollisionSphere.prototype.constructor = CollisionSphere;\n\n  CollisionSphere.prototype.setup = function setup (radius, body, offset) {\n    this.radius = radius;\n    CollisionPrimitive.prototype.setup.call(this, body, offset);\n  };\n\n  return CollisionSphere;\n}(CollisionPrimitive));\n\nvar CollisionPlane = (function (CollisionPrimitive) {\n  function CollisionPlane () {\n    CollisionPrimitive.call(this);\n    this.normal = vec3.create();\n    this.distance = 0;\n    this.type = CollisionPrimitive.PLANE;\n  }\n\n  if ( CollisionPrimitive ) CollisionPlane.__proto__ = CollisionPrimitive;\n  CollisionPlane.prototype = Object.create( CollisionPrimitive && CollisionPrimitive.prototype );\n  CollisionPlane.prototype.constructor = CollisionPlane;\n\n  CollisionPlane.prototype.setup = function setup (normal, distance, body, offset) {\n    vec3.copy(this.normal, normal);\n    this.distance = distance;\n    CollisionPrimitive.prototype.setup.call(this, body, offset);\n  };\n\n  return CollisionPlane;\n}(CollisionPrimitive));\n\nvar CollisionBox = (function (CollisionPrimitive) {\n  function CollisionBox () {\n      CollisionPrimitive.call(this);\n      this.halfSize = vec3.create();\n      this.type = CollisionPrimitive.BOX;\n    }\n\n  if ( CollisionPrimitive ) CollisionBox.__proto__ = CollisionPrimitive;\n  CollisionBox.prototype = Object.create( CollisionPrimitive && CollisionPrimitive.prototype );\n  CollisionBox.prototype.constructor = CollisionBox;\n\n    CollisionBox.prototype.setup = function setup (size, body, offset) {\n      vec3.scale(this.halfSize, size, 0.5);\n      CollisionPrimitive.prototype.setup.call(this, body, offset);\n    };\n\n  return CollisionBox;\n}(CollisionPrimitive));\n\nCollisionPrimitive.SPHERE = 1;\nCollisionPrimitive.BOX = 2;\nCollisionPrimitive.PLANE = 3;\n\n// export class PrimitiveInSet {\n//   constructor () {\n//     this.primitive = null;\n//     this.transform = mat4.create();\n//   }\n// }\n\n// export class PrimitiveSet extends Primitive {\n\n//   constructor () {\n//     this.primitives = []; // array of PrimitiveInSet\n//   }\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/Primitive.js\n// module id = 14\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/Primitive.js?");

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"fromMat4\"] = fromMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"transpose\"] = transpose;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"adjoint\"] = adjoint;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"translate\"] = translate;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"fromTranslation\"] = fromTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"fromMat2d\"] = fromMat2d;\n/* harmony export (immutable) */ __webpack_exports__[\"fromQuat\"] = fromQuat;\n/* harmony export (immutable) */ __webpack_exports__[\"normalFromMat4\"] = normalFromMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"projection\"] = projection;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 3x3 Matrix\n * @module mat3\n */\n\n/**\n * Creates a new identity mat3\n *\n * @returns {mat3} a new 3x3 matrix\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](9);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the upper-left 3x3 values into the given mat3.\n *\n * @param {mat3} out the receiving 3x3 matrix\n * @param {mat4} a   the source 4x4 matrix\n * @returns {mat3} out\n */\nfunction fromMat4(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[4];\n  out[4] = a[5];\n  out[5] = a[6];\n  out[6] = a[8];\n  out[7] = a[9];\n  out[8] = a[10];\n  return out;\n}\n\n/**\n * Creates a new mat3 initialized with values from an existing matrix\n *\n * @param {mat3} a matrix to clone\n * @returns {mat3} a new 3x3 matrix\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](9);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Copy the values from one mat3 to another\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Create a new mat3 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} A new mat3\n */\nfunction fromValues(m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](9);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set the components of a mat3 to the given values\n *\n * @param {mat3} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m10 Component in column 1, row 0 position (index 3)\n * @param {Number} m11 Component in column 1, row 1 position (index 4)\n * @param {Number} m12 Component in column 1, row 2 position (index 5)\n * @param {Number} m20 Component in column 2, row 0 position (index 6)\n * @param {Number} m21 Component in column 2, row 1 position (index 7)\n * @param {Number} m22 Component in column 2, row 2 position (index 8)\n * @returns {mat3} out\n */\nfunction set(out, m00, m01, m02, m10, m11, m12, m20, m21, m22) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m10;\n  out[4] = m11;\n  out[5] = m12;\n  out[6] = m20;\n  out[7] = m21;\n  out[8] = m22;\n  return out;\n}\n\n/**\n * Set a mat3 to the identity matrix\n *\n * @param {mat3} out the receiving matrix\n * @returns {mat3} out\n */\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1], a02 = a[2], a12 = a[5];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a01;\n    out[5] = a[7];\n    out[6] = a02;\n    out[7] = a12;\n  } else {\n    out[0] = a[0];\n    out[1] = a[3];\n    out[2] = a[6];\n    out[3] = a[1];\n    out[4] = a[4];\n    out[5] = a[7];\n    out[6] = a[2];\n    out[7] = a[5];\n    out[8] = a[8];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction invert(out, a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2];\n  var a10 = a[3], a11 = a[4], a12 = a[5];\n  var a20 = a[6], a21 = a[7], a22 = a[8];\n\n  var b01 = a22 * a11 - a12 * a21;\n  var b11 = -a22 * a10 + a12 * a20;\n  var b21 = a21 * a10 - a11 * a20;\n\n  // Calculate the determinant\n  var det = a00 * b01 + a01 * b11 + a02 * b21;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = b01 * det;\n  out[1] = (-a22 * a01 + a02 * a21) * det;\n  out[2] = (a12 * a01 - a02 * a11) * det;\n  out[3] = b11 * det;\n  out[4] = (a22 * a00 - a02 * a20) * det;\n  out[5] = (-a12 * a00 + a02 * a10) * det;\n  out[6] = b21 * det;\n  out[7] = (-a21 * a00 + a01 * a20) * det;\n  out[8] = (a11 * a00 - a01 * a10) * det;\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the source matrix\n * @returns {mat3} out\n */\nfunction adjoint(out, a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2];\n  var a10 = a[3], a11 = a[4], a12 = a[5];\n  var a20 = a[6], a21 = a[7], a22 = a[8];\n\n  out[0] = (a11 * a22 - a12 * a21);\n  out[1] = (a02 * a21 - a01 * a22);\n  out[2] = (a01 * a12 - a02 * a11);\n  out[3] = (a12 * a20 - a10 * a22);\n  out[4] = (a00 * a22 - a02 * a20);\n  out[5] = (a02 * a10 - a00 * a12);\n  out[6] = (a10 * a21 - a11 * a20);\n  out[7] = (a01 * a20 - a00 * a21);\n  out[8] = (a00 * a11 - a01 * a10);\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat3\n *\n * @param {mat3} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2];\n  var a10 = a[3], a11 = a[4], a12 = a[5];\n  var a20 = a[6], a21 = a[7], a22 = a[8];\n\n  return a00 * (a22 * a11 - a12 * a21) + a01 * (-a22 * a10 + a12 * a20) + a02 * (a21 * a10 - a11 * a20);\n}\n\n/**\n * Multiplies two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction multiply(out, a, b) {\n  var a00 = a[0], a01 = a[1], a02 = a[2];\n  var a10 = a[3], a11 = a[4], a12 = a[5];\n  var a20 = a[6], a21 = a[7], a22 = a[8];\n\n  var b00 = b[0], b01 = b[1], b02 = b[2];\n  var b10 = b[3], b11 = b[4], b12 = b[5];\n  var b20 = b[6], b21 = b[7], b22 = b[8];\n\n  out[0] = b00 * a00 + b01 * a10 + b02 * a20;\n  out[1] = b00 * a01 + b01 * a11 + b02 * a21;\n  out[2] = b00 * a02 + b01 * a12 + b02 * a22;\n\n  out[3] = b10 * a00 + b11 * a10 + b12 * a20;\n  out[4] = b10 * a01 + b11 * a11 + b12 * a21;\n  out[5] = b10 * a02 + b11 * a12 + b12 * a22;\n\n  out[6] = b20 * a00 + b21 * a10 + b22 * a20;\n  out[7] = b20 * a01 + b21 * a11 + b22 * a21;\n  out[8] = b20 * a02 + b21 * a12 + b22 * a22;\n  return out;\n}\n\n/**\n * Translate a mat3 by the given vector\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to translate\n * @param {vec2} v vector to translate by\n * @returns {mat3} out\n */\nfunction translate(out, a, v) {\n  var a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n    x = v[0], y = v[1];\n\n  out[0] = a00;\n  out[1] = a01;\n  out[2] = a02;\n\n  out[3] = a10;\n  out[4] = a11;\n  out[5] = a12;\n\n  out[6] = x * a00 + y * a10 + a20;\n  out[7] = x * a01 + y * a11 + a21;\n  out[8] = x * a02 + y * a12 + a22;\n  return out;\n}\n\n/**\n * Rotates a mat3 by the given angle\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nfunction rotate(out, a, rad) {\n  var a00 = a[0], a01 = a[1], a02 = a[2],\n    a10 = a[3], a11 = a[4], a12 = a[5],\n    a20 = a[6], a21 = a[7], a22 = a[8],\n\n    s = Math.sin(rad),\n    c = Math.cos(rad);\n\n  out[0] = c * a00 + s * a10;\n  out[1] = c * a01 + s * a11;\n  out[2] = c * a02 + s * a12;\n\n  out[3] = c * a10 - s * a00;\n  out[4] = c * a11 - s * a01;\n  out[5] = c * a12 - s * a02;\n\n  out[6] = a20;\n  out[7] = a21;\n  out[8] = a22;\n  return out;\n};\n\n/**\n * Scales the mat3 by the dimensions in the given vec2\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat3} out\n **/\nfunction scale(out, a, v) {\n  var x = v[0], y = v[1];\n\n  out[0] = x * a[0];\n  out[1] = x * a[1];\n  out[2] = x * a[2];\n\n  out[3] = y * a[3];\n  out[4] = y * a[4];\n  out[5] = y * a[5];\n\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.translate(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat3} out\n */\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 1;\n  out[5] = 0;\n  out[6] = v[0];\n  out[7] = v[1];\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.rotate(dest, dest, rad);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat3} out\n */\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad), c = Math.cos(rad);\n\n  out[0] = c;\n  out[1] = s;\n  out[2] = 0;\n\n  out[3] = -s;\n  out[4] = c;\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat3.identity(dest);\n *     mat3.scale(dest, dest, vec);\n *\n * @param {mat3} out mat3 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat3} out\n */\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n\n  out[3] = 0;\n  out[4] = v[1];\n  out[5] = 0;\n\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 1;\n  return out;\n}\n\n/**\n * Copies the values from a mat2d into a mat3\n *\n * @param {mat3} out the receiving matrix\n * @param {mat2d} a the matrix to copy\n * @returns {mat3} out\n **/\nfunction fromMat2d(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = 0;\n\n  out[3] = a[2];\n  out[4] = a[3];\n  out[5] = 0;\n\n  out[6] = a[4];\n  out[7] = a[5];\n  out[8] = 1;\n  return out;\n}\n\n/**\n* Calculates a 3x3 matrix from the given quaternion\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {quat} q Quaternion to create matrix from\n*\n* @returns {mat3} out\n*/\nfunction fromQuat(out, q) {\n  var x = q[0], y = q[1], z = q[2], w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[3] = yx - wz;\n  out[6] = zx + wy;\n\n  out[1] = yx + wz;\n  out[4] = 1 - xx - zz;\n  out[7] = zy - wx;\n\n  out[2] = zx - wy;\n  out[5] = zy + wx;\n  out[8] = 1 - xx - yy;\n\n  return out;\n}\n\n/**\n* Calculates a 3x3 normal matrix (transpose inverse) from the 4x4 matrix\n*\n* @param {mat3} out mat3 receiving operation result\n* @param {mat4} a Mat4 to derive the normal matrix from\n*\n* @returns {mat3} out\n*/\nfunction normalFromMat4(out, a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[2] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n\n  out[3] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[4] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[5] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n\n  out[6] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[7] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[8] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n\n  return out;\n}\n\n/**\n * Generates a 2D projection matrix with the given bounds\n *\n * @param {mat3} out mat3 frustum matrix will be written into\n * @param {number} width Width of your gl context\n * @param {number} height Height of gl context\n * @returns {mat3} out\n */\nfunction projection(out, width, height) {\n    out[0] = 2 / width;\n    out[1] = 0;\n    out[2] = 0;\n    out[3] = 0;\n    out[4] = -2 / height;\n    out[5] = 0;\n    out[6] = -1;\n    out[7] = 1;\n    out[8] = 1;\n    return out;\n}\n\n/**\n * Returns a string representation of a mat3\n *\n * @param {mat3} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nfunction str(a) {\n  return 'mat3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ', ' +\n          a[6] + ', ' + a[7] + ', ' + a[8] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat3\n *\n * @param {mat3} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nfunction frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2)))\n}\n\n/**\n * Adds two mat3's\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @returns {mat3} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  return out;\n}\n\n\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat3} out the receiving matrix\n * @param {mat3} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat3} out\n */\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  return out;\n}\n\n/**\n * Adds two mat3's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat3} out the receiving vector\n * @param {mat3} a the first operand\n * @param {mat3} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat3} out\n */\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] &&\n         a[3] === b[3] && a[4] === b[4] && a[5] === b[5] &&\n         a[6] === b[6] && a[7] === b[7] && a[8] === b[8];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat3} a The first matrix.\n * @param {mat3} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5], a6 = a[6], a7 = a[7], a8 = a[8];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5], b6 = b[6], b7 = b[7], b8 = b[8];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)));\n}\n\n/**\n * Alias for {@link mat3.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link mat3.subtract}\n * @function\n */\nvar sub = subtract;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/mat3.js\n// module id = 15\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/mat3.js?");

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"length\"] = length;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"divide\"] = divide;\n/* harmony export (immutable) */ __webpack_exports__[\"ceil\"] = ceil;\n/* harmony export (immutable) */ __webpack_exports__[\"floor\"] = floor;\n/* harmony export (immutable) */ __webpack_exports__[\"min\"] = min;\n/* harmony export (immutable) */ __webpack_exports__[\"max\"] = max;\n/* harmony export (immutable) */ __webpack_exports__[\"round\"] = round;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"scaleAndAdd\"] = scaleAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"distance\"] = distance;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredDistance\"] = squaredDistance;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredLength\"] = squaredLength;\n/* harmony export (immutable) */ __webpack_exports__[\"negate\"] = negate;\n/* harmony export (immutable) */ __webpack_exports__[\"inverse\"] = inverse;\n/* harmony export (immutable) */ __webpack_exports__[\"normalize\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"dot\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"cross\"] = cross;\n/* harmony export (immutable) */ __webpack_exports__[\"lerp\"] = lerp;\n/* harmony export (immutable) */ __webpack_exports__[\"hermite\"] = hermite;\n/* harmony export (immutable) */ __webpack_exports__[\"bezier\"] = bezier;\n/* harmony export (immutable) */ __webpack_exports__[\"random\"] = random;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat4\"] = transformMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat3\"] = transformMat3;\n/* harmony export (immutable) */ __webpack_exports__[\"transformQuat\"] = transformQuat;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateX\"] = rotateX;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateY\"] = rotateY;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateZ\"] = rotateZ;\n/* harmony export (immutable) */ __webpack_exports__[\"angle\"] = angle;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 3 Dimensional Vector\n * @module vec3\n */\n\n/**\n * Creates a new, empty vec3\n *\n * @returns {vec3} a new 3D vector\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](3);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec3 initialized with values from an existing vector\n *\n * @param {vec3} a vector to clone\n * @returns {vec3} a new 3D vector\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](3);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Calculates the length of a vec3\n *\n * @param {vec3} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Creates a new vec3 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} a new 3D vector\n */\nfunction fromValues(x, y, z) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](3);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Copy the values from one vec3 to another\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the source vector\n * @returns {vec3} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  return out;\n}\n\n/**\n * Set the components of a vec3 to the given values\n *\n * @param {vec3} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @returns {vec3} out\n */\nfunction set(out, x, y, z) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  return out;\n}\n\n/**\n * Adds two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  return out;\n}\n\n/**\n * Multiplies two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  return out;\n}\n\n/**\n * Divides two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to ceil\n * @returns {vec3} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to floor\n * @returns {vec3} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to round\n * @returns {vec3} out\n */\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  return out;\n}\n\n/**\n * Scales a vec3 by a scalar number\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec3} out\n */\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  return out;\n}\n\n/**\n * Adds two vec3's after scaling the second operand by a scalar value\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec3} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return Math.sqrt(x*x + y*y + z*z);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Calculates the squared length of a vec3\n *\n * @param {vec3} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  return x*x + y*y + z*z;\n}\n\n/**\n * Negates the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to negate\n * @returns {vec3} out\n */\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to invert\n * @returns {vec3} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  return out;\n}\n\n/**\n * Normalize a vec3\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a vector to normalize\n * @returns {vec3} out\n */\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var len = x*x + y*y + z*z;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n    out[2] = a[2] * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec3's\n *\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n}\n\n/**\n * Computes the cross product of two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n  var ax = a[0], ay = a[1], az = a[2];\n  var bx = b[0], by = b[1], bz = b[2];\n\n  out[0] = ay * bz - az * by;\n  out[1] = az * bx - ax * bz;\n  out[2] = ax * by - ay * bx;\n  return out;\n}\n\n/**\n * Performs a linear interpolation between two vec3's\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  return out;\n}\n\n/**\n * Performs a hermite interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction hermite(out, a, b, c, d, t) {\n  var factorTimes2 = t * t;\n  var factor1 = factorTimes2 * (2 * t - 3) + 1;\n  var factor2 = factorTimes2 * (t - 2) + t;\n  var factor3 = factorTimes2 * (t - 1);\n  var factor4 = factorTimes2 * (3 - 2 * t);\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Performs a bezier interpolation with two control points\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the first operand\n * @param {vec3} b the second operand\n * @param {vec3} c the third operand\n * @param {vec3} d the fourth operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec3} out\n */\nfunction bezier(out, a, b, c, d, t) {\n  var inverseFactor = 1 - t;\n  var inverseFactorTimesTwo = inverseFactor * inverseFactor;\n  var factorTimes2 = t * t;\n  var factor1 = inverseFactorTimesTwo * inverseFactor;\n  var factor2 = 3 * t * inverseFactorTimesTwo;\n  var factor3 = 3 * factorTimes2 * inverseFactor;\n  var factor4 = factorTimes2 * t;\n\n  out[0] = a[0] * factor1 + b[0] * factor2 + c[0] * factor3 + d[0] * factor4;\n  out[1] = a[1] * factor1 + b[1] * factor2 + c[1] * factor3 + d[1] * factor4;\n  out[2] = a[2] * factor1 + b[2] * factor2 + c[2] * factor3 + d[2] * factor4;\n\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec3} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec3} out\n */\nfunction random(out, scale) {\n  scale = scale || 1.0;\n\n  var r = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]() * 2.0 * Math.PI;\n  var z = (__WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]() * 2.0) - 1.0;\n  var zScale = Math.sqrt(1.0-z*z) * scale;\n\n  out[0] = Math.cos(r) * zScale;\n  out[1] = Math.sin(r) * zScale;\n  out[2] = z * scale;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat4.\n * 4th vector component is implicitly '1'\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat4(out, a, m) {\n  var x = a[0], y = a[1], z = a[2];\n  var w = m[3] * x + m[7] * y + m[11] * z + m[15];\n  w = w || 1.0;\n  out[0] = (m[0] * x + m[4] * y + m[8] * z + m[12]) / w;\n  out[1] = (m[1] * x + m[5] * y + m[9] * z + m[13]) / w;\n  out[2] = (m[2] * x + m[6] * y + m[10] * z + m[14]) / w;\n  return out;\n}\n\n/**\n * Transforms the vec3 with a mat3.\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {mat3} m the 3x3 matrix to transform with\n * @returns {vec3} out\n */\nfunction transformMat3(out, a, m) {\n  var x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[3] + z * m[6];\n  out[1] = x * m[1] + y * m[4] + z * m[7];\n  out[2] = x * m[2] + y * m[5] + z * m[8];\n  return out;\n}\n\n/**\n * Transforms the vec3 with a quat\n *\n * @param {vec3} out the receiving vector\n * @param {vec3} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec3} out\n */\nfunction transformQuat(out, a, q) {\n  // benchmarks: http://jsperf.com/quaternion-transform-vec3-implementations\n\n  var x = a[0], y = a[1], z = a[2];\n  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the x-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateX(out, a, b, c){\n  var p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0];\n  r[1] = p[1]*Math.cos(c) - p[2]*Math.sin(c);\n  r[2] = p[1]*Math.sin(c) + p[2]*Math.cos(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the y-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateY(out, a, b, c){\n  var p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[2]*Math.sin(c) + p[0]*Math.cos(c);\n  r[1] = p[1];\n  r[2] = p[2]*Math.cos(c) - p[0]*Math.sin(c);\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Rotate a 3D vector around the z-axis\n * @param {vec3} out The receiving vec3\n * @param {vec3} a The vec3 point to rotate\n * @param {vec3} b The origin of the rotation\n * @param {Number} c The angle of rotation\n * @returns {vec3} out\n */\nfunction rotateZ(out, a, b, c){\n  var p = [], r=[];\n  //Translate point to the origin\n  p[0] = a[0] - b[0];\n  p[1] = a[1] - b[1];\n  p[2] = a[2] - b[2];\n\n  //perform rotation\n  r[0] = p[0]*Math.cos(c) - p[1]*Math.sin(c);\n  r[1] = p[0]*Math.sin(c) + p[1]*Math.cos(c);\n  r[2] = p[2];\n\n  //translate to correct position\n  out[0] = r[0] + b[0];\n  out[1] = r[1] + b[1];\n  out[2] = r[2] + b[2];\n\n  return out;\n}\n\n/**\n * Get the angle between two 3D vectors\n * @param {vec3} a The first operand\n * @param {vec3} b The second operand\n * @returns {Number} The angle in radians\n */\nfunction angle(a, b) {\n  var tempA = fromValues(a[0], a[1], a[2]);\n  var tempB = fromValues(b[0], b[1], b[2]);\n\n  normalize(tempA, tempA);\n  normalize(tempB, tempB);\n\n  var cosine = dot(tempA, tempB);\n\n  if(cosine > 1.0) {\n    return 0;\n  }\n  else if(cosine < -1.0) {\n    return Math.PI;\n  } else {\n    return Math.acos(cosine);\n  }\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec3} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'vec3(' + a[0] + ', ' + a[1] + ', ' + a[2] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec3} a The first vector.\n * @param {vec3} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2];\n  var b0 = b[0], b1 = b[1], b2 = b[2];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)));\n}\n\n/**\n * Alias for {@link vec3.subtract}\n * @function\n */\nvar sub = subtract;\n\n/**\n * Alias for {@link vec3.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link vec3.divide}\n * @function\n */\nvar div = divide;\n\n/**\n * Alias for {@link vec3.distance}\n * @function\n */\nvar dist = distance;\n\n/**\n * Alias for {@link vec3.squaredDistance}\n * @function\n */\nvar sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec3.length}\n * @function\n */\nvar len = length;\n\n/**\n * Alias for {@link vec3.squaredLength}\n * @function\n */\nvar sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec3s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec3. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec3s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvar forEach = (function() {\n  var vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    var i, l;\n    if(!stride) {\n      stride = 3;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2];\n    }\n\n    return a;\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/vec3.js\n// module id = 16\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/vec3.js?");

/***/ }),
/* 17 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"divide\"] = divide;\n/* harmony export (immutable) */ __webpack_exports__[\"ceil\"] = ceil;\n/* harmony export (immutable) */ __webpack_exports__[\"floor\"] = floor;\n/* harmony export (immutable) */ __webpack_exports__[\"min\"] = min;\n/* harmony export (immutable) */ __webpack_exports__[\"max\"] = max;\n/* harmony export (immutable) */ __webpack_exports__[\"round\"] = round;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"scaleAndAdd\"] = scaleAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"distance\"] = distance;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredDistance\"] = squaredDistance;\n/* harmony export (immutable) */ __webpack_exports__[\"length\"] = length;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredLength\"] = squaredLength;\n/* harmony export (immutable) */ __webpack_exports__[\"negate\"] = negate;\n/* harmony export (immutable) */ __webpack_exports__[\"inverse\"] = inverse;\n/* harmony export (immutable) */ __webpack_exports__[\"normalize\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"dot\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"lerp\"] = lerp;\n/* harmony export (immutable) */ __webpack_exports__[\"random\"] = random;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat4\"] = transformMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"transformQuat\"] = transformQuat;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 4 Dimensional Vector\n * @module vec4\n */\n\n/**\n * Creates a new, empty vec4\n *\n * @returns {vec4} a new 4D vector\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with values from an existing vector\n *\n * @param {vec4} a vector to clone\n * @returns {vec4} a new 4D vector\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a new vec4 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} a new 4D vector\n */\nfunction fromValues(x, y, z, w) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Copy the values from one vec4 to another\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the source vector\n * @returns {vec4} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set the components of a vec4 to the given values\n *\n * @param {vec4} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {vec4} out\n */\nfunction set(out, x, y, z, w) {\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = w;\n  return out;\n}\n\n/**\n * Adds two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Multiplies two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  out[2] = a[2] * b[2];\n  out[3] = a[3] * b[3];\n  return out;\n}\n\n/**\n * Divides two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  out[2] = a[2] / b[2];\n  out[3] = a[3] / b[3];\n  return out;\n}\n\n/**\n * Math.ceil the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to ceil\n * @returns {vec4} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  out[2] = Math.ceil(a[2]);\n  out[3] = Math.ceil(a[3]);\n  return out;\n}\n\n/**\n * Math.floor the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to floor\n * @returns {vec4} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  out[2] = Math.floor(a[2]);\n  out[3] = Math.floor(a[3]);\n  return out;\n}\n\n/**\n * Returns the minimum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  out[2] = Math.min(a[2], b[2]);\n  out[3] = Math.min(a[3], b[3]);\n  return out;\n}\n\n/**\n * Returns the maximum of two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {vec4} out\n */\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  out[2] = Math.max(a[2], b[2]);\n  out[3] = Math.max(a[3], b[3]);\n  return out;\n}\n\n/**\n * Math.round the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to round\n * @returns {vec4} out\n */\nfunction round(out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  out[2] = Math.round(a[2]);\n  out[3] = Math.round(a[3]);\n  return out;\n}\n\n/**\n * Scales a vec4 by a scalar number\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec4} out\n */\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two vec4's after scaling the second operand by a scalar value\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec4} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Calculates the euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared euclidian distance between two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0];\n  var y = b[1] - a[1];\n  var z = b[2] - a[2];\n  var w = b[3] - a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Calculates the length of a vec4\n *\n * @param {vec4} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return Math.sqrt(x*x + y*y + z*z + w*w);\n}\n\n/**\n * Calculates the squared length of a vec4\n *\n * @param {vec4} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength(a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  return x*x + y*y + z*z + w*w;\n}\n\n/**\n * Negates the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to negate\n * @returns {vec4} out\n */\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = -a[3];\n  return out;\n}\n\n/**\n * Returns the inverse of the components of a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to invert\n * @returns {vec4} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  out[2] = 1.0 / a[2];\n  out[3] = 1.0 / a[3];\n  return out;\n}\n\n/**\n * Normalize a vec4\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a vector to normalize\n * @returns {vec4} out\n */\nfunction normalize(out, a) {\n  var x = a[0];\n  var y = a[1];\n  var z = a[2];\n  var w = a[3];\n  var len = x*x + y*y + z*z + w*w;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    out[0] = x * len;\n    out[1] = y * len;\n    out[2] = z * len;\n    out[3] = w * len;\n  }\n  return out;\n}\n\n/**\n * Calculates the dot product of two vec4's\n *\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1] + a[2] * b[2] + a[3] * b[3];\n}\n\n/**\n * Performs a linear interpolation between two vec4's\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the first operand\n * @param {vec4} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec4} out\n */\nfunction lerp(out, a, b, t) {\n  var ax = a[0];\n  var ay = a[1];\n  var az = a[2];\n  var aw = a[3];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  out[2] = az + t * (b[2] - az);\n  out[3] = aw + t * (b[3] - aw);\n  return out;\n}\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec4} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec4} out\n */\nfunction random(out, vectorScale) {\n  vectorScale = vectorScale || 1.0;\n\n  //TODO: This is a pretty awful way of doing this. Find something better.\n  out[0] = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]();\n  out[1] = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]();\n  out[2] = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]();\n  out[3] = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]();\n  normalize(out, out);\n  scale(out, out, vectorScale);\n  return out;\n}\n\n/**\n * Transforms the vec4 with a mat4.\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec4} out\n */\nfunction transformMat4(out, a, m) {\n  var x = a[0], y = a[1], z = a[2], w = a[3];\n  out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;\n  out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;\n  out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;\n  out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;\n  return out;\n}\n\n/**\n * Transforms the vec4 with a quat\n *\n * @param {vec4} out the receiving vector\n * @param {vec4} a the vector to transform\n * @param {quat} q quaternion to transform with\n * @returns {vec4} out\n */\nfunction transformQuat(out, a, q) {\n  var x = a[0], y = a[1], z = a[2];\n  var qx = q[0], qy = q[1], qz = q[2], qw = q[3];\n\n  // calculate quat * vec\n  var ix = qw * x + qy * z - qz * y;\n  var iy = qw * y + qz * x - qx * z;\n  var iz = qw * z + qx * y - qy * x;\n  var iw = -qx * x - qy * y - qz * z;\n\n  // calculate result * inverse quat\n  out[0] = ix * qw + iw * -qx + iy * -qz - iz * -qy;\n  out[1] = iy * qw + iw * -qy + iz * -qx - ix * -qz;\n  out[2] = iz * qw + iw * -qz + ix * -qy - iy * -qx;\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec4} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'vec4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns whether or not the vectors have exactly the same elements in the same position (when compared with ===)\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec4} a The first vector.\n * @param {vec4} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Alias for {@link vec4.subtract}\n * @function\n */\nvar sub = subtract;\n\n/**\n * Alias for {@link vec4.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link vec4.divide}\n * @function\n */\nvar div = divide;\n\n/**\n * Alias for {@link vec4.distance}\n * @function\n */\nvar dist = distance;\n\n/**\n * Alias for {@link vec4.squaredDistance}\n * @function\n */\nvar sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec4.length}\n * @function\n */\nvar len = length;\n\n/**\n * Alias for {@link vec4.squaredLength}\n * @function\n */\nvar sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec4s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvar forEach = (function() {\n  var vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    var i, l;\n    if(!stride) {\n      stride = 4;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1]; vec[2] = a[i+2]; vec[3] = a[i+3];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1]; a[i+2] = vec[2]; a[i+3] = vec[3];\n    }\n\n    return a;\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/vec4.js\n// module id = 17\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/vec4.js?");

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var Material = function Material () {\n  this.shader = null;\n  this.texture0 = null;\n  this.texture1 = null;\n  this.normalMap = null;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Material);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/Material.js\n// module id = 18\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/Material.js?");

/***/ }),
/* 19 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n\nvar vec2 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec2;\n\nvar Input = function Input () {\n  var this$1 = this;\n\n  this.keyMap = {};\n  this.mouseMap = {};\n  this.mousePos = vec2.create();\n  this.lastMousePos = vec2.create();\n  this.mouseDelta = vec2.create();\n\n  window.addEventListener('keydown', function (e) { return this$1.onKeyDown(e); }, true);\n  window.addEventListener('keyup', function (e) { return this$1.onKeyUp(e); }, true);\n  window.addEventListener('mousemove', function (e) { return this$1.onMouseMove(e); }, true);\n  window.addEventListener('mousedown', function (e) { return this$1.onMouseDown(e); }, true);\n  window.addEventListener('mouseup', function (e) { return this$1.onMouseUp(e); }, true);\n};\n\nInput.prototype.update = function update () {\n  vec2.subtract(this.mouseDelta, this.mousePos, this.lastMousePos);\n  vec2.copy(this.lastMousePos, this.mousePos);\n};\n\nInput.prototype.onMouseMove = function onMouseMove (e) {\n  this.mousePos[0] = e.clientX;\n  this.mousePos[1] = e.clientY;\n  e.stopPropagation();\n};\n\nInput.prototype.onMouseDown = function onMouseDown (e) {\n  this.mouseMap[e.button] = true;\n  e.preventDefault();\n  e.stopPropagation();\n};\n\nInput.prototype.onMouseUp = function onMouseUp (e) {\n  this.mouseMap[e.button] = false;\n  e.stopPropagation();\n};\n\nInput.prototype.onKeyDown = function onKeyDown (e) {\n  this.keyMap[e.keyCode] = true;\n  e.stopPropagation();\n};\n\nInput.prototype.onKeyUp = function onKeyUp (e) {\n  this.keyMap[e.keyCode] = false;\n  e.stopPropagation();\n};\n\nInput.prototype.keyDown = function keyDown (key) {\n  return !!this.keyMap[key];\n};\n\nInput.prototype.mouseDown = function mouseDown (button) {\n    if ( button === void 0 ) button = Input.MOUSE_LEFT;\n\n  return !!this.mouseMap[button];\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Input);\n\nInput.KEY_LEFT = 37;\nInput.KEY_UP = 38;\nInput.KEY_RIGHT = 39;\nInput.KEY_DOWN = 40;\nInput.KEY_SPACE = 32;\nInput.MOUSE_LEFT = 0;\nInput.MOUSE_MIDDLE = 1;\nInput.MOUSE_RIGHT = 2;\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/Input.js\n// module id = 19\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/Input.js?");

/***/ }),
/* 20 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Application__ = __webpack_require__(1);\n\n\n\nvar quat = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].quat;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\nvar mat4 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].mat4;\n\nvar identityMatrix = mat4.create();\n\nvar GameObject = function GameObject () {\n  this.gl = __WEBPACK_IMPORTED_MODULE_1__Application__[\"a\" /* default */].gl;\n  this.parent = null;\n  this.children = [];\n  this.position = vec3.create();\n  this.rotation = quat.create();\n  this.scale = vec3.fromValues(1, 1, 1);\n  this.transform = mat4.create();\n  this.worldTransform = mat4.create();\n  this.mesh = null;\n  this.enabled = true;\n  this.material = null;\n};\n\n//------------------------------------------------------------------------\n// Parent / child\n//------------------------------------------------------------------------\n\nGameObject.prototype.removeFromParent = function removeFromParent () {\n  if (this.parent) {\n    this.parent.removeChild(this);\n  }\n};\n\nGameObject.prototype.removeChild = function removeChild (child) {\n  var index = this.children.indexOf(child);\n  if (index >= 0) {\n    child.parent = null;\n    this.children[index] = this.children[this.children.length - 1];\n    this.children.length -= 1;\n  }\n};\n\nGameObject.prototype.addChild = function addChild (gameObject) {\n  if (this.children.indexOf(gameObject) !== -1) {\n    return;\n  }\n\n  gameObject.removeFromParent();\n\n  this.children.push(gameObject);\n};\n\n//------------------------------------------------------------------------\n// Transformation\n//------------------------------------------------------------------------\n\nGameObject.prototype.updateTransform = function updateTransform (parentTransform) {\n  if (this.rigidbody) {\n    mat4.copy(this.transform, this.rigidbody.transformMatrix);\n    mat4.copy(this.worldTransform, this.rigidbody.transformMatrix);\n  } else if (parentTransform) {\n    mat4.fromRotationTranslationScale(this.transform, this.rotation, this.position, this.scale);\n    mat4.multiply(this.worldTransform, parentTransform, this.transform);\n  } else {\n    mat4.copy(this.worldTransform, this.transform);\n  }\n\n  var children = this.children;\n  var length = children.length;\n  var worldTransform = this.worldTransform;\n  for (var i = 0; i < length; i++) {\n    var child = children[i];\n    child.updateTransform(worldTransform);\n  }\n};\n\n//------------------------------------------------------------------------\n// Update\n//------------------------------------------------------------------------\n\nGameObject.prototype.update = function update (dt) {\n  var children = this.children;\n  for (var i = 0, len = children.length; i < len; i++) {\n    var child = children[i];\n    child.update(dt);\n  }\n};\n\nGameObject.prototype.setupRenderOp = function setupRenderOp (renderOp) {\n  if (!this.material || !this.mesh) {\n    return;\n  }\n\n  renderOp.mesh = this.mesh;\n  renderOp.material = this.material;\n  renderOp.transform = this.worldTransform;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GameObject);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/scene/GameObject.js\n// module id = 20\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/scene/GameObject.js?");

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Primitive__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n\n\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\nvar mat3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat3;\nvar quat = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].quat;\n\nvar pow = Math.pow;\n\nvar convertPoint = vec3.create();\nvar deltaPoint = vec3.create();\nvar helperPoint = vec3.create();\nvar angularAcceleration = vec3.create();\n\nvar RigidBody = function RigidBody () {\n  this.position = vec3.create();\n  this.orientation = quat.create();\n\n  this.velocity = quat.create();\n  this.rotation = vec3.create(); // angular velocity\n\n  this.acceleration = vec3.create();\n\n  this.transformMatrix = mat4.create();\n  this.lastFrameAcceleration = vec3.create();\n\n  this.inverseMass = 1;\n  this.inverseInertiaTensor = mat3.create();\n  this.inverseInertiaTensorWorld = mat3.create();\n\n  this.forceAccum = vec3.create();\n  this.torqueAccum = vec3.create();\n\n  this.angularDamping = 0.98;\n  this.linearDamping = 0.98;\n\n  this.isAwake = true;\n  this.isFiniteMass = true;\n\n  this.shape = null;\n};\n\n//------------------------------------------------------------------------\n// Geometry\n//------------------------------------------------------------------------\n\nRigidBody.prototype.setSphere = function setSphere (radius) {\n  this.shape = new __WEBPACK_IMPORTED_MODULE_0__Primitive__[\"d\" /* CollisionSphere */]();\n  this.shape.setup(radius, this);\n};\n\nRigidBody.prototype.setBox = function setBox (size) {\n  this.shape = new __WEBPACK_IMPORTED_MODULE_0__Primitive__[\"a\" /* CollisionBox */]();\n  this.shape.setup(size, this);\n};\n\n//------------------------------------------------------------------------\n// Setters, body manipulation\n//------------------------------------------------------------------------\n\nRigidBody.prototype.setPosition = function setPosition (position) {\n  if (arguments.length === 3) {\n    this.position[0] = arguments[0];\n    this.position[1] = arguments[1];\n    this.position[2] = arguments[2];\n  } else {\n    vec3.copy(this.position, position);\n  }\n};\n\nRigidBody.prototype.setVelocity = function setVelocity (velocity) {\n  if (arguments.length === 3) {\n    this.velocity[0] = arguments[0];\n    this.velocity[1] = arguments[1];\n    this.velocity[2] = arguments[2];\n  } else {\n    vec3.copy(this.velocity, velocity);\n  }\n};\n\nRigidBody.prototype.setMass = function setMass (mass) {\n  this.inverseMass = 1 / mass;\n};\n\nRigidBody.prototype.setInveseMass = function setInveseMass (inverseMass) {\n  this.inverseMass = inverseMass;\n  this.isFiniteMass = inverseMass > 0;\n};\n\nRigidBody.prototype.setInertiaTensor = function setInertiaTensor (inertiaTensor) {\n  mat3.invert(this.inverseInertiaTensor, inertiaTensor);\n};\n\nRigidBody.prototype.addForce = function addForce (force) {\n  vec3.add(this.forceAccum, this.forceAccum, force);\n  this.isAwake = true;\n};\n\nRigidBody.prototype.addTorque = function addTorque (torque) {\n  vec3.add(this.torqueAccum, this.torqueAccum, torque);\n  this.isAwake = true;\n};\n\nRigidBody.prototype.addForceAtLocalPoint = function addForceAtLocalPoint (force, localPoint) {\n  vec3.transformMat4(convertPoint, localPoint, this.transformMatrix);\n  this.addForceAtPoint(force, convertPoint);\n};\n\nRigidBody.prototype.addForceAtPoint = function addForceAtPoint (force, worldPoint) {\n  vec3.subtract(deltaPoint, worldPoint, this.position); // get vector from body origin to force application point\n\n  vec3.add(this.forceAccum, this.forceAccum, force); // add force\n  vec3.cross(helperPoint, deltaPoint, force); // Calculate torque\n  vec3.add(this.torqueAccum, this.torqueAccum, helperPoint); // add torque\n};\n\nRigidBody.prototype.integrate = function integrate (dt) {\n  vec3.copy(this.lastFrameAcceleration, this.acceleration);\n  vec3.scaleAndAdd(this.lastFrameAcceleration, this.lastFrameAcceleration, this.forceAccum, this.inverseMass);\n\n  vec3.transformMat3(angularAcceleration, this.torqueAccum, this.inverseInertiaTensorWorld);\n  vec3.scaleAndAdd(this.velocity, this.velocity, this.lastFrameAcceleration, dt);\n  vec3.scaleAndAdd(this.rotation, this.rotation, angularAcceleration, dt);\n\n  vec3.scale(this.velocity, this.velocity, pow(this.linearDamping, dt));\n  vec3.scale(this.rotation, this.rotation, pow(this.angularDamping, dt));\n\n  vec3.scaleAndAdd(this.position, this.position, this.velocity, dt);\n  quat.addScaledRotaton(this.orientation, this.orientation, this.rotation, dt);\n\n  this.calculateDerivedData();\n  this.clearAccumulators();\n};\n\n//------------------------------------------------------------------------\n// Getters\n//------------------------------------------------------------------------\n\nRigidBody.prototype.localPointToWorldSpace = function localPointToWorldSpace (out, localPoint) {\n  vec3.transformMat4(out, localPoint, this.transformMatrix);\n};\n\nRigidBody.prototype.worldPointToLocalSpace = function worldPointToLocalSpace (out, worldPoint) {\n  vec3.transformInvertMat4(out, worldPoint, this.transformMatrix);\n};\n\n//------------------------------------------------------------------------\n// Internal\n//------------------------------------------------------------------------\n\nRigidBody.prototype.clearAccumulators = function clearAccumulators () {\n  var fa = this.forceAccum;\n  fa[0] = fa[1] = fa[2] = 0;\n\n  var ta = this.torqueAccum;\n  ta[0] = ta[1] = ta[2] = 0;\n};\n\nRigidBody.prototype.calculateDerivedData = function calculateDerivedData () {\n  quat.normalize(this.orientation, this.orientation);\n  this.calculateTransformMatrix();\n  this.transformInertiaTensor();\n  if (this.shape) {\n    this.shape.claculateInternals();\n  }\n};\n\nRigidBody.prototype.calculateTransformMatrix = function calculateTransformMatrix () {\n  mat4.fromRotationTranslation(this.transformMatrix, this.orientation, this.position);\n};\n\nRigidBody.prototype.transformInertiaTensor = function transformInertiaTensor () {\n  // return;\n  // TODO: try to replace this with high level functions calls (to understand the process)\n  var iitBody = this.inverseInertiaTensor;\n  var iitWorld = this.inverseInertiaTensorWorld;\n  var rotmat = this.transformMatrix;\n\n  var t4= rotmat[0]*iitBody[0] + rotmat[1]*iitBody[3] + rotmat[2]*iitBody[6];\n  var t9= rotmat[0]*iitBody[1] + rotmat[1]*iitBody[4] + rotmat[2]*iitBody[7];\n  var t14 = rotmat[0]*iitBody[2] + rotmat[1]*iitBody[5] + rotmat[2]*iitBody[8];\n  var t28 = rotmat[4]*iitBody[0] + rotmat[5]*iitBody[3] + rotmat[6]*iitBody[6];\n  var t33 = rotmat[4]*iitBody[1] + rotmat[5]*iitBody[4] + rotmat[6]*iitBody[7];\n  var t38 = rotmat[4]*iitBody[2] + rotmat[5]*iitBody[5] + rotmat[6]*iitBody[8];\n  var t52 = rotmat[8]*iitBody[0] + rotmat[9]*iitBody[3] + rotmat[10]*iitBody[6];\n  var t57 = rotmat[8]*iitBody[1] + rotmat[9]*iitBody[4] + rotmat[10]*iitBody[7];\n  var t62 = rotmat[8]*iitBody[2] + rotmat[9]*iitBody[5] + rotmat[10]*iitBody[8];\n\n  iitWorld[0] = t4*rotmat[0]+ t9*rotmat[1]+ t14*rotmat[2];\n  iitWorld[1] = t4*rotmat[4]+ t9*rotmat[5]+ t14*rotmat[6];\n  iitWorld[2] = t4*rotmat[8]+ t9*rotmat[9]+ t14*rotmat[10];\n  iitWorld[3] = t28*rotmat[0] + t33*rotmat[1] + t38*rotmat[2];\n  iitWorld[4] = t28*rotmat[4] + t33*rotmat[5] + t38*rotmat[6];\n  iitWorld[5] = t28*rotmat[8] + t33*rotmat[9] + t38*rotmat[10];\n  iitWorld[6] = t52*rotmat[0] + t57*rotmat[1] + t62*rotmat[2];\n  iitWorld[7] = t52*rotmat[4] + t57*rotmat[5] + t62*rotmat[6];\n  iitWorld[8] = t52*rotmat[8] + t57*rotmat[9] + t62*rotmat[10];\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RigidBody);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/RigidBody.js\n// module id = 21\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/RigidBody.js?");

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\nvar abs = Math.abs;\n\nvar localBodyPosition = vec3.create();\nvar targetBodyPosition = vec3.create();\nvar force = vec3.create();\n\nvar Spring = function Spring (localBodyPoint, targetBodyPoint, localBody, springConstant, restLength) {\n  if ( springConstant === void 0 ) springConstant = 1;\n  if ( restLength === void 0 ) restLength = 1;\n\n  this.localBodyPoint = vec3.create();\n  this.targetBodyPoint = vec3.create();\n  if (localBodyPoint) {\n    vec3.copy(this.localBodyPoint, localBodyPoint);\n  }\n  if (targetBodyPoint) {\n    vec3.copy(this.targetBodyPoint, targetBodyPoint);\n  }\n\n  this.localBody = localBody;\n\n  this.springConstant = springConstant;\n  this.restLength = restLength;\n};\n\nSpring.prototype.updateForce = function updateForce (body, duration) {\n  body.localPointToWorldSpace(targetBodyPosition, this.targetBodyPoint);\n\n  if (this.localBody) {\n    this.localBody.localPointToWorldSpace(localBodyPosition, this.localBodyPoint);\n  } else {\n    vec3.copy(localBodyPosition, this.localBodyPoint);\n  }\n\n  // Vector of the spring\n  vec3.subtract(force, targetBodyPosition, localBodyPosition);\n\n  var magnitude = vec3.length(force);\n  var springDelta = abs(magnitude - this.restLength) * this.springConstant;\n  vec3.scale(force, force, 1 / magnitude * (-springDelta)); // normalize force and multiply it by spring delta\n  body.addForceAtLocalPoint(force, this.targetBodyPoint);\n};\n\n/* unused harmony default export */ var _unused_webpack_default_export = (Spring);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/Spring.js\n// module id = 22\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/Spring.js?");

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"a\", function() { return CollisionData; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"b\", function() { return CollisionDetector; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__Contact__ = __webpack_require__(47);\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\nvar sqrt = Math.sqrt;\nvar abs = Math.abs;\n\nvar p1 = vec3.create();\nvar p2 = vec3.create();\nvar helperVec = vec3.create();\nvar midline = vec3.create();\nvar relativeCenter = vec3.create();\nvar normal = vec3.create();\nvar closestPoint = vec3.create();\nvar tryAxisData = { smallestPenetration: 0, smallestIndex: 0 };\nvar toSt = vec3.create();\nvar cOne = vec3.create();\nvar cTwo = vec3.create();\nvar boxAxis = vec3.create();\nvar boxAxis2 = vec3.create();\nvar toCentre = vec3.create();\n\nvar BOX_MULTIPLIERS = [\n  [1,1,1], [-1,1,1], [1,-1,1], [-1,-1,1],\n  [1,1,-1], [-1,1,-1], [1,-1,-1], [-1,-1,-1]\n];\n\nvar CollisionData = function CollisionData (maxContacts) {\n  var this$1 = this;\n  if ( maxContacts === void 0 ) maxContacts = 256;\n\n  this.contacts = [];\n  this.maxContacts = maxContacts;\n\n  for (var i = 0; i < maxContacts; i++) {\n    this$1.contacts.push(new __WEBPACK_IMPORTED_MODULE_1__Contact__[\"a\" /* default */]());\n  }\n\n  this.clear();\n};\n\nCollisionData.prototype.clear = function clear () {\n  this.contactsLeft = this.maxContacts;\n  this.contactsCount = 0;\n  this.friction = 0;\n  this.restitution = 0;\n};\n\nCollisionData.prototype.contactAdded = function contactAdded () {\n  this.contactsLeft -= 1;\n  this.contactsCount += 1;\n};\n\n//------------------------------------------------------------------------\n// CollisionDetector\n//------------------------------------------------------------------------\n\nvar CollisionDetector = function CollisionDetector () {};\n\nCollisionDetector.sphereVsHalfSpace = function sphereVsHalfSpace (sphere, plane, collisionData) {\n  if (collisionData.contactsLeft <= 0) {\n    return 0;\n  }\n\n  sphere.getAxis(p1, 3);\n\n  // Distance from plane\n  var distance = vec3.dot(p1, plane.normal) - sphere.radius - plane.distance;\n\n  if (distance >= 0) { return 0; }\n\n  var contact = collisionData.contacts[collisionData.contactsCount]; // Free contact\n  vec3.copy(contact.contactNormal, plane.normal);\n  vec3.scaleAndAdd(contact.contactPoint, p1, plane.normal, -distance - sphere.radius);\n  contact.penetration = -distance;\n\n  contact.setBodyData(sphere.body, plane.body, collisionData.friction, collisionData.restitution);\n  collisionData.contactAdded();\n\n  return 1;\n};\n\nCollisionDetector.sphereVsSphere = function sphereVsSphere (one, two, collisionData) {\n  if (collisionData.contactsLeft <= 0) {\n    return 0;\n  }\n\n  // Getting positions\n  one.getAxis(p1, 3);\n  two.getAxis(p2, 3);\n  vec3.subtract(midline, p1, p2);\n  var sqMagnitude = vec3.squaredLength(midline);\n  var r1r2 = one.radius + two.radius;\n\n  if (sqMagnitude > r1r2 * r1r2 || sqMagnitude <= 0) {\n    return 0;\n  }\n\n  var magnitude = sqrt(sqMagnitude);\n  var contact = collisionData.contacts[collisionData.contactsCount]; // Free contact\n  vec3.scale(contact.contactNormal, midline, 1 / magnitude);\n  vec3.scaleAndAdd(contact.contactPoint, p2, midline, 0.5);\n  contact.penetration = r1r2 - magnitude;\n\n  contact.setBodyData(one.body, two.body, collisionData.friction, collisionData.restitution);\n  collisionData.contactAdded();\n\n  return 1;\n};\n\nCollisionDetector.boxVsHalfSpace = function boxVsHalfSpace (box, plane, collisionData) {\n  var contactsUsed = 0;\n  for (var i = 0; i < 8; i++) {\n    if (collisionData.contactsLeft <= 0) {\n      return contactsUsed;\n    }\n\n    vec3.multiply(p1, box.halfSize, BOX_MULTIPLIERS[i]);\n    vec3.transformMat4(p1, p1, box.transform);\n\n    var distance = vec3.dot(p1, plane.normal);\n\n    if (distance <= plane.distance) {\n      var contact = collisionData.contacts[collisionData.contactsCount];\n      var penetration = plane.distance - distance;\n      vec3.scaleAndAdd(contact.contactPoint, p1, plane.normal, -penetration * 0.5);\n      vec3.copy(contact.contactNormal, plane.normal);\n      contact.penetration = penetration;\n\n      contact.setBodyData(box.body, plane.body, collisionData.friction, collisionData.restitution);\n      collisionData.contactAdded();\n      contactsUsed += 1;\n    }\n  }\n\n  return contactsUsed;\n};\n\nCollisionDetector.sphereVsBox = function sphereVsBox (sphere, box, collisionData) {\n  if (collisionData.contactsLeft <= 0) {\n    return 0;\n  }\n\n  var halfSizeX = box.halfSize[0];\n  var halfSizeY = box.halfSize[1];\n  var halfSizeZ = box.halfSize[2];\n  var radius = sphere.radius;\n\n  sphere.getAxis(p1, 3);\n  vec3.transformInvertMat4(relativeCenter, p1, box.transform);\n\n  if (abs(relativeCenter[0]) - radius > halfSizeX ||\n      abs(relativeCenter[1]) - radius > halfSizeY ||\n      abs(relativeCenter[2]) - radius > halfSizeZ) {\n\n    return 0;\n  }\n\n  var dist = relativeCenter[0];\n  if (dist > halfSizeX) { dist = halfSizeX; }\n  if (dist < -halfSizeX) { dist = -halfSizeX; }\n  closestPoint[0] = dist;\n\n  dist = relativeCenter[1];\n  if (dist > halfSizeY) { dist = halfSizeY; }\n  if (dist < -halfSizeY) { dist = -halfSizeY; }\n  closestPoint[1] = dist;\n\n  dist = relativeCenter[2];\n  if (dist > halfSizeZ) { dist = halfSizeZ; }\n  if (dist < -halfSizeZ) { dist = -halfSizeZ; }\n  closestPoint[2] = dist;\n\n  dist = vec3.squaredDistance(closestPoint, relativeCenter);\n  if (dist > radius * radius) {\n    return 0;\n  }\n\n  dist = sqrt(dist);\n  vec3.transformMat4(p2, closestPoint, box.transform);\n  var contact = collisionData.contacts[collisionData.contactsCount];\n  vec3.subtract(contact.contactNormal, p2, p1);\n  vec3.scale(contact.contactNormal, contact.contactNormal, 1 / dist);\n  vec3.copy(contact.contactPoint, p2);\n  contact.penetration = radius - dist;\n\n  contact.setBodyData(box.body, sphere.body, collisionData.friction, collisionData.restitution);\n  collisionData.contactAdded();\n};\n\nCollisionDetector.boxVsBox = function boxVsBox (one, two, collisionData) {\n\n  function transformToAxis (box, axis) {\n    var result =0;\n\n    box.getAxis(helperVec, 0);\n    result += box.halfSize[0] * abs(vec3.dot(axis, helperVec));\n    box.getAxis(helperVec, 1);\n    result += box.halfSize[1] * abs(vec3.dot(axis, helperVec));\n    box.getAxis(helperVec, 2);\n    result += box.halfSize[2] * abs(vec3.dot(axis, helperVec));\n\n    return result;\n  }\n\n  function overlapOnAxis (boxOne, boxTwo, axis,toCentre) {\n    // Project the half-size of one onto axis\n    var oneProject = transformToAxis(one, axis);\n    var twoProject = transformToAxis(two, axis);\n\n    // Project this onto the axis\n    var distance = abs(vec3.dot(toCentre, axis));\n\n    // Check for overlap\n    return (distance < oneProject + twoProject);\n  }\n\n/*\n  * This function checks if the two boxes overlap\n  * along the given axis, returning the ammount of overlap.\n  * The final parameter toCentre\n  * is used to pass in the vector between the boxes centre\n  * points, to avoid having to recalculate it each time.\n  */\n  function penetrationOnAxis(one, two, axis, toCentre) {\n    // Project the half-size of one onto axis\n    var oneProject = transformToAxis(one, axis);\n    var twoProject = transformToAxis(two, axis);\n\n    // Project this onto the axis\n    var distance = abs(vec3.dot(toCentre, axis));\n\n    // Return the overlap (i.e. positive indicates\n    // overlap, negative indicates separation).\n    return oneProject + twoProject - distance;\n  }\n\n  function tryAxis (one, two, axis, toCentre, index, outData) {\n    // Make sure we have a normalized axis, and don't check almost parallel axes\n    if (vec3.squaredLength(axis) < 0.0001) { return true; }\n    vec3.normalize(axis, axis);\n\n    var penetration = penetrationOnAxis(one, two, axis, toCentre);\n\n    if (penetration < 0) { return false; }\n    if (penetration < outData.penetration) {\n        outData.penetration = penetration;\n        outData.best = index;\n    }\n    return true;\n  }\n\n  function fillPointFaceBoxBox(one, two, toCentre, collisionData, best, penetration) {\n    // This method is called when we know that a vertex from\n    // box two is in contact with box one.\n\n    var contact = collisionData.contacts[collisionData.contactsCount];\n\n    // We know which axis the collision is on (i.e. best),\n    // but we need to work out which of the two faces on\n    // this axis.\n    one.getAxis(normal, best);\n    if (vec3.dot(normal, toCentre) > 0) {\n        vec3.scale(normal, normal, -1);\n    }\n\n    // Work out which vertex of box two we're colliding with.\n    // Using toCentre doesn't work!\n    vec3.copy(helperVec, two.halfSize);\n    two.getAxis(p1, 0);\n    if (vec3.dot(p1, normal) < 0) { helperVec.x = -helperVec.x; }\n    two.getAxis(p1, 1);\n    if (vec3.dot(p1, normal) < 0) { helperVec.y = -helperVec.y; }\n    two.getAxis(p1, 2);\n    if (vec3.dot(p1, normal) < 0) { helperVec.z = -helperVec.z; }\n\n    // Create the contact data\n    vec3.copy(contact.contactNormal, normal);\n    contact.penetration = penetration;\n    vec3.transformMat4(contact.contactPoint, helperVec, two.transform);\n    contact.setBodyData(one.body, two.body, collisionData.friction, collisionData.restitution);\n    collisionData.contactAdded();\n  }\n\n  // If useOnce is true, and the contact point is outside\n  // the edge (in the case of an edge-face contact) then\n  // we use one's midpoint, otherwise we use two's.\n\n  function contactPoint(pOne, dOne, oneSize, pTwo, dTwo, twoSize, useOne, result) {\n    var smOne = vec3.squaredLength(dOne);\n    var smTwo = vec3.squaredLength(dTwo);\n    var dpOneTwo = vec3.dot(dTwo, dOne);\n\n    vec3.subtract(toSt, pOne, pTwo);\n    var dpStaOne = vec3.dot(dOne, toSt);\n    var dpStaTwo = vec3.dot(dTwo, toSt);\n\n    var denom = smOne * smTwo - dpOneTwo * dpOneTwo;\n\n    // Zero denominator indicates parrallel lines\n    if (abs(denom) < 0.0001) {\n        return useOne ? vec3.copy(result, pOne) : vec3.copy(result, pTwo);\n    }\n\n    var mua = (dpOneTwo * dpStaTwo - smTwo * dpStaOne) / denom;\n    var mub = (smOne * dpStaTwo - dpOneTwo * dpStaOne) / denom;\n\n    // If either of the edges has the nearest point out\n    // of bounds, then the edges aren't crossed, we have\n    // an edge-face contact. Our point is on the edge, which\n    // we know from the useOne parameter.\n    if (mua > oneSize ||\n        mua < -oneSize ||\n        mub > twoSize ||\n        mub < -twoSize) {\n      return useOne ? vec3.copy(result, pOne) : vec3.copy(result, pTwo);\n    } else {\n      vec3.scaleAndAdd(cOne, pOne, dOne, mua * 0.5);\n      vec3.scaleAndAdd(pTwo, dTwo, dOne, mub * 0.5);\n      return vec3.add(result, cOne, cTwo);\n    }\n  }\n\n  function CHECK_OVERLAP(axis, index) {\n    if (!tryAxis(one, two, axis, toCentre, index, tryAxisData)) { return true; }\n    else { return false; }\n  }\n\n  //if (!IntersectionTests::boxAndBox(one, two)) return 0;\n\n  // Find the vector between the two centres\n  one.getAxis(p1, 3);\n  two.getAxis(p2, 3);\n  vec3.subtract(toCentre, p2, p1);\n\n  // We start assuming there is no contact\n  tryAxisData.penetration = Infinity;\n  tryAxisData.best = 0xffffff;\n\n  // Now we check each axes, returning if it gives us\n  // a separating axis, and keeping track of the axis with\n  // the smallest penetration otherwise.\n\n  one.getAxis(boxAxis, 0);\n  if (CHECK_OVERLAP(boxAxis, 0)) { return 0; };\n  one.getAxis(boxAxis, 1);\n  if (CHECK_OVERLAP(boxAxis, 1)) { return 0; };\n  one.getAxis(boxAxis, 2);\n  if (CHECK_OVERLAP(boxAxis, 2)) { return 0; };\n\n  two.getAxis(boxAxis, 0);\n  if (CHECK_OVERLAP(boxAxis, 3)) { return 0; };\n  two.getAxis(boxAxis, 1);\n  if (CHECK_OVERLAP(boxAxis, 4)) { return 0; };\n  two.getAxis(boxAxis, 2);\n  if (CHECK_OVERLAP(boxAxis, 5)) { return 0; };\n\n  // Store the best axis-major, in case we run into almost\n  // parallel edge collisions later\n  var bestSingleAxis = tryAxisData.best;\n\n  one.getAxis(boxAxis, 0);\n\n  two.getAxis(boxAxis2, 0);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 6)) { return 0; };\n  two.getAxis(boxAxis2, 1);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 7)) { return 0; };\n  two.getAxis(boxAxis2, 2);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 8)) { return 0; };\n\n  one.getAxis(boxAxis, 1);\n\n  two.getAxis(boxAxis2, 0);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 9)) { return 0; };\n  two.getAxis(boxAxis2, 1);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 10)) { return 0; };\n  two.getAxis(boxAxis2, 2);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 11)) { return 0; };\n\n  one.getAxis(boxAxis, 2);\n\n  two.getAxis(boxAxis2, 0);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 12)) { return 0; };\n  two.getAxis(boxAxis2, 1);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 13)) { return 0; };\n  two.getAxis(boxAxis2, 2);\n  vec3.cross(normal, boxAxis, boxAxis2);\n  if (CHECK_OVERLAP(normal, 14)) { return 0; };\n\n  var best = tryAxisData.best;\n  var pen = tryAxisData.penetration;\n\n  // Make sure we've got a result.\n  if (best === 0xffffff) {\n    return 0;\n  }\n\n  // We now know there's a collision, and we know which\n  // of the axes gave the smallest penetration. We now\n  // can deal with it in different ways depending on\n  // the case.\n  if (best < 3) {\n    // We've got a vertex of box two on a face of box one.\n    fillPointFaceBoxBox(one, two, toCentre, collisionData, best, pen);\n    return 1;\n  }\n  else if (best < 6)\n  {\n    // We've got a vertex of box one on a face of box two.\n    // We use the same algorithm as above, but swap around\n    // one and two (and therefore also the vector between their\n    // centres).\n    vec3.scale(toCentre, toCentre, -1);\n    fillPointFaceBoxBox(two, one, toCentre, collisionData, best-3, pen);\n    return 1;\n  }\n  else\n  {\n    var contact = collisionData.contacts[collisionData.contactsCount];\n\n    // We've got an edge-edge contact. Find out which axes\n    best -= 6;\n    var oneAxisIndex = best / 3;\n    var twoAxisIndex = best % 3;\n    one.getAxis(boxAxis, oneAxisIndex);\n    two.getAxis(boxAxis2, twoAxisIndex);\n    vec3.cross(normal, boxAxis, boxAxis2);\n    vec3.normalize(normal, normal);\n\n    // The axis should point from box one to box two.\n    if (vec3.dot(normal, toCentre) > 0) {\n      vec3.scale(normal, normal, -1);\n    }\n\n    vec3.copy(contact.contactNormal, normal);\n\n    // We have the axes, but not the edges: each axis has 4 edges parallel\n    // to it, we need to find which of the 4 for each object. We do\n    // that by finding the point in the centre of the edge. We know\n    // its component in the direction of the box's collision axis is zero\n    // (its a mid-point) and we determine which of the extremes in each\n    // of the other axes is closest.\n    vec3.copy(p1, one.halfSize);\n    vec3.copy(p2, two.halfSize);\n    for (var i = 0; i < 3; i++)\n    {\n      if (i == oneAxisIndex) { p1[i] = 0; }\n      else {\n        one.getAxis(helperVec, i);\n        if (vec3.dot(helperVec, normal) > 0) { p1[i] = -p1[i]; }\n      }\n\n      if (i == twoAxisIndex) { p2[i] = 0; }\n      else {\n        two.getAxis(helperVec, i);\n        if (vec3.dot(helperVec, normal < 0)) { p2[i] = -p2[i]; }\n      }\n    }\n\n    // Move them into world coordinates (they are already oriented\n    // correctly, since they have been derived from the axes).    vec3.transformMat4(p1, p1, one.transform);\n    vec3.transformMat4(p2, p2, two.transform);\n\n    // So we have a point and a direction for the colliding edges.\n    // We need to find out point of closest approach of the two\n    // line-segments.\n    contactPoint(\n        p1, boxAxis, one.halfSize[oneAxisIndex],\n        p2, boxAxis2, two.halfSize[twoAxisIndex],\n        bestSingleAxis > 2,\n        contact.contactPoint\n        );\n\n    // We can fill the contact.\n    contact.penetration = pen;\n    contact.setBodyData(one.body, two.body, collisionData.friction, collisionData.restitution);\n    collisionData.contactAdded();\n    return 1;\n  }\n  return 0;\n};\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/CollisionNarrow.js\n// module id = 23\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/CollisionNarrow.js?");

/***/ }),
/* 24 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_src_Game__ = __webpack_require__(25);\n\nvar app = new __WEBPACK_IMPORTED_MODULE_0_src_Game__[\"a\" /* default */]();\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/index.js\n// module id = 24\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/index.js?");

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_engine_Resources__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_loader_ModelLoader__ = __webpack_require__(36);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_resources_shaders_white_shader__ = __webpack_require__(37);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_resources_shaders_white_shader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_resources_shaders_white_shader__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_resources_shaders_vertexColor_shader__ = __webpack_require__(38);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_resources_shaders_vertexColor_shader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_resources_shaders_vertexColor_shader__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_resources_shaders_directionalLighting_shader__ = __webpack_require__(39);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_resources_shaders_directionalLighting_shader___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_resources_shaders_directionalLighting_shader__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_resources_models_pyramid_bin__ = __webpack_require__(40);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_resources_models_pyramid_bin___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_resources_models_pyramid_bin__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__scenes_ParticleScene__ = __webpack_require__(41);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__scenes_RigidbodyScene__ = __webpack_require__(46);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__scenes_GameObjectScene__ = __webpack_require__(48);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nvar Game = (function (Application) {\n  function Game (data) {\n    Application.call(this, data);\n\n    this.loadResources();\n    this.initEntities();\n  }\n\n  if ( Application ) Game.__proto__ = Application;\n  Game.prototype = Object.create( Application && Application.prototype );\n  Game.prototype.constructor = Game;\n\n  Game.prototype.loadResources = function loadResources () {\n    __WEBPACK_IMPORTED_MODULE_1_engine_Resources__[\"a\" /* default */].addShader('whiteShader', __WEBPACK_IMPORTED_MODULE_3_resources_shaders_white_shader___default.a);\n    __WEBPACK_IMPORTED_MODULE_1_engine_Resources__[\"a\" /* default */].addShader('vertexColorShader', __WEBPACK_IMPORTED_MODULE_4_resources_shaders_vertexColor_shader___default.a);\n    __WEBPACK_IMPORTED_MODULE_1_engine_Resources__[\"a\" /* default */].addShader('directionalLightingShader', __WEBPACK_IMPORTED_MODULE_5_resources_shaders_directionalLighting_shader___default.a);\n\n    // ModelLoader.load(new DataView(new Uint8Array(pyramidModel)));\n\n    var oReq = new XMLHttpRequest();\n    oReq.open(\"GET\", __WEBPACK_IMPORTED_MODULE_6_resources_models_pyramid_bin___default.a, true);\n    oReq.responseType = \"arraybuffer\";\n\n    oReq.onload = function (oEvent) {\n      var arrayBuffer = oReq.response; // Note: not oReq.responseText\n      if (arrayBuffer) {\n        var byteArray = new Uint8Array(arrayBuffer);\n        console.info('loaded', byteArray);\n        for (var i = 0; i < byteArray.byteLength; i++) {\n\n        }\n      }\n    };\n\n    oReq.send(null);\n\n    // console.info('PYRAMID', typeof(pyramidModel));\n    // console.info(pyramidModel);\n  };\n\n  Game.prototype.initEntities = function initEntities () {\n    this.scenes = [\n      new __WEBPACK_IMPORTED_MODULE_9__scenes_GameObjectScene__[\"a\" /* default */]()\n    ];\n\n    this.setScene(0);\n  };\n\n  Game.prototype.setScene = function setScene (scene) {\n    this.currentScene = scene;\n    this.scenes[this.currentScene].reset();\n  };\n\n  Game.prototype.render = function render (dt, gl) {\n    this.scenes[this.currentScene].render(dt, gl);\n\n    var error = gl.getError();\n    if (error !== gl.NO_ERROR) {\n      console.error('GL error: ' + error);\n    }\n  };\n\n  return Game;\n}(__WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */]));\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Game);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/Game.js\n// module id = 25\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/Game.js?");

/***/ }),
/* 26 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"transpose\"] = transpose;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"adjoint\"] = adjoint;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"LDU\"] = LDU;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 2x2 Matrix\n * @module mat2\n */\n\n/**\n * Creates a new identity mat2\n *\n * @returns {mat2} a new 2x2 matrix\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat2 initialized with values from an existing matrix\n *\n * @param {mat2} a matrix to clone\n * @returns {mat2} a new 2x2 matrix\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Copy the values from one mat2 to another\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Set a mat2 to the identity matrix\n *\n * @param {mat2} out the receiving matrix\n * @returns {mat2} out\n */\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Create a new mat2 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out A new 2x2 matrix\n */\nfunction fromValues(m00, m01, m10, m11) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Set the components of a mat2 to the given values\n *\n * @param {mat2} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m10 Component in column 1, row 0 position (index 2)\n * @param {Number} m11 Component in column 1, row 1 position (index 3)\n * @returns {mat2} out\n */\nfunction set(out, m00, m01, m10, m11) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m10;\n  out[3] = m11;\n  return out;\n}\n\n/**\n * Transpose the values of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache\n  // some values\n  if (out === a) {\n    var a1 = a[1];\n    out[1] = a[2];\n    out[2] = a1;\n  } else {\n    out[0] = a[0];\n    out[1] = a[2];\n    out[2] = a[1];\n    out[3] = a[3];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction invert(out, a) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n\n  // Calculate the determinant\n  var det = a0 * a3 - a2 * a1;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] =  a3 * det;\n  out[1] = -a1 * det;\n  out[2] = -a2 * det;\n  out[3] =  a0 * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the source matrix\n * @returns {mat2} out\n */\nfunction adjoint(out, a) {\n  // Caching this value is nessecary if out == a\n  var a0 = a[0];\n  out[0] =  a[3];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] =  a0;\n\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2\n *\n * @param {mat2} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n  return a[0] * a[3] - a[2] * a[1];\n}\n\n/**\n * Multiplies two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nfunction multiply(out, a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  return out;\n}\n\n/**\n * Rotates a mat2 by the given angle\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nfunction rotate(out, a, rad) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  return out;\n}\n\n/**\n * Scales the mat2 by the dimensions in the given vec2\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to rotate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2} out\n **/\nfunction scale(out, a, v) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.rotate(dest, dest, rad);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2} out\n */\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2.identity(dest);\n *     mat2.scale(dest, dest, vec);\n *\n * @param {mat2} out mat2 receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2} out\n */\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2\n *\n * @param {mat2} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nfunction str(a) {\n  return 'mat2(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2\n *\n * @param {mat2} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nfunction frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2)))\n}\n\n/**\n * Returns L, D and U matrices (Lower triangular, Diagonal and Upper triangular) by factorizing the input matrix\n * @param {mat2} L the lower triangular matrix\n * @param {mat2} D the diagonal matrix\n * @param {mat2} U the upper triangular matrix\n * @param {mat2} a the input matrix to factorize\n */\n\nfunction LDU(L, D, U, a) {\n  L[2] = a[2]/a[0];\n  U[0] = a[0];\n  U[1] = a[1];\n  U[3] = a[3] - L[2] * U[1];\n  return [L, D, U];\n}\n\n/**\n * Adds two mat2's\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @returns {mat2} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2} a The first matrix.\n * @param {mat2} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)));\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2} out the receiving matrix\n * @param {mat2} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2} out\n */\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  return out;\n}\n\n/**\n * Adds two mat2's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2} out the receiving vector\n * @param {mat2} a the first operand\n * @param {mat2} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2} out\n */\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  return out;\n}\n\n/**\n * Alias for {@link mat2.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link mat2.subtract}\n * @function\n */\nvar sub = subtract;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/mat2.js\n// module id = 26\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/mat2.js?");

/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"translate\"] = translate;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"fromTranslation\"] = fromTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 2x3 Matrix\n * @module mat2d\n *\n * @description\n * A mat2d contains six elements defined as:\n * <pre>\n * [a, c, tx,\n *  b, d, ty]\n * </pre>\n * This is a short form for the 3x3 matrix:\n * <pre>\n * [a, c, tx,\n *  b, d, ty,\n *  0, 0, 1]\n * </pre>\n * The last row is ignored so the array is shorter and operations are faster.\n */\n\n/**\n * Creates a new identity mat2d\n *\n * @returns {mat2d} a new 2x3 matrix\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](6);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a new mat2d initialized with values from an existing matrix\n *\n * @param {mat2d} a matrix to clone\n * @returns {mat2d} a new 2x3 matrix\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](6);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Copy the values from one mat2d to another\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  return out;\n}\n\n/**\n * Set a mat2d to the identity matrix\n *\n * @param {mat2d} out the receiving matrix\n * @returns {mat2d} out\n */\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Create a new mat2d with the given values\n *\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} A new mat2d\n */\nfunction fromValues(a, b, c, d, tx, ty) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](6);\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Set the components of a mat2d to the given values\n *\n * @param {mat2d} out the receiving matrix\n * @param {Number} a Component A (index 0)\n * @param {Number} b Component B (index 1)\n * @param {Number} c Component C (index 2)\n * @param {Number} d Component D (index 3)\n * @param {Number} tx Component TX (index 4)\n * @param {Number} ty Component TY (index 5)\n * @returns {mat2d} out\n */\nfunction set(out, a, b, c, d, tx, ty) {\n  out[0] = a;\n  out[1] = b;\n  out[2] = c;\n  out[3] = d;\n  out[4] = tx;\n  out[5] = ty;\n  return out;\n}\n\n/**\n * Inverts a mat2d\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the source matrix\n * @returns {mat2d} out\n */\nfunction invert(out, a) {\n  var aa = a[0], ab = a[1], ac = a[2], ad = a[3];\n  var atx = a[4], aty = a[5];\n\n  var det = aa * ad - ab * ac;\n  if(!det){\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = ad * det;\n  out[1] = -ab * det;\n  out[2] = -ac * det;\n  out[3] = aa * det;\n  out[4] = (ac * aty - ad * atx) * det;\n  out[5] = (ab * atx - aa * aty) * det;\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat2d\n *\n * @param {mat2d} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n  return a[0] * a[3] - a[1] * a[2];\n}\n\n/**\n * Multiplies two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nfunction multiply(out, a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  out[0] = a0 * b0 + a2 * b1;\n  out[1] = a1 * b0 + a3 * b1;\n  out[2] = a0 * b2 + a2 * b3;\n  out[3] = a1 * b2 + a3 * b3;\n  out[4] = a0 * b4 + a2 * b5 + a4;\n  out[5] = a1 * b4 + a3 * b5 + a5;\n  return out;\n}\n\n/**\n * Rotates a mat2d by the given angle\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nfunction rotate(out, a, rad) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  out[0] = a0 *  c + a2 * s;\n  out[1] = a1 *  c + a3 * s;\n  out[2] = a0 * -s + a2 * c;\n  out[3] = a1 * -s + a3 * c;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Scales the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to scale the matrix by\n * @returns {mat2d} out\n **/\nfunction scale(out, a, v) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  var v0 = v[0], v1 = v[1];\n  out[0] = a0 * v0;\n  out[1] = a1 * v0;\n  out[2] = a2 * v1;\n  out[3] = a3 * v1;\n  out[4] = a4;\n  out[5] = a5;\n  return out;\n}\n\n/**\n * Translates the mat2d by the dimensions in the given vec2\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to translate\n * @param {vec2} v the vec2 to translate the matrix by\n * @returns {mat2d} out\n **/\nfunction translate(out, a, v) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  var v0 = v[0], v1 = v[1];\n  out[0] = a0;\n  out[1] = a1;\n  out[2] = a2;\n  out[3] = a3;\n  out[4] = a0 * v0 + a2 * v1 + a4;\n  out[5] = a1 * v0 + a3 * v1 + a5;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.rotate(dest, dest, rad);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat2d} out\n */\nfunction fromRotation(out, rad) {\n  var s = Math.sin(rad), c = Math.cos(rad);\n  out[0] = c;\n  out[1] = s;\n  out[2] = -s;\n  out[3] = c;\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.scale(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Scaling vector\n * @returns {mat2d} out\n */\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = v[1];\n  out[4] = 0;\n  out[5] = 0;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat2d.identity(dest);\n *     mat2d.translate(dest, dest, vec);\n *\n * @param {mat2d} out mat2d receiving operation result\n * @param {vec2} v Translation vector\n * @returns {mat2d} out\n */\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  out[4] = v[0];\n  out[5] = v[1];\n  return out;\n}\n\n/**\n * Returns a string representation of a mat2d\n *\n * @param {mat2d} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nfunction str(a) {\n  return 'mat2d(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' +\n          a[3] + ', ' + a[4] + ', ' + a[5] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat2d\n *\n * @param {mat2d} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nfunction frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + 1))\n}\n\n/**\n * Adds two mat2d's\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @returns {mat2d} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat2d} out the receiving matrix\n * @param {mat2d} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat2d} out\n */\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  return out;\n}\n\n/**\n * Adds two mat2d's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat2d} out the receiving vector\n * @param {mat2d} a the first operand\n * @param {mat2d} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat2d} out\n */\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] && a[4] === b[4] && a[5] === b[5];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat2d} a The first matrix.\n * @param {mat2d} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3], a4 = a[4], a5 = a[5];\n  var b0 = b[0], b1 = b[1], b2 = b[2], b3 = b[3], b4 = b[4], b5 = b[5];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)));\n}\n\n/**\n * Alias for {@link mat2d.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link mat2d.subtract}\n * @function\n */\nvar sub = subtract;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/mat2d.js\n// module id = 27\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/mat2d.js?");

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"transpose\"] = transpose;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"adjoint\"] = adjoint;\n/* harmony export (immutable) */ __webpack_exports__[\"determinant\"] = determinant;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"translate\"] = translate;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"rotate\"] = rotate;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateX\"] = rotateX;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateY\"] = rotateY;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateZ\"] = rotateZ;\n/* harmony export (immutable) */ __webpack_exports__[\"fromTranslation\"] = fromTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromScaling\"] = fromScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotation\"] = fromRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromXRotation\"] = fromXRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromYRotation\"] = fromYRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromZRotation\"] = fromZRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotationTranslation\"] = fromRotationTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"getTranslation\"] = getTranslation;\n/* harmony export (immutable) */ __webpack_exports__[\"getScaling\"] = getScaling;\n/* harmony export (immutable) */ __webpack_exports__[\"getRotation\"] = getRotation;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotationTranslationScale\"] = fromRotationTranslationScale;\n/* harmony export (immutable) */ __webpack_exports__[\"fromRotationTranslationScaleOrigin\"] = fromRotationTranslationScaleOrigin;\n/* harmony export (immutable) */ __webpack_exports__[\"fromQuat\"] = fromQuat;\n/* harmony export (immutable) */ __webpack_exports__[\"frustum\"] = frustum;\n/* harmony export (immutable) */ __webpack_exports__[\"perspective\"] = perspective;\n/* harmony export (immutable) */ __webpack_exports__[\"perspectiveFromFieldOfView\"] = perspectiveFromFieldOfView;\n/* harmony export (immutable) */ __webpack_exports__[\"ortho\"] = ortho;\n/* harmony export (immutable) */ __webpack_exports__[\"lookAt\"] = lookAt;\n/* harmony export (immutable) */ __webpack_exports__[\"targetTo\"] = targetTo;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"frob\"] = frob;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalar\"] = multiplyScalar;\n/* harmony export (immutable) */ __webpack_exports__[\"multiplyScalarAndAdd\"] = multiplyScalarAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 4x4 Matrix\n * @module mat4\n */\n\n/**\n * Creates a new identity mat4\n *\n * @returns {mat4} a new 4x4 matrix\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](16);\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a new mat4 initialized with values from an existing matrix\n *\n * @param {mat4} a matrix to clone\n * @returns {mat4} a new 4x4 matrix\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](16);\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Copy the values from one mat4 to another\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  out[2] = a[2];\n  out[3] = a[3];\n  out[4] = a[4];\n  out[5] = a[5];\n  out[6] = a[6];\n  out[7] = a[7];\n  out[8] = a[8];\n  out[9] = a[9];\n  out[10] = a[10];\n  out[11] = a[11];\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Create a new mat4 with the given values\n *\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} A new mat4\n */\nfunction fromValues(m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](16);\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n/**\n * Set the components of a mat4 to the given values\n *\n * @param {mat4} out the receiving matrix\n * @param {Number} m00 Component in column 0, row 0 position (index 0)\n * @param {Number} m01 Component in column 0, row 1 position (index 1)\n * @param {Number} m02 Component in column 0, row 2 position (index 2)\n * @param {Number} m03 Component in column 0, row 3 position (index 3)\n * @param {Number} m10 Component in column 1, row 0 position (index 4)\n * @param {Number} m11 Component in column 1, row 1 position (index 5)\n * @param {Number} m12 Component in column 1, row 2 position (index 6)\n * @param {Number} m13 Component in column 1, row 3 position (index 7)\n * @param {Number} m20 Component in column 2, row 0 position (index 8)\n * @param {Number} m21 Component in column 2, row 1 position (index 9)\n * @param {Number} m22 Component in column 2, row 2 position (index 10)\n * @param {Number} m23 Component in column 2, row 3 position (index 11)\n * @param {Number} m30 Component in column 3, row 0 position (index 12)\n * @param {Number} m31 Component in column 3, row 1 position (index 13)\n * @param {Number} m32 Component in column 3, row 2 position (index 14)\n * @param {Number} m33 Component in column 3, row 3 position (index 15)\n * @returns {mat4} out\n */\nfunction set(out, m00, m01, m02, m03, m10, m11, m12, m13, m20, m21, m22, m23, m30, m31, m32, m33) {\n  out[0] = m00;\n  out[1] = m01;\n  out[2] = m02;\n  out[3] = m03;\n  out[4] = m10;\n  out[5] = m11;\n  out[6] = m12;\n  out[7] = m13;\n  out[8] = m20;\n  out[9] = m21;\n  out[10] = m22;\n  out[11] = m23;\n  out[12] = m30;\n  out[13] = m31;\n  out[14] = m32;\n  out[15] = m33;\n  return out;\n}\n\n\n/**\n * Set a mat4 to the identity matrix\n *\n * @param {mat4} out the receiving matrix\n * @returns {mat4} out\n */\nfunction identity(out) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Transpose the values of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction transpose(out, a) {\n  // If we are transposing ourselves we can skip a few steps but have to cache some values\n  if (out === a) {\n    var a01 = a[1], a02 = a[2], a03 = a[3];\n    var a12 = a[6], a13 = a[7];\n    var a23 = a[11];\n\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a01;\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a02;\n    out[9] = a12;\n    out[11] = a[14];\n    out[12] = a03;\n    out[13] = a13;\n    out[14] = a23;\n  } else {\n    out[0] = a[0];\n    out[1] = a[4];\n    out[2] = a[8];\n    out[3] = a[12];\n    out[4] = a[1];\n    out[5] = a[5];\n    out[6] = a[9];\n    out[7] = a[13];\n    out[8] = a[2];\n    out[9] = a[6];\n    out[10] = a[10];\n    out[11] = a[14];\n    out[12] = a[3];\n    out[13] = a[7];\n    out[14] = a[11];\n    out[15] = a[15];\n  }\n\n  return out;\n}\n\n/**\n * Inverts a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction invert(out, a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  var det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n  if (!det) {\n    return null;\n  }\n  det = 1.0 / det;\n\n  out[0] = (a11 * b11 - a12 * b10 + a13 * b09) * det;\n  out[1] = (a02 * b10 - a01 * b11 - a03 * b09) * det;\n  out[2] = (a31 * b05 - a32 * b04 + a33 * b03) * det;\n  out[3] = (a22 * b04 - a21 * b05 - a23 * b03) * det;\n  out[4] = (a12 * b08 - a10 * b11 - a13 * b07) * det;\n  out[5] = (a00 * b11 - a02 * b08 + a03 * b07) * det;\n  out[6] = (a32 * b02 - a30 * b05 - a33 * b01) * det;\n  out[7] = (a20 * b05 - a22 * b02 + a23 * b01) * det;\n  out[8] = (a10 * b10 - a11 * b08 + a13 * b06) * det;\n  out[9] = (a01 * b08 - a00 * b10 - a03 * b06) * det;\n  out[10] = (a30 * b04 - a31 * b02 + a33 * b00) * det;\n  out[11] = (a21 * b02 - a20 * b04 - a23 * b00) * det;\n  out[12] = (a11 * b07 - a10 * b09 - a12 * b06) * det;\n  out[13] = (a00 * b09 - a01 * b07 + a02 * b06) * det;\n  out[14] = (a31 * b01 - a30 * b03 - a32 * b00) * det;\n  out[15] = (a20 * b03 - a21 * b01 + a22 * b00) * det;\n\n  return out;\n}\n\n/**\n * Calculates the adjugate of a mat4\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the source matrix\n * @returns {mat4} out\n */\nfunction adjoint(out, a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  out[0]  =  (a11 * (a22 * a33 - a23 * a32) - a21 * (a12 * a33 - a13 * a32) + a31 * (a12 * a23 - a13 * a22));\n  out[1]  = -(a01 * (a22 * a33 - a23 * a32) - a21 * (a02 * a33 - a03 * a32) + a31 * (a02 * a23 - a03 * a22));\n  out[2]  =  (a01 * (a12 * a33 - a13 * a32) - a11 * (a02 * a33 - a03 * a32) + a31 * (a02 * a13 - a03 * a12));\n  out[3]  = -(a01 * (a12 * a23 - a13 * a22) - a11 * (a02 * a23 - a03 * a22) + a21 * (a02 * a13 - a03 * a12));\n  out[4]  = -(a10 * (a22 * a33 - a23 * a32) - a20 * (a12 * a33 - a13 * a32) + a30 * (a12 * a23 - a13 * a22));\n  out[5]  =  (a00 * (a22 * a33 - a23 * a32) - a20 * (a02 * a33 - a03 * a32) + a30 * (a02 * a23 - a03 * a22));\n  out[6]  = -(a00 * (a12 * a33 - a13 * a32) - a10 * (a02 * a33 - a03 * a32) + a30 * (a02 * a13 - a03 * a12));\n  out[7]  =  (a00 * (a12 * a23 - a13 * a22) - a10 * (a02 * a23 - a03 * a22) + a20 * (a02 * a13 - a03 * a12));\n  out[8]  =  (a10 * (a21 * a33 - a23 * a31) - a20 * (a11 * a33 - a13 * a31) + a30 * (a11 * a23 - a13 * a21));\n  out[9]  = -(a00 * (a21 * a33 - a23 * a31) - a20 * (a01 * a33 - a03 * a31) + a30 * (a01 * a23 - a03 * a21));\n  out[10] =  (a00 * (a11 * a33 - a13 * a31) - a10 * (a01 * a33 - a03 * a31) + a30 * (a01 * a13 - a03 * a11));\n  out[11] = -(a00 * (a11 * a23 - a13 * a21) - a10 * (a01 * a23 - a03 * a21) + a20 * (a01 * a13 - a03 * a11));\n  out[12] = -(a10 * (a21 * a32 - a22 * a31) - a20 * (a11 * a32 - a12 * a31) + a30 * (a11 * a22 - a12 * a21));\n  out[13] =  (a00 * (a21 * a32 - a22 * a31) - a20 * (a01 * a32 - a02 * a31) + a30 * (a01 * a22 - a02 * a21));\n  out[14] = -(a00 * (a11 * a32 - a12 * a31) - a10 * (a01 * a32 - a02 * a31) + a30 * (a01 * a12 - a02 * a11));\n  out[15] =  (a00 * (a11 * a22 - a12 * a21) - a10 * (a01 * a22 - a02 * a21) + a20 * (a01 * a12 - a02 * a11));\n  return out;\n}\n\n/**\n * Calculates the determinant of a mat4\n *\n * @param {mat4} a the source matrix\n * @returns {Number} determinant of a\n */\nfunction determinant(a) {\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  var b00 = a00 * a11 - a01 * a10;\n  var b01 = a00 * a12 - a02 * a10;\n  var b02 = a00 * a13 - a03 * a10;\n  var b03 = a01 * a12 - a02 * a11;\n  var b04 = a01 * a13 - a03 * a11;\n  var b05 = a02 * a13 - a03 * a12;\n  var b06 = a20 * a31 - a21 * a30;\n  var b07 = a20 * a32 - a22 * a30;\n  var b08 = a20 * a33 - a23 * a30;\n  var b09 = a21 * a32 - a22 * a31;\n  var b10 = a21 * a33 - a23 * a31;\n  var b11 = a22 * a33 - a23 * a32;\n\n  // Calculate the determinant\n  return b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n}\n\n/**\n * Multiplies two mat4s\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction multiply(out, a, b) {\n  var a00 = a[0], a01 = a[1], a02 = a[2], a03 = a[3];\n  var a10 = a[4], a11 = a[5], a12 = a[6], a13 = a[7];\n  var a20 = a[8], a21 = a[9], a22 = a[10], a23 = a[11];\n  var a30 = a[12], a31 = a[13], a32 = a[14], a33 = a[15];\n\n  // Cache only the current line of the second matrix\n  var b0  = b[0], b1 = b[1], b2 = b[2], b3 = b[3];\n  out[0] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[1] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[2] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[3] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[4]; b1 = b[5]; b2 = b[6]; b3 = b[7];\n  out[4] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[5] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[6] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[7] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[8]; b1 = b[9]; b2 = b[10]; b3 = b[11];\n  out[8] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[9] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[10] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[11] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n\n  b0 = b[12]; b1 = b[13]; b2 = b[14]; b3 = b[15];\n  out[12] = b0*a00 + b1*a10 + b2*a20 + b3*a30;\n  out[13] = b0*a01 + b1*a11 + b2*a21 + b3*a31;\n  out[14] = b0*a02 + b1*a12 + b2*a22 + b3*a32;\n  out[15] = b0*a03 + b1*a13 + b2*a23 + b3*a33;\n  return out;\n}\n\n/**\n * Translate a mat4 by the given vector\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to translate\n * @param {vec3} v vector to translate by\n * @returns {mat4} out\n */\nfunction translate(out, a, v) {\n  var x = v[0], y = v[1], z = v[2];\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n\n  if (a === out) {\n    out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];\n    out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];\n    out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];\n    out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];\n  } else {\n    a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n    a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n    a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n    out[0] = a00; out[1] = a01; out[2] = a02; out[3] = a03;\n    out[4] = a10; out[5] = a11; out[6] = a12; out[7] = a13;\n    out[8] = a20; out[9] = a21; out[10] = a22; out[11] = a23;\n\n    out[12] = a00 * x + a10 * y + a20 * z + a[12];\n    out[13] = a01 * x + a11 * y + a21 * z + a[13];\n    out[14] = a02 * x + a12 * y + a22 * z + a[14];\n    out[15] = a03 * x + a13 * y + a23 * z + a[15];\n  }\n\n  return out;\n}\n\n/**\n * Scales the mat4 by the dimensions in the given vec3 not using vectorization\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {vec3} v the vec3 to scale the matrix by\n * @returns {mat4} out\n **/\nfunction scale(out, a, v) {\n  var x = v[0], y = v[1], z = v[2];\n\n  out[0] = a[0] * x;\n  out[1] = a[1] * x;\n  out[2] = a[2] * x;\n  out[3] = a[3] * x;\n  out[4] = a[4] * y;\n  out[5] = a[5] * y;\n  out[6] = a[6] * y;\n  out[7] = a[7] * y;\n  out[8] = a[8] * z;\n  out[9] = a[9] * z;\n  out[10] = a[10] * z;\n  out[11] = a[11] * z;\n  out[12] = a[12];\n  out[13] = a[13];\n  out[14] = a[14];\n  out[15] = a[15];\n  return out;\n}\n\n/**\n * Rotates a mat4 by the given angle around the given axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction rotate(out, a, rad, axis) {\n  var x = axis[0], y = axis[1], z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n  var a00, a01, a02, a03;\n  var a10, a11, a12, a13;\n  var a20, a21, a22, a23;\n  var b00, b01, b02;\n  var b10, b11, b12;\n  var b20, b21, b22;\n\n  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  a00 = a[0]; a01 = a[1]; a02 = a[2]; a03 = a[3];\n  a10 = a[4]; a11 = a[5]; a12 = a[6]; a13 = a[7];\n  a20 = a[8]; a21 = a[9]; a22 = a[10]; a23 = a[11];\n\n  // Construct the elements of the rotation matrix\n  b00 = x * x * t + c; b01 = y * x * t + z * s; b02 = z * x * t - y * s;\n  b10 = x * y * t - z * s; b11 = y * y * t + c; b12 = z * y * t + x * s;\n  b20 = x * z * t + y * s; b21 = y * z * t - x * s; b22 = z * z * t + c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = a00 * b00 + a10 * b01 + a20 * b02;\n  out[1] = a01 * b00 + a11 * b01 + a21 * b02;\n  out[2] = a02 * b00 + a12 * b01 + a22 * b02;\n  out[3] = a03 * b00 + a13 * b01 + a23 * b02;\n  out[4] = a00 * b10 + a10 * b11 + a20 * b12;\n  out[5] = a01 * b10 + a11 * b11 + a21 * b12;\n  out[6] = a02 * b10 + a12 * b11 + a22 * b12;\n  out[7] = a03 * b10 + a13 * b11 + a23 * b12;\n  out[8] = a00 * b20 + a10 * b21 + a20 * b22;\n  out[9] = a01 * b20 + a11 * b21 + a21 * b22;\n  out[10] = a02 * b20 + a12 * b21 + a22 * b22;\n  out[11] = a03 * b20 + a13 * b21 + a23 * b22;\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the X axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateX(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[0]  = a[0];\n    out[1]  = a[1];\n    out[2]  = a[2];\n    out[3]  = a[3];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[4] = a10 * c + a20 * s;\n  out[5] = a11 * c + a21 * s;\n  out[6] = a12 * c + a22 * s;\n  out[7] = a13 * c + a23 * s;\n  out[8] = a20 * c - a10 * s;\n  out[9] = a21 * c - a11 * s;\n  out[10] = a22 * c - a12 * s;\n  out[11] = a23 * c - a13 * s;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Y axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateY(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a20 = a[8];\n  var a21 = a[9];\n  var a22 = a[10];\n  var a23 = a[11];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged rows\n    out[4]  = a[4];\n    out[5]  = a[5];\n    out[6]  = a[6];\n    out[7]  = a[7];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c - a20 * s;\n  out[1] = a01 * c - a21 * s;\n  out[2] = a02 * c - a22 * s;\n  out[3] = a03 * c - a23 * s;\n  out[8] = a00 * s + a20 * c;\n  out[9] = a01 * s + a21 * c;\n  out[10] = a02 * s + a22 * c;\n  out[11] = a03 * s + a23 * c;\n  return out;\n}\n\n/**\n * Rotates a matrix by the given angle around the Z axis\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to rotate\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction rotateZ(out, a, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n  var a00 = a[0];\n  var a01 = a[1];\n  var a02 = a[2];\n  var a03 = a[3];\n  var a10 = a[4];\n  var a11 = a[5];\n  var a12 = a[6];\n  var a13 = a[7];\n\n  if (a !== out) { // If the source and destination differ, copy the unchanged last row\n    out[8]  = a[8];\n    out[9]  = a[9];\n    out[10] = a[10];\n    out[11] = a[11];\n    out[12] = a[12];\n    out[13] = a[13];\n    out[14] = a[14];\n    out[15] = a[15];\n  }\n\n  // Perform axis-specific matrix multiplication\n  out[0] = a00 * c + a10 * s;\n  out[1] = a01 * c + a11 * s;\n  out[2] = a02 * c + a12 * s;\n  out[3] = a03 * c + a13 * s;\n  out[4] = a10 * c - a00 * s;\n  out[5] = a11 * c - a01 * s;\n  out[6] = a12 * c - a02 * s;\n  out[7] = a13 * c - a03 * s;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nfunction fromTranslation(out, v) {\n  out[0] = 1;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a vector scaling\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.scale(dest, dest, vec);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {vec3} v Scaling vector\n * @returns {mat4} out\n */\nfunction fromScaling(out, v) {\n  out[0] = v[0];\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = v[1];\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = v[2];\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a given angle around a given axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotate(dest, dest, rad, axis);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @param {vec3} axis the axis to rotate around\n * @returns {mat4} out\n */\nfunction fromRotation(out, rad, axis) {\n  var x = axis[0], y = axis[1], z = axis[2];\n  var len = Math.sqrt(x * x + y * y + z * z);\n  var s, c, t;\n\n  if (Math.abs(len) < __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]) { return null; }\n\n  len = 1 / len;\n  x *= len;\n  y *= len;\n  z *= len;\n\n  s = Math.sin(rad);\n  c = Math.cos(rad);\n  t = 1 - c;\n\n  // Perform rotation-specific matrix multiplication\n  out[0] = x * x * t + c;\n  out[1] = y * x * t + z * s;\n  out[2] = z * x * t - y * s;\n  out[3] = 0;\n  out[4] = x * y * t - z * s;\n  out[5] = y * y * t + c;\n  out[6] = z * y * t + x * s;\n  out[7] = 0;\n  out[8] = x * z * t + y * s;\n  out[9] = y * z * t - x * s;\n  out[10] = z * z * t + c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the X axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateX(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction fromXRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = 1;\n  out[1]  = 0;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = c;\n  out[6] = s;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = -s;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Y axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateY(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction fromYRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = 0;\n  out[2]  = -s;\n  out[3]  = 0;\n  out[4] = 0;\n  out[5] = 1;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = s;\n  out[9] = 0;\n  out[10] = c;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from the given angle around the Z axis\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.rotateZ(dest, dest, rad);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {Number} rad the angle to rotate the matrix by\n * @returns {mat4} out\n */\nfunction fromZRotation(out, rad) {\n  var s = Math.sin(rad);\n  var c = Math.cos(rad);\n\n  // Perform axis-specific matrix multiplication\n  out[0]  = c;\n  out[1]  = s;\n  out[2]  = 0;\n  out[3]  = 0;\n  out[4] = -s;\n  out[5] = c;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 1;\n  out[11] = 0;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation and vector translation\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @returns {mat4} out\n */\nfunction fromRotationTranslation(out, q, v) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n\n  out[0] = 1 - (yy + zz);\n  out[1] = xy + wz;\n  out[2] = xz - wy;\n  out[3] = 0;\n  out[4] = xy - wz;\n  out[5] = 1 - (xx + zz);\n  out[6] = yz + wx;\n  out[7] = 0;\n  out[8] = xz + wy;\n  out[9] = yz - wx;\n  out[10] = 1 - (xx + yy);\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Returns the translation vector component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslation,\n *  the returned vector will be the same as the translation vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive translation component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nfunction getTranslation(out, mat) {\n  out[0] = mat[12];\n  out[1] = mat[13];\n  out[2] = mat[14];\n\n  return out;\n}\n\n/**\n * Returns the scaling factor component of a transformation\n *  matrix. If a matrix is built with fromRotationTranslationScale\n *  with a normalized Quaternion paramter, the returned vector will be\n *  the same as the scaling vector\n *  originally supplied.\n * @param  {vec3} out Vector to receive scaling factor component\n * @param  {mat4} mat Matrix to be decomposed (input)\n * @return {vec3} out\n */\nfunction getScaling(out, mat) {\n  var m11 = mat[0];\n  var m12 = mat[1];\n  var m13 = mat[2];\n  var m21 = mat[4];\n  var m22 = mat[5];\n  var m23 = mat[6];\n  var m31 = mat[8];\n  var m32 = mat[9];\n  var m33 = mat[10];\n\n  out[0] = Math.sqrt(m11 * m11 + m12 * m12 + m13 * m13);\n  out[1] = Math.sqrt(m21 * m21 + m22 * m22 + m23 * m23);\n  out[2] = Math.sqrt(m31 * m31 + m32 * m32 + m33 * m33);\n\n  return out;\n}\n\n/**\n * Returns a quaternion representing the rotational component\n *  of a transformation matrix. If a matrix is built with\n *  fromRotationTranslation, the returned quaternion will be the\n *  same as the quaternion originally supplied.\n * @param {quat} out Quaternion to receive the rotation component\n * @param {mat4} mat Matrix to be decomposed (input)\n * @return {quat} out\n */\nfunction getRotation(out, mat) {\n  // Algorithm taken from http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm\n  var trace = mat[0] + mat[5] + mat[10];\n  var S = 0;\n\n  if (trace > 0) {\n    S = Math.sqrt(trace + 1.0) * 2;\n    out[3] = 0.25 * S;\n    out[0] = (mat[6] - mat[9]) / S;\n    out[1] = (mat[8] - mat[2]) / S;\n    out[2] = (mat[1] - mat[4]) / S;\n  } else if ((mat[0] > mat[5])&(mat[0] > mat[10])) {\n    S = Math.sqrt(1.0 + mat[0] - mat[5] - mat[10]) * 2;\n    out[3] = (mat[6] - mat[9]) / S;\n    out[0] = 0.25 * S;\n    out[1] = (mat[1] + mat[4]) / S;\n    out[2] = (mat[8] + mat[2]) / S;\n  } else if (mat[5] > mat[10]) {\n    S = Math.sqrt(1.0 + mat[5] - mat[0] - mat[10]) * 2;\n    out[3] = (mat[8] - mat[2]) / S;\n    out[0] = (mat[1] + mat[4]) / S;\n    out[1] = 0.25 * S;\n    out[2] = (mat[6] + mat[9]) / S;\n  } else {\n    S = Math.sqrt(1.0 + mat[10] - mat[0] - mat[5]) * 2;\n    out[3] = (mat[1] - mat[4]) / S;\n    out[0] = (mat[8] + mat[2]) / S;\n    out[1] = (mat[6] + mat[9]) / S;\n    out[2] = 0.25 * S;\n  }\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @returns {mat4} out\n */\nfunction fromRotationTranslationScale(out, q, v, s) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0];\n  out[13] = v[1];\n  out[14] = v[2];\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Creates a matrix from a quaternion rotation, vector translation and vector scale, rotating and scaling around the given origin\n * This is equivalent to (but much faster than):\n *\n *     mat4.identity(dest);\n *     mat4.translate(dest, vec);\n *     mat4.translate(dest, origin);\n *     let quatMat = mat4.create();\n *     quat4.toMat4(quat, quatMat);\n *     mat4.multiply(dest, quatMat);\n *     mat4.scale(dest, scale)\n *     mat4.translate(dest, negativeOrigin);\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat4} q Rotation quaternion\n * @param {vec3} v Translation vector\n * @param {vec3} s Scaling vector\n * @param {vec3} o The origin vector around which to scale and rotate\n * @returns {mat4} out\n */\nfunction fromRotationTranslationScaleOrigin(out, q, v, s, o) {\n  // Quaternion math\n  var x = q[0], y = q[1], z = q[2], w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var xy = x * y2;\n  var xz = x * z2;\n  var yy = y * y2;\n  var yz = y * z2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n\n  var sx = s[0];\n  var sy = s[1];\n  var sz = s[2];\n\n  var ox = o[0];\n  var oy = o[1];\n  var oz = o[2];\n\n  out[0] = (1 - (yy + zz)) * sx;\n  out[1] = (xy + wz) * sx;\n  out[2] = (xz - wy) * sx;\n  out[3] = 0;\n  out[4] = (xy - wz) * sy;\n  out[5] = (1 - (xx + zz)) * sy;\n  out[6] = (yz + wx) * sy;\n  out[7] = 0;\n  out[8] = (xz + wy) * sz;\n  out[9] = (yz - wx) * sz;\n  out[10] = (1 - (xx + yy)) * sz;\n  out[11] = 0;\n  out[12] = v[0] + ox - (out[0] * ox + out[4] * oy + out[8] * oz);\n  out[13] = v[1] + oy - (out[1] * ox + out[5] * oy + out[9] * oz);\n  out[14] = v[2] + oz - (out[2] * ox + out[6] * oy + out[10] * oz);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Calculates a 4x4 matrix from the given quaternion\n *\n * @param {mat4} out mat4 receiving operation result\n * @param {quat} q Quaternion to create matrix from\n *\n * @returns {mat4} out\n */\nfunction fromQuat(out, q) {\n  var x = q[0], y = q[1], z = q[2], w = q[3];\n  var x2 = x + x;\n  var y2 = y + y;\n  var z2 = z + z;\n\n  var xx = x * x2;\n  var yx = y * x2;\n  var yy = y * y2;\n  var zx = z * x2;\n  var zy = z * y2;\n  var zz = z * z2;\n  var wx = w * x2;\n  var wy = w * y2;\n  var wz = w * z2;\n\n  out[0] = 1 - yy - zz;\n  out[1] = yx + wz;\n  out[2] = zx - wy;\n  out[3] = 0;\n\n  out[4] = yx - wz;\n  out[5] = 1 - xx - zz;\n  out[6] = zy + wx;\n  out[7] = 0;\n\n  out[8] = zx + wy;\n  out[9] = zy - wx;\n  out[10] = 1 - xx - yy;\n  out[11] = 0;\n\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = 0;\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a frustum matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Number} left Left bound of the frustum\n * @param {Number} right Right bound of the frustum\n * @param {Number} bottom Bottom bound of the frustum\n * @param {Number} top Top bound of the frustum\n * @param {Number} near Near bound of the frustum\n * @param {Number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction frustum(out, left, right, bottom, top, near, far) {\n  var rl = 1 / (right - left);\n  var tb = 1 / (top - bottom);\n  var nf = 1 / (near - far);\n  out[0] = (near * 2) * rl;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = (near * 2) * tb;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = (right + left) * rl;\n  out[9] = (top + bottom) * tb;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (far * near * 2) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} fovy Vertical field of view in radians\n * @param {number} aspect Aspect ratio. typically viewport width/height\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspective(out, fovy, aspect, near, far) {\n  var f = 1.0 / Math.tan(fovy / 2);\n  var nf = 1 / (near - far);\n  out[0] = f / aspect;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = f;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = (far + near) * nf;\n  out[11] = -1;\n  out[12] = 0;\n  out[13] = 0;\n  out[14] = (2 * far * near) * nf;\n  out[15] = 0;\n  return out;\n}\n\n/**\n * Generates a perspective projection matrix with the given field of view.\n * This is primarily useful for generating projection matrices to be used\n * with the still experiemental WebVR API.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {Object} fov Object containing the following values: upDegrees, downDegrees, leftDegrees, rightDegrees\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction perspectiveFromFieldOfView(out, fov, near, far) {\n  var upTan = Math.tan(fov.upDegrees * Math.PI/180.0);\n  var downTan = Math.tan(fov.downDegrees * Math.PI/180.0);\n  var leftTan = Math.tan(fov.leftDegrees * Math.PI/180.0);\n  var rightTan = Math.tan(fov.rightDegrees * Math.PI/180.0);\n  var xScale = 2.0 / (leftTan + rightTan);\n  var yScale = 2.0 / (upTan + downTan);\n\n  out[0] = xScale;\n  out[1] = 0.0;\n  out[2] = 0.0;\n  out[3] = 0.0;\n  out[4] = 0.0;\n  out[5] = yScale;\n  out[6] = 0.0;\n  out[7] = 0.0;\n  out[8] = -((leftTan - rightTan) * xScale * 0.5);\n  out[9] = ((upTan - downTan) * yScale * 0.5);\n  out[10] = far / (near - far);\n  out[11] = -1.0;\n  out[12] = 0.0;\n  out[13] = 0.0;\n  out[14] = (far * near) / (near - far);\n  out[15] = 0.0;\n  return out;\n}\n\n/**\n * Generates a orthogonal projection matrix with the given bounds\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {number} left Left bound of the frustum\n * @param {number} right Right bound of the frustum\n * @param {number} bottom Bottom bound of the frustum\n * @param {number} top Top bound of the frustum\n * @param {number} near Near bound of the frustum\n * @param {number} far Far bound of the frustum\n * @returns {mat4} out\n */\nfunction ortho(out, left, right, bottom, top, near, far) {\n  var lr = 1 / (left - right);\n  var bt = 1 / (bottom - top);\n  var nf = 1 / (near - far);\n  out[0] = -2 * lr;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 0;\n  out[4] = 0;\n  out[5] = -2 * bt;\n  out[6] = 0;\n  out[7] = 0;\n  out[8] = 0;\n  out[9] = 0;\n  out[10] = 2 * nf;\n  out[11] = 0;\n  out[12] = (left + right) * lr;\n  out[13] = (top + bottom) * bt;\n  out[14] = (far + near) * nf;\n  out[15] = 1;\n  return out;\n}\n\n/**\n * Generates a look-at matrix with the given eye position, focal point, and up axis\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction lookAt(out, eye, center, up) {\n  var x0, x1, x2, y0, y1, y2, z0, z1, z2, len;\n  var eyex = eye[0];\n  var eyey = eye[1];\n  var eyez = eye[2];\n  var upx = up[0];\n  var upy = up[1];\n  var upz = up[2];\n  var centerx = center[0];\n  var centery = center[1];\n  var centerz = center[2];\n\n  if (Math.abs(eyex - centerx) < __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"] &&\n      Math.abs(eyey - centery) < __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"] &&\n      Math.abs(eyez - centerz) < __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]) {\n    return mat4.identity(out);\n  }\n\n  z0 = eyex - centerx;\n  z1 = eyey - centery;\n  z2 = eyez - centerz;\n\n  len = 1 / Math.sqrt(z0 * z0 + z1 * z1 + z2 * z2);\n  z0 *= len;\n  z1 *= len;\n  z2 *= len;\n\n  x0 = upy * z2 - upz * z1;\n  x1 = upz * z0 - upx * z2;\n  x2 = upx * z1 - upy * z0;\n  len = Math.sqrt(x0 * x0 + x1 * x1 + x2 * x2);\n  if (!len) {\n    x0 = 0;\n    x1 = 0;\n    x2 = 0;\n  } else {\n    len = 1 / len;\n    x0 *= len;\n    x1 *= len;\n    x2 *= len;\n  }\n\n  y0 = z1 * x2 - z2 * x1;\n  y1 = z2 * x0 - z0 * x2;\n  y2 = z0 * x1 - z1 * x0;\n\n  len = Math.sqrt(y0 * y0 + y1 * y1 + y2 * y2);\n  if (!len) {\n    y0 = 0;\n    y1 = 0;\n    y2 = 0;\n  } else {\n    len = 1 / len;\n    y0 *= len;\n    y1 *= len;\n    y2 *= len;\n  }\n\n  out[0] = x0;\n  out[1] = y0;\n  out[2] = z0;\n  out[3] = 0;\n  out[4] = x1;\n  out[5] = y1;\n  out[6] = z1;\n  out[7] = 0;\n  out[8] = x2;\n  out[9] = y2;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = -(x0 * eyex + x1 * eyey + x2 * eyez);\n  out[13] = -(y0 * eyex + y1 * eyey + y2 * eyez);\n  out[14] = -(z0 * eyex + z1 * eyey + z2 * eyez);\n  out[15] = 1;\n\n  return out;\n}\n\n/**\n * Generates a matrix that makes something look at something else.\n *\n * @param {mat4} out mat4 frustum matrix will be written into\n * @param {vec3} eye Position of the viewer\n * @param {vec3} center Point the viewer is looking at\n * @param {vec3} up vec3 pointing up\n * @returns {mat4} out\n */\nfunction targetTo(out, eye, target, up) {\n  var eyex = eye[0],\n      eyey = eye[1],\n      eyez = eye[2],\n      upx = up[0],\n      upy = up[1],\n      upz = up[2];\n\n  var z0 = eyex - target[0],\n      z1 = eyey - target[1],\n      z2 = eyez - target[2];\n\n  var len = z0*z0 + z1*z1 + z2*z2;\n  if (len > 0) {\n    len = 1 / Math.sqrt(len);\n    z0 *= len;\n    z1 *= len;\n    z2 *= len;\n  }\n\n  var x0 = upy * z2 - upz * z1,\n      x1 = upz * z0 - upx * z2,\n      x2 = upx * z1 - upy * z0;\n\n  out[0] = x0;\n  out[1] = x1;\n  out[2] = x2;\n  out[3] = 0;\n  out[4] = z1 * x2 - z2 * x1;\n  out[5] = z2 * x0 - z0 * x2;\n  out[6] = z0 * x1 - z1 * x0;\n  out[7] = 0;\n  out[8] = z0;\n  out[9] = z1;\n  out[10] = z2;\n  out[11] = 0;\n  out[12] = eyex;\n  out[13] = eyey;\n  out[14] = eyez;\n  out[15] = 1;\n  return out;\n};\n\n/**\n * Returns a string representation of a mat4\n *\n * @param {mat4} a matrix to represent as a string\n * @returns {String} string representation of the matrix\n */\nfunction str(a) {\n  return 'mat4(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ', ' +\n          a[4] + ', ' + a[5] + ', ' + a[6] + ', ' + a[7] + ', ' +\n          a[8] + ', ' + a[9] + ', ' + a[10] + ', ' + a[11] + ', ' +\n          a[12] + ', ' + a[13] + ', ' + a[14] + ', ' + a[15] + ')';\n}\n\n/**\n * Returns Frobenius norm of a mat4\n *\n * @param {mat4} a the matrix to calculate Frobenius norm of\n * @returns {Number} Frobenius norm\n */\nfunction frob(a) {\n  return(Math.sqrt(Math.pow(a[0], 2) + Math.pow(a[1], 2) + Math.pow(a[2], 2) + Math.pow(a[3], 2) + Math.pow(a[4], 2) + Math.pow(a[5], 2) + Math.pow(a[6], 2) + Math.pow(a[7], 2) + Math.pow(a[8], 2) + Math.pow(a[9], 2) + Math.pow(a[10], 2) + Math.pow(a[11], 2) + Math.pow(a[12], 2) + Math.pow(a[13], 2) + Math.pow(a[14], 2) + Math.pow(a[15], 2) ))\n}\n\n/**\n * Adds two mat4's\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  out[2] = a[2] + b[2];\n  out[3] = a[3] + b[3];\n  out[4] = a[4] + b[4];\n  out[5] = a[5] + b[5];\n  out[6] = a[6] + b[6];\n  out[7] = a[7] + b[7];\n  out[8] = a[8] + b[8];\n  out[9] = a[9] + b[9];\n  out[10] = a[10] + b[10];\n  out[11] = a[11] + b[11];\n  out[12] = a[12] + b[12];\n  out[13] = a[13] + b[13];\n  out[14] = a[14] + b[14];\n  out[15] = a[15] + b[15];\n  return out;\n}\n\n/**\n * Subtracts matrix b from matrix a\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @returns {mat4} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  out[2] = a[2] - b[2];\n  out[3] = a[3] - b[3];\n  out[4] = a[4] - b[4];\n  out[5] = a[5] - b[5];\n  out[6] = a[6] - b[6];\n  out[7] = a[7] - b[7];\n  out[8] = a[8] - b[8];\n  out[9] = a[9] - b[9];\n  out[10] = a[10] - b[10];\n  out[11] = a[11] - b[11];\n  out[12] = a[12] - b[12];\n  out[13] = a[13] - b[13];\n  out[14] = a[14] - b[14];\n  out[15] = a[15] - b[15];\n  return out;\n}\n\n/**\n * Multiply each element of the matrix by a scalar.\n *\n * @param {mat4} out the receiving matrix\n * @param {mat4} a the matrix to scale\n * @param {Number} b amount to scale the matrix's elements by\n * @returns {mat4} out\n */\nfunction multiplyScalar(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  out[2] = a[2] * b;\n  out[3] = a[3] * b;\n  out[4] = a[4] * b;\n  out[5] = a[5] * b;\n  out[6] = a[6] * b;\n  out[7] = a[7] * b;\n  out[8] = a[8] * b;\n  out[9] = a[9] * b;\n  out[10] = a[10] * b;\n  out[11] = a[11] * b;\n  out[12] = a[12] * b;\n  out[13] = a[13] * b;\n  out[14] = a[14] * b;\n  out[15] = a[15] * b;\n  return out;\n}\n\n/**\n * Adds two mat4's after multiplying each element of the second operand by a scalar value.\n *\n * @param {mat4} out the receiving vector\n * @param {mat4} a the first operand\n * @param {mat4} b the second operand\n * @param {Number} scale the amount to scale b's elements by before adding\n * @returns {mat4} out\n */\nfunction multiplyScalarAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  out[2] = a[2] + (b[2] * scale);\n  out[3] = a[3] + (b[3] * scale);\n  out[4] = a[4] + (b[4] * scale);\n  out[5] = a[5] + (b[5] * scale);\n  out[6] = a[6] + (b[6] * scale);\n  out[7] = a[7] + (b[7] * scale);\n  out[8] = a[8] + (b[8] * scale);\n  out[9] = a[9] + (b[9] * scale);\n  out[10] = a[10] + (b[10] * scale);\n  out[11] = a[11] + (b[11] * scale);\n  out[12] = a[12] + (b[12] * scale);\n  out[13] = a[13] + (b[13] * scale);\n  out[14] = a[14] + (b[14] * scale);\n  out[15] = a[15] + (b[15] * scale);\n  return out;\n}\n\n/**\n * Returns whether or not the matrices have exactly the same elements in the same position (when compared with ===)\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1] && a[2] === b[2] && a[3] === b[3] &&\n         a[4] === b[4] && a[5] === b[5] && a[6] === b[6] && a[7] === b[7] &&\n         a[8] === b[8] && a[9] === b[9] && a[10] === b[10] && a[11] === b[11] &&\n         a[12] === b[12] && a[13] === b[13] && a[14] === b[14] && a[15] === b[15];\n}\n\n/**\n * Returns whether or not the matrices have approximately the same elements in the same position.\n *\n * @param {mat4} a The first matrix.\n * @param {mat4} b The second matrix.\n * @returns {Boolean} True if the matrices are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0  = a[0],  a1  = a[1],  a2  = a[2],  a3  = a[3];\n  var a4  = a[4],  a5  = a[5],  a6  = a[6],  a7  = a[7];\n  var a8  = a[8],  a9  = a[9],  a10 = a[10], a11 = a[11];\n  var a12 = a[12], a13 = a[13], a14 = a[14], a15 = a[15];\n\n  var b0  = b[0],  b1  = b[1],  b2  = b[2],  b3  = b[3];\n  var b4  = b[4],  b5  = b[5],  b6  = b[6],  b7  = b[7];\n  var b8  = b[8],  b9  = b[9],  b10 = b[10], b11 = b[11];\n  var b12 = b[12], b13 = b[13], b14 = b[14], b15 = b[15];\n\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)) &&\n          Math.abs(a2 - b2) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a2), Math.abs(b2)) &&\n          Math.abs(a3 - b3) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a3), Math.abs(b3)) &&\n          Math.abs(a4 - b4) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a4), Math.abs(b4)) &&\n          Math.abs(a5 - b5) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a5), Math.abs(b5)) &&\n          Math.abs(a6 - b6) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a6), Math.abs(b6)) &&\n          Math.abs(a7 - b7) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a7), Math.abs(b7)) &&\n          Math.abs(a8 - b8) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a8), Math.abs(b8)) &&\n          Math.abs(a9 - b9) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a9), Math.abs(b9)) &&\n          Math.abs(a10 - b10) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a10), Math.abs(b10)) &&\n          Math.abs(a11 - b11) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a11), Math.abs(b11)) &&\n          Math.abs(a12 - b12) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a12), Math.abs(b12)) &&\n          Math.abs(a13 - b13) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a13), Math.abs(b13)) &&\n          Math.abs(a14 - b14) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a14), Math.abs(b14)) &&\n          Math.abs(a15 - b15) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a15), Math.abs(b15)));\n}\n\n/**\n * Alias for {@link mat4.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link mat4.subtract}\n * @function\n */\nvar sub = subtract;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/mat4.js\n// module id = 28\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/mat4.js?");

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"identity\"] = identity;\n/* harmony export (immutable) */ __webpack_exports__[\"setAxisAngle\"] = setAxisAngle;\n/* harmony export (immutable) */ __webpack_exports__[\"getAxisAngle\"] = getAxisAngle;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateX\"] = rotateX;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateY\"] = rotateY;\n/* harmony export (immutable) */ __webpack_exports__[\"rotateZ\"] = rotateZ;\n/* harmony export (immutable) */ __webpack_exports__[\"calculateW\"] = calculateW;\n/* harmony export (immutable) */ __webpack_exports__[\"slerp\"] = slerp;\n/* harmony export (immutable) */ __webpack_exports__[\"invert\"] = invert;\n/* harmony export (immutable) */ __webpack_exports__[\"conjugate\"] = conjugate;\n/* harmony export (immutable) */ __webpack_exports__[\"fromMat3\"] = fromMat3;\n/* harmony export (immutable) */ __webpack_exports__[\"fromEuler\"] = fromEuler;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"clone\", function() { return clone; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"fromValues\", function() { return fromValues; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"copy\", function() { return copy; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"set\", function() { return set; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"add\", function() { return add; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"scale\", function() { return scale; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dot\", function() { return dot; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"lerp\", function() { return lerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"length\", function() { return length; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"squaredLength\", function() { return squaredLength; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"normalize\", function() { return normalize; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"exactEquals\", function() { return exactEquals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"equals\", function() { return equals; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"rotationTo\", function() { return rotationTo; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqlerp\", function() { return sqlerp; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"setAxes\", function() { return setAxes; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__mat3__ = __webpack_require__(15);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__vec3__ = __webpack_require__(16);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__vec4__ = __webpack_require__(17);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n\n\n\n/**\n * Quaternion\n * @module quat\n */\n\n/**\n * Creates a new identity quat\n *\n * @returns {quat} a new quaternion\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](4);\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Set a quat to the identity quaternion\n *\n * @param {quat} out the receiving quaternion\n * @returns {quat} out\n */\nfunction identity(out) {\n  out[0] = 0;\n  out[1] = 0;\n  out[2] = 0;\n  out[3] = 1;\n  return out;\n}\n\n/**\n * Sets a quat from the given angle and rotation axis,\n * then returns it.\n *\n * @param {quat} out the receiving quaternion\n * @param {vec3} axis the axis around which to rotate\n * @param {Number} rad the angle in radians\n * @returns {quat} out\n **/\nfunction setAxisAngle(out, axis, rad) {\n  rad = rad * 0.5;\n  var s = Math.sin(rad);\n  out[0] = s * axis[0];\n  out[1] = s * axis[1];\n  out[2] = s * axis[2];\n  out[3] = Math.cos(rad);\n  return out;\n}\n\n/**\n * Gets the rotation axis and angle for a given\n *  quaternion. If a quaternion is created with\n *  setAxisAngle, this method will return the same\n *  values as providied in the original parameter list\n *  OR functionally equivalent values.\n * Example: The quaternion formed by axis [0, 0, 1] and\n *  angle -90 is the same as the quaternion formed by\n *  [0, 0, 1] and 270. This method favors the latter.\n * @param  {vec3} out_axis  Vector receiving the axis of rotation\n * @param  {quat} q     Quaternion to be decomposed\n * @return {Number}     Angle, in radians, of the rotation\n */\nfunction getAxisAngle(out_axis, q) {\n  var rad = Math.acos(q[3]) * 2.0;\n  var s = Math.sin(rad / 2.0);\n  if (s != 0.0) {\n    out_axis[0] = q[0] / s;\n    out_axis[1] = q[1] / s;\n    out_axis[2] = q[2] / s;\n  } else {\n    // If s is zero, return any axis (no rotation - axis does not matter)\n    out_axis[0] = 1;\n    out_axis[1] = 0;\n    out_axis[2] = 0;\n  }\n  return rad;\n}\n\n/**\n * Multiplies two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n */\nfunction multiply(out, a, b) {\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  var bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  out[0] = ax * bw + aw * bx + ay * bz - az * by;\n  out[1] = ay * bw + aw * by + az * bx - ax * bz;\n  out[2] = az * bw + aw * bz + ax * by - ay * bx;\n  out[3] = aw * bw - ax * bx - ay * by - az * bz;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the X axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateX(out, a, rad) {\n  rad *= 0.5;\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  var bx = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + aw * bx;\n  out[1] = ay * bw + az * bx;\n  out[2] = az * bw - ay * bx;\n  out[3] = aw * bw - ax * bx;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Y axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateY(out, a, rad) {\n  rad *= 0.5;\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  var by = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw - az * by;\n  out[1] = ay * bw + aw * by;\n  out[2] = az * bw + ax * by;\n  out[3] = aw * bw - ay * by;\n  return out;\n}\n\n/**\n * Rotates a quaternion by the given angle about the Z axis\n *\n * @param {quat} out quat receiving operation result\n * @param {quat} a quat to rotate\n * @param {number} rad angle (in radians) to rotate\n * @returns {quat} out\n */\nfunction rotateZ(out, a, rad) {\n  rad *= 0.5;\n\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  var bz = Math.sin(rad), bw = Math.cos(rad);\n\n  out[0] = ax * bw + ay * bz;\n  out[1] = ay * bw - ax * bz;\n  out[2] = az * bw + aw * bz;\n  out[3] = aw * bw - az * bz;\n  return out;\n}\n\n/**\n * Calculates the W component of a quat from the X, Y, and Z components.\n * Assumes that quaternion is 1 unit in length.\n * Any existing W component will be ignored.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate W component of\n * @returns {quat} out\n */\nfunction calculateW(out, a) {\n  var x = a[0], y = a[1], z = a[2];\n\n  out[0] = x;\n  out[1] = y;\n  out[2] = z;\n  out[3] = Math.sqrt(Math.abs(1.0 - x * x - y * y - z * z));\n  return out;\n}\n\n/**\n * Performs a spherical linear interpolation between two quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n */\nfunction slerp(out, a, b, t) {\n  // benchmarks:\n  //    http://jsperf.com/quaternion-slerp-implementations\n  var ax = a[0], ay = a[1], az = a[2], aw = a[3];\n  var bx = b[0], by = b[1], bz = b[2], bw = b[3];\n\n  var omega, cosom, sinom, scale0, scale1;\n\n  // calc cosine\n  cosom = ax * bx + ay * by + az * bz + aw * bw;\n  // adjust signs (if necessary)\n  if ( cosom < 0.0 ) {\n    cosom = -cosom;\n    bx = - bx;\n    by = - by;\n    bz = - bz;\n    bw = - bw;\n  }\n  // calculate coefficients\n  if ( (1.0 - cosom) > 0.000001 ) {\n    // standard case (slerp)\n    omega  = Math.acos(cosom);\n    sinom  = Math.sin(omega);\n    scale0 = Math.sin((1.0 - t) * omega) / sinom;\n    scale1 = Math.sin(t * omega) / sinom;\n  } else {\n    // \"from\" and \"to\" quaternions are very close\n    //  ... so we can do a linear interpolation\n    scale0 = 1.0 - t;\n    scale1 = t;\n  }\n  // calculate final values\n  out[0] = scale0 * ax + scale1 * bx;\n  out[1] = scale0 * ay + scale1 * by;\n  out[2] = scale0 * az + scale1 * bz;\n  out[3] = scale0 * aw + scale1 * bw;\n\n  return out;\n}\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nfunction invert(out, a) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3];\n  var dot = a0*a0 + a1*a1 + a2*a2 + a3*a3;\n  var invDot = dot ? 1.0/dot : 0;\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0*invDot;\n  out[1] = -a1*invDot;\n  out[2] = -a2*invDot;\n  out[3] = a3*invDot;\n  return out;\n}\n\n/**\n * Calculates the conjugate of a quat\n * If the quaternion is normalized, this function is faster than quat.inverse and produces the same result.\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate conjugate of\n * @returns {quat} out\n */\nfunction conjugate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  out[2] = -a[2];\n  out[3] = a[3];\n  return out;\n}\n\n/**\n * Creates a quaternion from the given 3x3 rotation matrix.\n *\n * NOTE: The resultant quaternion is not normalized, so you should be sure\n * to renormalize the quaternion yourself where necessary.\n *\n * @param {quat} out the receiving quaternion\n * @param {mat3} m rotation matrix\n * @returns {quat} out\n * @function\n */\nfunction fromMat3(out, m) {\n  // Algorithm in Ken Shoemake's article in 1987 SIGGRAPH course notes\n  // article \"Quaternion Calculus and Fast Animation\".\n  var fTrace = m[0] + m[4] + m[8];\n  var fRoot;\n\n  if ( fTrace > 0.0 ) {\n    // |w| > 1/2, may as well choose w > 1/2\n    fRoot = Math.sqrt(fTrace + 1.0);  // 2w\n    out[3] = 0.5 * fRoot;\n    fRoot = 0.5/fRoot;  // 1/(4w)\n    out[0] = (m[5]-m[7])*fRoot;\n    out[1] = (m[6]-m[2])*fRoot;\n    out[2] = (m[1]-m[3])*fRoot;\n  } else {\n    // |w| <= 1/2\n    var i = 0;\n    if ( m[4] > m[0] )\n      { i = 1; }\n    if ( m[8] > m[i*3+i] )\n      { i = 2; }\n    var j = (i+1)%3;\n    var k = (i+2)%3;\n\n    fRoot = Math.sqrt(m[i*3+i]-m[j*3+j]-m[k*3+k] + 1.0);\n    out[i] = 0.5 * fRoot;\n    fRoot = 0.5 / fRoot;\n    out[3] = (m[j*3+k] - m[k*3+j]) * fRoot;\n    out[j] = (m[j*3+i] + m[i*3+j]) * fRoot;\n    out[k] = (m[k*3+i] + m[i*3+k]) * fRoot;\n  }\n\n  return out;\n}\n\n/**\n * Creates a quaternion from the given euler angle x, y, z.\n *\n * @param {quat} out the receiving quaternion\n * @param {x} Angle to rotate around X axis in degrees.\n * @param {y} Angle to rotate around Y axis in degrees.\n * @param {z} Angle to rotate around Z axis in degrees.\n * @returns {quat} out\n * @function\n */\nfunction fromEuler(out, x, y, z) {\n    var halfToRad = 0.5 * Math.PI / 180.0;\n    x *= halfToRad;\n    y *= halfToRad;\n    z *= halfToRad;\n\n    var sx = Math.sin(x);\n    var cx = Math.cos(x);\n    var sy = Math.sin(y);\n    var cy = Math.cos(y);\n    var sz = Math.sin(z);\n    var cz = Math.cos(z);\n\n    out[0] = sx * cy * cz - cx * sy * sz;\n    out[1] = cx * sy * cz + sx * cy * sz;\n    out[2] = cx * cy * sz - sx * sy * cz;\n    out[3] = cx * cy * cz + sx * sy * sz;\n\n    return out;\n}\n\n/**\n * Returns a string representation of a quatenion\n *\n * @param {quat} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'quat(' + a[0] + ', ' + a[1] + ', ' + a[2] + ', ' + a[3] + ')';\n}\n\n/**\n * Creates a new quat initialized with values from an existing quaternion\n *\n * @param {quat} a quaternion to clone\n * @returns {quat} a new quaternion\n * @function\n */\nvar clone = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"clone\"];\n\n/**\n * Creates a new quat initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} a new quaternion\n * @function\n */\nvar fromValues = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"fromValues\"];\n\n/**\n * Copy the values from one quat to another\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the source quaternion\n * @returns {quat} out\n * @function\n */\nvar copy = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"copy\"];\n\n/**\n * Set the components of a quat to the given values\n *\n * @param {quat} out the receiving quaternion\n * @param {Number} x X component\n * @param {Number} y Y component\n * @param {Number} z Z component\n * @param {Number} w W component\n * @returns {quat} out\n * @function\n */\nvar set = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"set\"];\n\n/**\n * Adds two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {quat} out\n * @function\n */\nvar add = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"add\"];\n\n/**\n * Alias for {@link quat.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Scales a quat by a scalar number\n *\n * @param {quat} out the receiving vector\n * @param {quat} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {quat} out\n * @function\n */\nvar scale = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"scale\"];\n\n/**\n * Calculates the dot product of two quat's\n *\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @returns {Number} dot product of a and b\n * @function\n */\nvar dot = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"dot\"];\n\n/**\n * Performs a linear interpolation between two quat's\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {quat} out\n * @function\n */\nvar lerp = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"lerp\"];\n\n/**\n * Calculates the length of a quat\n *\n * @param {quat} a vector to calculate length of\n * @returns {Number} length of a\n */\nvar length = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"length\"];\n\n/**\n * Alias for {@link quat.length}\n * @function\n */\nvar len = length;\n\n/**\n * Calculates the squared length of a quat\n *\n * @param {quat} a vector to calculate squared length of\n * @returns {Number} squared length of a\n * @function\n */\nvar squaredLength = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"squaredLength\"];\n\n/**\n * Alias for {@link quat.squaredLength}\n * @function\n */\nvar sqrLen = squaredLength;\n\n/**\n * Normalize a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quaternion to normalize\n * @returns {quat} out\n * @function\n */\nvar normalize = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"normalize\"];\n\n/**\n * Returns whether or not the quaternions have exactly the same elements in the same position (when compared with ===)\n *\n * @param {quat} a The first quaternion.\n * @param {quat} b The second quaternion.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvar exactEquals = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"exactEquals\"];\n\n/**\n * Returns whether or not the quaternions have approximately the same elements in the same position.\n *\n * @param {quat} a The first vector.\n * @param {quat} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nvar equals = __WEBPACK_IMPORTED_MODULE_3__vec4__[\"equals\"];\n\n/**\n * Sets a quaternion to represent the shortest rotation from one\n * vector to another.\n *\n * Both vectors are assumed to be unit length.\n *\n * @param {quat} out the receiving quaternion.\n * @param {vec3} a the initial vector\n * @param {vec3} b the destination vector\n * @returns {quat} out\n */\nvar rotationTo = (function() {\n  var tmpvec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__[\"create\"]();\n  var xUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__[\"fromValues\"](1,0,0);\n  var yUnitVec3 = __WEBPACK_IMPORTED_MODULE_2__vec3__[\"fromValues\"](0,1,0);\n\n  return function(out, a, b) {\n    var dot = __WEBPACK_IMPORTED_MODULE_2__vec3__[\"dot\"](a, b);\n    if (dot < -0.999999) {\n      __WEBPACK_IMPORTED_MODULE_2__vec3__[\"cross\"](tmpvec3, xUnitVec3, a);\n      if (__WEBPACK_IMPORTED_MODULE_2__vec3__[\"len\"](tmpvec3) < 0.000001)\n        { __WEBPACK_IMPORTED_MODULE_2__vec3__[\"cross\"](tmpvec3, yUnitVec3, a); }\n      __WEBPACK_IMPORTED_MODULE_2__vec3__[\"normalize\"](tmpvec3, tmpvec3);\n      setAxisAngle(out, tmpvec3, Math.PI);\n      return out;\n    } else if (dot > 0.999999) {\n      out[0] = 0;\n      out[1] = 0;\n      out[2] = 0;\n      out[3] = 1;\n      return out;\n    } else {\n      __WEBPACK_IMPORTED_MODULE_2__vec3__[\"cross\"](tmpvec3, a, b);\n      out[0] = tmpvec3[0];\n      out[1] = tmpvec3[1];\n      out[2] = tmpvec3[2];\n      out[3] = 1 + dot;\n      return normalize(out, out);\n    }\n  };\n})();\n\n/**\n * Performs a spherical linear interpolation with two control points\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the first operand\n * @param {quat} b the second operand\n * @param {quat} c the third operand\n * @param {quat} d the fourth operand\n * @param {Number} t interpolation amount\n * @returns {quat} out\n */\nvar sqlerp = (function () {\n  var temp1 = create();\n  var temp2 = create();\n\n  return function (out, a, b, c, d, t) {\n    slerp(temp1, a, d, t);\n    slerp(temp2, b, c, t);\n    slerp(out, temp1, temp2, 2 * t * (1 - t));\n\n    return out;\n  };\n}());\n\n/**\n * Sets the specified quaternion with values corresponding to the given\n * axes. Each axis is a vec3 and is expected to be unit length and\n * perpendicular to all other specified axes.\n *\n * @param {vec3} view  the vector representing the viewing direction\n * @param {vec3} right the vector representing the local \"right\" direction\n * @param {vec3} up    the vector representing the local \"up\" direction\n * @returns {quat} out\n */\nvar setAxes = (function() {\n  var matr = __WEBPACK_IMPORTED_MODULE_1__mat3__[\"create\"]();\n\n  return function(out, view, right, up) {\n    matr[0] = right[0];\n    matr[3] = right[1];\n    matr[6] = right[2];\n\n    matr[1] = up[0];\n    matr[4] = up[1];\n    matr[7] = up[2];\n\n    matr[2] = -view[0];\n    matr[5] = -view[1];\n    matr[8] = -view[2];\n\n    return normalize(out, fromMat3(out, matr));\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/quat.js\n// module id = 29\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/quat.js?");

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("Object.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony export (immutable) */ __webpack_exports__[\"create\"] = create;\n/* harmony export (immutable) */ __webpack_exports__[\"clone\"] = clone;\n/* harmony export (immutable) */ __webpack_exports__[\"fromValues\"] = fromValues;\n/* harmony export (immutable) */ __webpack_exports__[\"copy\"] = copy;\n/* harmony export (immutable) */ __webpack_exports__[\"set\"] = set;\n/* harmony export (immutable) */ __webpack_exports__[\"add\"] = add;\n/* harmony export (immutable) */ __webpack_exports__[\"subtract\"] = subtract;\n/* harmony export (immutable) */ __webpack_exports__[\"multiply\"] = multiply;\n/* harmony export (immutable) */ __webpack_exports__[\"divide\"] = divide;\n/* harmony export (immutable) */ __webpack_exports__[\"ceil\"] = ceil;\n/* harmony export (immutable) */ __webpack_exports__[\"floor\"] = floor;\n/* harmony export (immutable) */ __webpack_exports__[\"min\"] = min;\n/* harmony export (immutable) */ __webpack_exports__[\"max\"] = max;\n/* harmony export (immutable) */ __webpack_exports__[\"round\"] = round;\n/* harmony export (immutable) */ __webpack_exports__[\"scale\"] = scale;\n/* harmony export (immutable) */ __webpack_exports__[\"scaleAndAdd\"] = scaleAndAdd;\n/* harmony export (immutable) */ __webpack_exports__[\"distance\"] = distance;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredDistance\"] = squaredDistance;\n/* harmony export (immutable) */ __webpack_exports__[\"length\"] = length;\n/* harmony export (immutable) */ __webpack_exports__[\"squaredLength\"] = squaredLength;\n/* harmony export (immutable) */ __webpack_exports__[\"negate\"] = negate;\n/* harmony export (immutable) */ __webpack_exports__[\"inverse\"] = inverse;\n/* harmony export (immutable) */ __webpack_exports__[\"normalize\"] = normalize;\n/* harmony export (immutable) */ __webpack_exports__[\"dot\"] = dot;\n/* harmony export (immutable) */ __webpack_exports__[\"cross\"] = cross;\n/* harmony export (immutable) */ __webpack_exports__[\"lerp\"] = lerp;\n/* harmony export (immutable) */ __webpack_exports__[\"random\"] = random;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2\"] = transformMat2;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat2d\"] = transformMat2d;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat3\"] = transformMat3;\n/* harmony export (immutable) */ __webpack_exports__[\"transformMat4\"] = transformMat4;\n/* harmony export (immutable) */ __webpack_exports__[\"str\"] = str;\n/* harmony export (immutable) */ __webpack_exports__[\"exactEquals\"] = exactEquals;\n/* harmony export (immutable) */ __webpack_exports__[\"equals\"] = equals;\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"len\", function() { return len; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sub\", function() { return sub; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"mul\", function() { return mul; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"div\", function() { return div; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"dist\", function() { return dist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrDist\", function() { return sqrDist; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"sqrLen\", function() { return sqrLen; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"forEach\", function() { return forEach; });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__common__ = __webpack_require__(2);\n/* Copyright (c) 2015, Brandon Jones, Colin MacKenzie IV.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE. */\n\n\n\n/**\n * 2 Dimensional Vector\n * @module vec2\n */\n\n/**\n * Creates a new, empty vec2\n *\n * @returns {vec2} a new 2D vector\n */\nfunction create() {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](2);\n  out[0] = 0;\n  out[1] = 0;\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with values from an existing vector\n *\n * @param {vec2} a vector to clone\n * @returns {vec2} a new 2D vector\n */\nfunction clone(a) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](2);\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Creates a new vec2 initialized with the given values\n *\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} a new 2D vector\n */\nfunction fromValues(x, y) {\n  var out = new __WEBPACK_IMPORTED_MODULE_0__common__[\"ARRAY_TYPE\"](2);\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Copy the values from one vec2 to another\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the source vector\n * @returns {vec2} out\n */\nfunction copy(out, a) {\n  out[0] = a[0];\n  out[1] = a[1];\n  return out;\n}\n\n/**\n * Set the components of a vec2 to the given values\n *\n * @param {vec2} out the receiving vector\n * @param {Number} x X component\n * @param {Number} y Y component\n * @returns {vec2} out\n */\nfunction set(out, x, y) {\n  out[0] = x;\n  out[1] = y;\n  return out;\n}\n\n/**\n * Adds two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction add(out, a, b) {\n  out[0] = a[0] + b[0];\n  out[1] = a[1] + b[1];\n  return out;\n}\n\n/**\n * Subtracts vector b from vector a\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction subtract(out, a, b) {\n  out[0] = a[0] - b[0];\n  out[1] = a[1] - b[1];\n  return out;\n}\n\n/**\n * Multiplies two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction multiply(out, a, b) {\n  out[0] = a[0] * b[0];\n  out[1] = a[1] * b[1];\n  return out;\n};\n\n/**\n * Divides two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction divide(out, a, b) {\n  out[0] = a[0] / b[0];\n  out[1] = a[1] / b[1];\n  return out;\n};\n\n/**\n * Math.ceil the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to ceil\n * @returns {vec2} out\n */\nfunction ceil(out, a) {\n  out[0] = Math.ceil(a[0]);\n  out[1] = Math.ceil(a[1]);\n  return out;\n};\n\n/**\n * Math.floor the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to floor\n * @returns {vec2} out\n */\nfunction floor(out, a) {\n  out[0] = Math.floor(a[0]);\n  out[1] = Math.floor(a[1]);\n  return out;\n};\n\n/**\n * Returns the minimum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction min(out, a, b) {\n  out[0] = Math.min(a[0], b[0]);\n  out[1] = Math.min(a[1], b[1]);\n  return out;\n};\n\n/**\n * Returns the maximum of two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec2} out\n */\nfunction max(out, a, b) {\n  out[0] = Math.max(a[0], b[0]);\n  out[1] = Math.max(a[1], b[1]);\n  return out;\n};\n\n/**\n * Math.round the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to round\n * @returns {vec2} out\n */\nfunction round (out, a) {\n  out[0] = Math.round(a[0]);\n  out[1] = Math.round(a[1]);\n  return out;\n};\n\n/**\n * Scales a vec2 by a scalar number\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to scale\n * @param {Number} b amount to scale the vector by\n * @returns {vec2} out\n */\nfunction scale(out, a, b) {\n  out[0] = a[0] * b;\n  out[1] = a[1] * b;\n  return out;\n};\n\n/**\n * Adds two vec2's after scaling the second operand by a scalar value\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} scale the amount to scale b by before adding\n * @returns {vec2} out\n */\nfunction scaleAndAdd(out, a, b, scale) {\n  out[0] = a[0] + (b[0] * scale);\n  out[1] = a[1] + (b[1] * scale);\n  return out;\n};\n\n/**\n * Calculates the euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} distance between a and b\n */\nfunction distance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Calculates the squared euclidian distance between two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} squared distance between a and b\n */\nfunction squaredDistance(a, b) {\n  var x = b[0] - a[0],\n    y = b[1] - a[1];\n  return x*x + y*y;\n};\n\n/**\n * Calculates the length of a vec2\n *\n * @param {vec2} a vector to calculate length of\n * @returns {Number} length of a\n */\nfunction length(a) {\n  var x = a[0],\n    y = a[1];\n  return Math.sqrt(x*x + y*y);\n};\n\n/**\n * Calculates the squared length of a vec2\n *\n * @param {vec2} a vector to calculate squared length of\n * @returns {Number} squared length of a\n */\nfunction squaredLength (a) {\n  var x = a[0],\n    y = a[1];\n  return x*x + y*y;\n};\n\n/**\n * Negates the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to negate\n * @returns {vec2} out\n */\nfunction negate(out, a) {\n  out[0] = -a[0];\n  out[1] = -a[1];\n  return out;\n};\n\n/**\n * Returns the inverse of the components of a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to invert\n * @returns {vec2} out\n */\nfunction inverse(out, a) {\n  out[0] = 1.0 / a[0];\n  out[1] = 1.0 / a[1];\n  return out;\n};\n\n/**\n * Normalize a vec2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a vector to normalize\n * @returns {vec2} out\n */\nfunction normalize(out, a) {\n  var x = a[0],\n    y = a[1];\n  var len = x*x + y*y;\n  if (len > 0) {\n    //TODO: evaluate use of glm_invsqrt here?\n    len = 1 / Math.sqrt(len);\n    out[0] = a[0] * len;\n    out[1] = a[1] * len;\n  }\n  return out;\n};\n\n/**\n * Calculates the dot product of two vec2's\n *\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {Number} dot product of a and b\n */\nfunction dot(a, b) {\n  return a[0] * b[0] + a[1] * b[1];\n};\n\n/**\n * Computes the cross product of two vec2's\n * Note that the cross product must by definition produce a 3D vector\n *\n * @param {vec3} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @returns {vec3} out\n */\nfunction cross(out, a, b) {\n  var z = a[0] * b[1] - a[1] * b[0];\n  out[0] = out[1] = 0;\n  out[2] = z;\n  return out;\n};\n\n/**\n * Performs a linear interpolation between two vec2's\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the first operand\n * @param {vec2} b the second operand\n * @param {Number} t interpolation amount between the two inputs\n * @returns {vec2} out\n */\nfunction lerp(out, a, b, t) {\n  var ax = a[0],\n    ay = a[1];\n  out[0] = ax + t * (b[0] - ax);\n  out[1] = ay + t * (b[1] - ay);\n  return out;\n};\n\n/**\n * Generates a random vector with the given scale\n *\n * @param {vec2} out the receiving vector\n * @param {Number} [scale] Length of the resulting vector. If ommitted, a unit vector will be returned\n * @returns {vec2} out\n */\nfunction random(out, scale) {\n  scale = scale || 1.0;\n  var r = __WEBPACK_IMPORTED_MODULE_0__common__[\"RANDOM\"]() * 2.0 * Math.PI;\n  out[0] = Math.cos(r) * scale;\n  out[1] = Math.sin(r) * scale;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat2\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y;\n  out[1] = m[1] * x + m[3] * y;\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat2d\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat2d} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat2d(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[2] * y + m[4];\n  out[1] = m[1] * x + m[3] * y + m[5];\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat3\n * 3rd vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat3} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat3(out, a, m) {\n  var x = a[0],\n    y = a[1];\n  out[0] = m[0] * x + m[3] * y + m[6];\n  out[1] = m[1] * x + m[4] * y + m[7];\n  return out;\n};\n\n/**\n * Transforms the vec2 with a mat4\n * 3rd vector component is implicitly '0'\n * 4th vector component is implicitly '1'\n *\n * @param {vec2} out the receiving vector\n * @param {vec2} a the vector to transform\n * @param {mat4} m matrix to transform with\n * @returns {vec2} out\n */\nfunction transformMat4(out, a, m) {\n  var x = a[0];\n  var y = a[1];\n  out[0] = m[0] * x + m[4] * y + m[12];\n  out[1] = m[1] * x + m[5] * y + m[13];\n  return out;\n}\n\n/**\n * Returns a string representation of a vector\n *\n * @param {vec2} a vector to represent as a string\n * @returns {String} string representation of the vector\n */\nfunction str(a) {\n  return 'vec2(' + a[0] + ', ' + a[1] + ')';\n}\n\n/**\n * Returns whether or not the vectors exactly have the same elements in the same position (when compared with ===)\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction exactEquals(a, b) {\n  return a[0] === b[0] && a[1] === b[1];\n}\n\n/**\n * Returns whether or not the vectors have approximately the same elements in the same position.\n *\n * @param {vec2} a The first vector.\n * @param {vec2} b The second vector.\n * @returns {Boolean} True if the vectors are equal, false otherwise.\n */\nfunction equals(a, b) {\n  var a0 = a[0], a1 = a[1];\n  var b0 = b[0], b1 = b[1];\n  return (Math.abs(a0 - b0) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a0), Math.abs(b0)) &&\n          Math.abs(a1 - b1) <= __WEBPACK_IMPORTED_MODULE_0__common__[\"EPSILON\"]*Math.max(1.0, Math.abs(a1), Math.abs(b1)));\n}\n\n/**\n * Alias for {@link vec2.length}\n * @function\n */\nvar len = length;\n\n/**\n * Alias for {@link vec2.subtract}\n * @function\n */\nvar sub = subtract;\n\n/**\n * Alias for {@link vec2.multiply}\n * @function\n */\nvar mul = multiply;\n\n/**\n * Alias for {@link vec2.divide}\n * @function\n */\nvar div = divide;\n\n/**\n * Alias for {@link vec2.distance}\n * @function\n */\nvar dist = distance;\n\n/**\n * Alias for {@link vec2.squaredDistance}\n * @function\n */\nvar sqrDist = squaredDistance;\n\n/**\n * Alias for {@link vec2.squaredLength}\n * @function\n */\nvar sqrLen = squaredLength;\n\n/**\n * Perform some operation over an array of vec2s.\n *\n * @param {Array} a the array of vectors to iterate over\n * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed\n * @param {Number} offset Number of elements to skip at the beginning of the array\n * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array\n * @param {Function} fn Function to call for each vector in the array\n * @param {Object} [arg] additional argument to pass to fn\n * @returns {Array} a\n * @function\n */\nvar forEach = (function() {\n  var vec = create();\n\n  return function(a, stride, offset, count, fn, arg) {\n    var i, l;\n    if(!stride) {\n      stride = 2;\n    }\n\n    if(!offset) {\n      offset = 0;\n    }\n\n    if(count) {\n      l = Math.min((count * stride) + offset, a.length);\n    } else {\n      l = a.length;\n    }\n\n    for(i = offset; i < l; i += stride) {\n      vec[0] = a[i]; vec[1] = a[i+1];\n      fn(vec, vec, arg);\n      a[i] = vec[0]; a[i+1] = vec[1];\n    }\n\n    return a;\n  };\n})();\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/gl-matrix/vec2.js\n// module id = 30\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/gl-matrix/vec2.js?");

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__gl_matrix_js__ = __webpack_require__(0);\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0__gl_matrix_js__[\"a\" /* default */].vec3;\nvar mat4 = __WEBPACK_IMPORTED_MODULE_0__gl_matrix_js__[\"a\" /* default */].mat4;\nvar mat3 = __WEBPACK_IMPORTED_MODULE_0__gl_matrix_js__[\"a\" /* default */].mat3;\nvar quat = __WEBPACK_IMPORTED_MODULE_0__gl_matrix_js__[\"a\" /* default */].quat;\n\nvar helperQuat = quat.create();\n\n/**\n * Adds rotation component to the quaternion (length of the axis vector is the angle)\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the quaternion operand\n * @param {vec3} v rotation vector\n\n * @returns {quat} out\n */\nquat.rotateByVector = function (out, a, v) {\n  helperQuat[0] = v[0];\n  helperQuat[1] = v[1];\n  helperQuat[2] = v[2];\n  helperQuat[3] = 0;\n\n  quat.multiply(out, a, helperQuat);\n  return out;\n}\n\n/**\n * Adds scaled rotation component to the quaternion\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a the quaternion operand\n * @param {vec3} v rotation vector\n * @param {Number} scale the amount to scale b by before adding\n * @returns {quat} out\n */\nquat.addScaledRotaton = function (out, a, v, scale) {\n  helperQuat[0] = v[0];\n  helperQuat[1] = v[1];\n  helperQuat[2] = v[2];\n  helperQuat[3] = 0;\n\n  quat.multiply(helperQuat, helperQuat, a);\n\n  out[0] = a[0] + helperQuat[0] * 0.5;\n  out[1] = a[1] + helperQuat[1] * 0.5;\n  out[2] = a[2] + helperQuat[2] * 0.5;\n  out[3] = a[3] + helperQuat[3] * 0.5;\n}\n\nvec3.transformMat4Direction = function (out, a, m) {\n  var x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[4] + z * m[8];\n  out[1] = x * m[1] + y * m[5] + z * m[9];\n  out[2] = x * m[2] + y * m[6] + z * m[10];\n  return out;\n}\n\nvec3.transformInvertMat4 = function (out, a, m) {\n  var x = a[0] - m[12], y = a[1] - m[13], z = a[2] - m[14];\n  out[0] = x * m[0] + y * m[1] + z * m[2];\n  out[1] = x * m[4] + y * m[5] + z * m[6];\n  out[2] = x * m[8] + y * m[9] + z * m[10];\n  return out;\n}\n\nvec3.transformInvertMat4Direction = function (out, a, m) {\n  var x = a[0], y = a[1], z = a[2];\n  out[0] = x * m[0] + y * m[1] + z * m[2];\n  out[1] = x * m[4] + y * m[5] + z * m[6];\n  out[2] = x * m[8] + y * m[9] + z * m[10];\n  return out;\n}\n\n// 3 for position\nmat4.getAxis = function (out, m, axis) {\n  out[0] = m[axis * 4];\n  out[1] = m[axis * 4 + 1];\n  out[2] = m[axis * 4 + 2];\n}\n\nmat3.getAxis = function (out, m, axis) {\n  out[0] = m[axis * 3];\n  out[1] = m[axis * 3 + 1];\n  out[2] = m[axis * 3 + 2];\n}\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/lib/MathAdditional.js\n// module id = 31\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/lib/MathAdditional.js?");

/***/ }),
/* 32 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Shader__ = __webpack_require__(6);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__enginePool__ = __webpack_require__(33);\n\n\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\n\nvar identityMatrix = mat4.create();\nvar modelViewMatrix = mat4.create();\nvar normalMatrix = mat4.create();\n\nvar UNIFORM_LIGHT_DIR = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].UNIFORM_LIGHT_DIR;\nvar UNIFORM_PROJECTION_MATRIX = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].UNIFORM_PROJECTION_MATRIX;\nvar UNIFORM_MODELVIEW_MATRIX = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].UNIFORM_MODELVIEW_MATRIX;\nvar UNIFORM_NORMAL_MATRIX = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].UNIFORM_NORMAL_MATRIX;\n\nvar ATTRIBUTE_POSITION = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].ATTRIBUTE_POSITION;\nvar ATTRIBUTE_NORMAL = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].ATTRIBUTE_NORMAL;\nvar ATTRIBUTE_COLOR = __WEBPACK_IMPORTED_MODULE_0__Shader__[\"a\" /* default */].ATTRIBUTE_COLOR;\n\nvar Renderer = function Renderer (opts) {\n  if ( opts === void 0 ) opts = {};\n\n  this.gl = opts.gl;\n  this.scene = opts.scene;\n\n  this.worldMatrix = mat4.create();\n  this.projectionMatrix = mat4.create();\n  this.lightDir = vec3.fromValues(1, -4, -3);\n  this.renderOps = [];\n};\n\nRenderer.prototype.render = function render () {\n  // Free render operations\n  var renderOps = this.renderOps;\n  for (var i = 0, len = renderOps.length; i < len; i++) {\n    __WEBPACK_IMPORTED_MODULE_2__enginePool__[\"a\" /* default */].releaseRenderOp(renderOps[i]);\n  }\n  this.renderOps.length = 0;\n\n  // Get new render operations from the scene\n  if (this.scene) {\n    this.scene.setupRenderOps(this);\n  }\n\n  this.sortRenderOps();\n  this.processRenderOps();\n};\n\nRenderer.prototype.addRenderOp = function addRenderOp () {\n  var renderOp = __WEBPACK_IMPORTED_MODULE_2__enginePool__[\"a\" /* default */].obtainRenderOp();\n  this.renderOps.push(renderOp);\n  return renderOp;\n};\n\nRenderer.prototype.sortRenderOps = function sortRenderOps () {\n\n};\n\nRenderer.prototype.applyState = function applyState (renderOp) {\n\n};\n\nRenderer.prototype.processRenderOps = function processRenderOps () {\n    var this$1 = this;\n\n  var renderOps = this.renderOps;\n  for (var i = 0, len = renderOps.length; i < len; i++) {\n    var renderOp = renderOps[i];\n    this$1.renderMesh(renderOp.mesh, renderOp.material.shader, renderOp.transform, renderOp);\n  }\n};\n\nRenderer.prototype.setMatrices = function setMatrices (world, projection) {\n  mat4.copy(this.worldMatrix, world);\n  mat4.copy(this.projectionMatrix, projection);\n};\n\nRenderer.prototype.renderMesh = function renderMesh (mesh, shader, transform, renderOpts) {\n  if (!mesh.hasVertices) {\n    console.error('Mesh data incomplete');\n    return;\n  }\n\n  var indexCount = mesh.faceCount * mesh.componentCount;\n  var stride = mesh.strideBytes;\n  if (!indexCount) {\n    return; // Empty mesh\n  }\n\n  var gl = this.gl;\n\n  var renderMode = gl.TRIANGLES;\n  if (renderOpts && renderOpts.renderMode !== undefined) {\n    renderMode = renderOpts.renderMode;\n  }\n\n  if (!transform) {\n    transform = identityMatrix;\n  }\n\n  // Getting modelview matrix\n  mat4.multiply(modelViewMatrix, this.worldMatrix, transform);\n\n  // Getting normal matrix\n  mat4.invert(normalMatrix, transform);\n  mat4.transpose(normalMatrix, normalMatrix);\n\n  // Shader uniforms\n  shader.use();\n  shader.setUniformMat4(UNIFORM_PROJECTION_MATRIX, this.projectionMatrix);\n  shader.setUniformMat4(UNIFORM_MODELVIEW_MATRIX, modelViewMatrix);\n\n  gl.bindBuffer(gl.ARRAY_BUFFER, mesh.vbo);\n\n  if (mesh.hasVertices) {\n    // Vertices\n    gl.enableVertexAttribArray(ATTRIBUTE_POSITION);\n    gl.vertexAttribPointer(ATTRIBUTE_POSITION, 3, gl.FLOAT, false, stride, mesh.vertexOffsetBytes);\n  }\n\n  if (mesh.hasNormals) {\n    // Set normal matrix and light dir\n    shader.setUniformMat4(UNIFORM_NORMAL_MATRIX, normalMatrix);\n    shader.setUniform3(UNIFORM_LIGHT_DIR, this.lightDir);\n\n    // Normals\n    gl.enableVertexAttribArray(ATTRIBUTE_NORMAL);\n    gl.vertexAttribPointer(ATTRIBUTE_NORMAL, 3, gl.FLOAT, false, stride, mesh.normalOffsetBytes);\n  }\n\n  // Colors\n  if (mesh.hasColors) {\n    gl.enableVertexAttribArray(ATTRIBUTE_COLOR);\n    gl.vertexAttribPointer(ATTRIBUTE_COLOR, 4, gl.FLOAT, false, stride, mesh.colorOffsetBytes);\n  }\n\n  // Draw\n  if (mesh.hasIndices) {\n    // Indices\n    gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, mesh.indexBuffer);\n    gl.drawElements(renderMode, indexCount, gl.UNSIGNED_SHORT, 0);\n  } else {\n    gl.drawArrays(renderMode, 0, indexCount);\n  }\n\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Renderer);\n\nRenderer.UNIFORM_PROJECTION_MATRIX = UNIFORM_PROJECTION_MATRIX;\nRenderer.UNIFORM_MODELVIEW_MATRIX = UNIFORM_MODELVIEW_MATRIX;\nRenderer.ATTRIBUTE_POSITION = ATTRIBUTE_POSITION;\nRenderer.ATTRIBUTE_COLOR = ATTRIBUTE_COLOR;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/Renderer.js\n// module id = 32\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/Renderer.js?");

/***/ }),
/* 33 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__lib_ObjectPool__ = __webpack_require__(7);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__render_Material__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__render_RenderOperation__ = __webpack_require__(34);\n\n\n\n\nvar renderOpPool = new __WEBPACK_IMPORTED_MODULE_0__lib_ObjectPool__[\"a\" /* default */](__WEBPACK_IMPORTED_MODULE_2__render_RenderOperation__[\"a\" /* default */]);\n\n/* harmony default export */ __webpack_exports__[\"a\"] = ({\n\n  obtainRenderOp: function () {\n    var renderOp = renderOpPool.obtain();\n    return renderOp;\n  },\n\n  releaseRenderOp: function (object) {\n    renderOpPool.release(object);\n  }\n\n});\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/enginePool.js\n// module id = 33\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/enginePool.js?");

/***/ }),
/* 34 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var RenderOperation = function RenderOperation () {\n  this.prepareForPool();\n};\n\nRenderOperation.prototype.prepareForPool = function prepareForPool () {\n  this.mesh = null;\n  this.renderMode = undefined;\n  this.renderMethod = 0; // 0 is renderMesh\n  this.depthTest = true;\n  this.blend = false;\n  this.blendFunc = 0;\n  this.material = null;\n  this.transform = null;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (RenderOperation);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/render/RenderOperation.js\n// module id = 34\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/render/RenderOperation.js?");

/***/ }),
/* 35 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__GameObject__ = __webpack_require__(20);\n\n\n\nvar Scene = function Scene () {\n  this.objects = [];\n  this.rootObject = new __WEBPACK_IMPORTED_MODULE_1__GameObject__[\"a\" /* default */]();\n};\n\nScene.prototype.update = function update (dt) {\n  this.rootObject.update(dt);\n  this.rootObject.updateTransform();\n};\n\nScene.prototype.setupRenderOps = function setupRenderOps (renderer, gameObject) {\n    var this$1 = this;\n\n  if (!gameObject) {\n    gameObject = this.rootObject;\n  }\n\n  var children = gameObject.children;\n  for (var i = 0, len = children.length; i < len; i++) {\n    var renderOp = renderer.addRenderOp();\n    children[i].setupRenderOp(renderOp);\n    this$1.setupRenderOps(renderer, children[i]);\n  }\n};\n\nScene.prototype.addChild = function addChild (gameObject) {\n  this.rootObject.addChild(gameObject);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Scene);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/scene/Scene.js\n// module id = 35\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/scene/Scene.js?");

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("var ModelLoader = function ModelLoader () {};\n\nModelLoader.load = function load (dataView) {\n\n  var offset = 0;\n  var len = data.readUInt16(0);\n  console.info('len', len);\n  offset += 2;\n  var stringArr = new Uint8Array(len);\n\n  for (var i = 0; i < len; i++) {\n    stringArr[i] = dataView.readUInt8(offset + i);\n  }\n  offset += len;\n  var encodedString = String.fromCharCode.apply(null, stringArr);\n  console.info('JSON:', encodedString);\n};\n\n/* unused harmony default export */ var _unused_webpack_default_export = (ModelLoader);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/loader/ModelLoader.js\n// module id = 36\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/loader/ModelLoader.js?");

/***/ }),
/* 37 */
/***/ (function(module, exports) {

eval("module.exports = \"[vertex]\\n\\nattribute vec3 aPosition;\\n\\nuniform mat4 uMVMatrix;\\nuniform mat4 uPMatrix;\\n\\nvoid main(void) {\\n  gl_PointSize = 5.0;\\n  gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);\\n}\\n\\n[fragment]\\n\\nprecision mediump float;\\n\\nvoid main(void) {\\n  gl_FragColor = vec4(1.0, 1.0, 1.0, 1.0);\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/shaders/white.shader\n// module id = 37\n// module chunks = 0\n\n//# sourceURL=webpack:///./resources/shaders/white.shader?");

/***/ }),
/* 38 */
/***/ (function(module, exports) {

eval("module.exports = \"[vertex]\\n\\nattribute vec3 aPosition;\\nattribute vec4 aColor;\\n\\nuniform mat4 uMVMatrix;\\nuniform mat4 uPMatrix;\\n\\nvarying vec4 color;\\n\\nvoid main(void) {\\n  color = aColor;\\n  gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);\\n}\\n\\n[fragment]\\n\\nprecision mediump float;\\n\\nvarying vec4 color;\\n\\nvoid main(void) {\\n  gl_FragColor = color;\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/shaders/vertexColor.shader\n// module id = 38\n// module chunks = 0\n\n//# sourceURL=webpack:///./resources/shaders/vertexColor.shader?");

/***/ }),
/* 39 */
/***/ (function(module, exports) {

eval("module.exports = \"[vertex]\\n\\nattribute vec3 aPosition;\\nattribute vec3 aNormal;\\nuniform mat4 uMVMatrix;\\nuniform mat4 uPMatrix;\\nuniform mat4 uNormalMatrix;\\n\\nvarying vec3 vNormal;\\n\\nvoid main(void) {\\n  gl_Position = uPMatrix * uMVMatrix * vec4(aPosition, 1.0);\\n  vNormal = vec3(uNormalMatrix * vec4(aNormal, 1.0));\\n}\\n\\n[fragment]\\n\\nprecision highp float;\\n\\nuniform vec3 uLightDir;\\nvarying vec3 vNormal;\\n\\nvoid main(void) {\\n  vec3 lightDir = normalize(uLightDir);\\n  vec3 uLightColor = vec3(1.0, 1.0, 1.0);\\n  vec3 ambient = vec3(0.2, 0.2, 0.2);\\n\\n  float lightValue = max(dot(-lightDir, vNormal), 0.0);\\n\\n  gl_FragColor = vec4(uLightColor * lightValue + ambient, 1.0);\\n}\"\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/shaders/directionalLighting.shader\n// module id = 39\n// module chunks = 0\n\n//# sourceURL=webpack:///./resources/shaders/directionalLighting.shader?");

/***/ }),
/* 40 */
/***/ (function(module, exports, __webpack_require__) {

eval("module.exports = __webpack_require__.p + \"/resources/pyramid.bin\";\n\n//////////////////\n// WEBPACK FOOTER\n// ./resources/models/pyramid.bin\n// module id = 40\n// module chunks = 0\n\n//# sourceURL=webpack:///./resources/models/pyramid.bin?");

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseScene__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_Resources__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_engine_physics_particles_Particle__ = __webpack_require__(44);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_engine_physics_particles_ParticleForceRegistry__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_engine_physics_particles_GravityForceGenerator__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_engine_physics_particles_ParticleContact__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_src_utils__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_engine_render_Mesh__ = __webpack_require__(3);\n\n\n\n\n\n\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_7_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_7_math__[\"a\" /* default */].vec3;\n\n\n\nvar helperVec = vec3.create();\nvar helperMatrix = mat4.create();\n\nvar ParticleScene = (function (BaseScene) {\n  function ParticleScene () {\n    BaseScene.apply(this, arguments);\n  }\n\n  if ( BaseScene ) ParticleScene.__proto__ = BaseScene;\n  ParticleScene.prototype = Object.create( BaseScene && BaseScene.prototype );\n  ParticleScene.prototype.constructor = ParticleScene;\n\n  ParticleScene.prototype.initEntities = function initEntities () {\n    BaseScene.prototype.initEntities.call(this);\n\n    this.whiteShader = __WEBPACK_IMPORTED_MODULE_2_engine_Resources__[\"a\" /* default */].getShader('whiteShader');\n    this.particleMesh = new __WEBPACK_IMPORTED_MODULE_9_engine_render_Mesh__[\"a\" /* default */]();\n    __WEBPACK_IMPORTED_MODULE_8_src_utils__[\"a\" /* default */].generateSphere(this.particleMesh, 8, 8, 0.5);\n\n    this.gravityGenerator = new __WEBPACK_IMPORTED_MODULE_5_engine_physics_particles_GravityForceGenerator__[\"a\" /* default */](0, -10, 0);\n    this.particleRegistry = new __WEBPACK_IMPORTED_MODULE_4_engine_physics_particles_ParticleForceRegistry__[\"a\" /* default */]();\n    this.particles = [];\n\n    this.contact = new __WEBPACK_IMPORTED_MODULE_6_engine_physics_particles_ParticleContact__[\"a\" /* default */]();\n    this.contact.setup(null, null, 0.5, [0, 1, 0]);\n  };\n\n  ParticleScene.prototype.render = function render (dt, gl) {\n    var this$1 = this;\n\n    BaseScene.prototype.render.call(this, dt, gl);\n\n    for (var i = 0; i < this.particles.length; i++) {\n      var particle = this$1.particles[i];\n\n      particle.integrate(dt);\n\n      this$1.particleRegistry.updateForces(dt);\n\n      if (particle.position[1] < 0) {\n        this$1.contact.particle1 = particle;\n        this$1.contact.penetration = -particle.position[1];\n        this$1.contact.resolve(dt);\n      }\n\n      mat4.fromTranslation(helperMatrix, particle.position);\n      this$1.renderer.renderMesh(this$1.particleMesh, this$1.whiteShader, helperMatrix);\n    }\n  };\n\n  ParticleScene.prototype.handleInput = function handleInput (dt) {\n    BaseScene.prototype.handleInput.call(this, dt);\n    var input = __WEBPACK_IMPORTED_MODULE_0_engine_Application__[\"a\" /* default */].instance.input;\n\n    if (input.keyDown(32)) {\n      this.spawnParticle();\n    }\n  };\n\n  ParticleScene.prototype.spawnParticle = function spawnParticle () {\n    vec3.scaleAndAdd(helperVec, this.camera.position, this.camera.forward, -4);\n\n    var particle = new __WEBPACK_IMPORTED_MODULE_3_engine_physics_particles_Particle__[\"a\" /* default */]();\n    particle.setPosition(helperVec);\n    particle.setAcceleration(0, -10, 0);\n    // this.particleRegistry.add(particle, this.gravityGenerator);\n    this.particles.push(particle);\n  };\n\n  return ParticleScene;\n}(__WEBPACK_IMPORTED_MODULE_1__BaseScene__[\"a\" /* default */]));\n\n/* unused harmony default export */ var _unused_webpack_default_export = (ParticleScene);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scenes/ParticleScene.js\n// module id = 41\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/scenes/ParticleScene.js?");

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_engine_Resources__ = __webpack_require__(4);\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\n\n\n\nvar floor = Math.floor;\n\nvar GridEntity = function GridEntity (opts) {\n  this.renderer = __WEBPACK_IMPORTED_MODULE_2_engine_Application__[\"a\" /* default */].instance.renderer;\n  var gl = __WEBPACK_IMPORTED_MODULE_2_engine_Application__[\"a\" /* default */].gl;\n\n  this.transform = mat4.create();\n\n  this.mesh = new __WEBPACK_IMPORTED_MODULE_0_engine_render_Mesh__[\"a\" /* default */]({\n    componentCount: 2\n  });\n\n  this.cols = floor(opts.cols) || 10;\n  this.rows = floor(opts.rows) || 10;\n  this.step = opts.step || 1;\n\n  this.offsetX = (this.cols % 2) * this.step / 2;\n  this.offsetY = (this.rows % 2) * this.step / 2;\n\n  this.renderOpts = {\n    renderMode: gl.LINES\n  };\n\n  this.generateMesh();\n\n  this.shader = __WEBPACK_IMPORTED_MODULE_3_engine_Resources__[\"a\" /* default */].getShader('whiteShader');\n};\n\nGridEntity.prototype.generateMesh = function generateMesh () {\n    var this$1 = this;\n\n  var width = this.cols * this.step;\n  var height = this.rows * this.step;\n\n  var vertices = [];\n  var indices = [];\n  var currentIndex = 0;\n\n  function addLine(x1, z1, x2, z2) {\n    vertices.push(x1, 0, z1, x2, 0, z2);\n    indices.push(currentIndex, currentIndex + 1);\n    currentIndex += 2;\n  }\n\n  var originX = -width / 2;\n  var originY = -height / 2;\n\n  for (var i = 0; i <= this.cols; i++) {\n    var x = originX + i * this$1.step + this$1.offsetX;\n    addLine(x, -height / 2 + this$1.offsetY, x, height / 2 + this$1.offsetY);\n  }\n\n  for (var i$1 = 0; i$1 <= this.rows; i$1++) {\n    var y = originY + i$1 * this$1.step + this$1.offsetY;\n    addLine(-width / 2 + this$1.offsetX, y, width / 2 + this$1.offsetX, y);\n  }\n\n  this.mesh.setVertices(vertices);\n  this.mesh.setIndices(indices);\n  this.mesh.createBuffer();\n};\n\nGridEntity.prototype.render = function render () {\n  this.renderer.renderMesh(this.mesh, this.shader, this.transform, this.renderOpts);\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GridEntity);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entities/GridEntity.js\n// module id = 42\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/entities/GridEntity.js?");

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_math__ = __webpack_require__(0);\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_1_math__[\"a\" /* default */].vec3;\n\nvar UP_DIRECTION = vec3.fromValues(0, 1, 0);\nvar RIGHT_DIRECTION = vec3.fromValues(1, 0, 0);\n\nvar Camera = function Camera () {\n  this.projectionMatrix = mat4.create();\n  this.matrix = mat4.create();\n  this.normalMatrix = mat4.create();\n  this.outMatrix = mat4.create();\n\n  this.position = vec3.create();\n\n  this.xAngle = 0;\n  this.yAngle = 0;\n\n  this.forward = vec3.fromValues(0, 0, -1);\n  this.left = vec3.fromValues(-1, 0, 0);\n  this.up = vec3.fromValues(0, 1, 0);\n};\n\nvar prototypeAccessors = { worldMatrix: {} };\n\nCamera.prototype.setPosition = function setPosition (x, y, z) {\n  vec3.set(this.position, x, y, z);\n};\n\nCamera.prototype.move = function move (side, up, forward) {\n  vec3.scaleAndAdd(this.position, this.position, this.left, side);\n  vec3.scaleAndAdd(this.position, this.position, this.up, up);\n  vec3.scaleAndAdd(this.position, this.position, this.forward, forward);\n};\n\nCamera.prototype.rotate = function rotate (horizontal, vertical) {\n  this.yAngle += horizontal;\n  this.xAngle += vertical;\n};\n\nCamera.prototype.recalculate = function recalculate () {\n  mat4.perspective(this.projectionMatrix, Math.PI / 2, __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */].instance.width / __WEBPACK_IMPORTED_MODULE_0_src_engine_Application__[\"a\" /* default */].instance.height, 0.1, 1000);\n\n  var m = this.matrix;\n\n  mat4.identity(m);\n  mat4.translate(m, m, this.position);\n  mat4.rotate(m, m, this.yAngle, UP_DIRECTION);\n  mat4.rotate(m, m, this.xAngle, RIGHT_DIRECTION);\n\n  vec3.set(this.left, m[0], m[1], m[2]);\n  vec3.set(this.up, m[4], m[5], m[6]);\n  vec3.set(this.forward, m[8], m[9], m[10]);\n\n  mat4.invert(this.outMatrix, m);\n};\n\nprototypeAccessors.worldMatrix.get = function () {\n  return this.outMatrix;\n};\n\nObject.defineProperties( Camera.prototype, prototypeAccessors );\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Camera);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/entities/Camera.js\n// module id = 43\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/entities/Camera.js?");

/***/ }),
/* 44 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\nvar pow = Math.pow;\n\nvar resultingAcc = vec3.create(); // Helper object\n\nvar Particle = function Particle () {\n  this.position = vec3.create();\n  this.velocity = vec3.create();\n  this.acceleration = vec3.create();\n  this.forceAccum = vec3.create();\n\n  this.damping = 0.98;\n\n  this.setInveseMass(1);\n};\n\nvar prototypeAccessors = { kineticEnergy: {} };\n\nParticle.prototype.setPosition = function setPosition (position) {\n  vec3.copy(this.position, position);\n};\n\nParticle.prototype.setVelocity = function setVelocity (velocity) {\n  vec3.copy(this.velocity, velocity);\n};\n\nParticle.prototype.setMass = function setMass (mass) {\n  this.inverseMass = 1 / mass;\n  this.mass = mass;\n};\n\nParticle.prototype.setInveseMass = function setInveseMass (inverseMass) {\n  this.inverseMass = inverseMass;\n  this.mass = 1 / inverseMass;\n};\n\nParticle.prototype.setAcceleration = function setAcceleration (x, y, z) {\n  vec3.set(this.acceleration, x, y, z);\n};\n\nParticle.prototype.integrate = function integrate (dt) {\n  if (this.inverseMass <= 0) { // infinite mass\n    return;\n  }\n\n  // Position\n  vec3.scaleAndAdd(this.position, this.position, this.velocity, dt);\n\n  // Acceleration\n  vec3.add(resultingAcc, this.acceleration, this.forceAccum);\n  vec3.scaleAndAdd(this.velocity, this.velocity, resultingAcc, dt);\n\n  // Drag\n  vec3.scale(this.velocity, this.velocity, pow(this.damping, dt));\n\n  this.clearAccumulator();\n};\n\nParticle.prototype.addForce = function addForce (force) {\n  vec3.add(this.forceAccum, this.forceAccum, force);\n};\n\nprototypeAccessors.kineticEnergy.get = function () {\n  return 1 / this.inverseMass * vec3.squaredLength(this.velocity) * 0.5;\n};\n\nParticle.prototype.clearAccumulator = function clearAccumulator () {\n  var v = this.forceAccum;\n  v[0] = v[1] = v[2] = 0;\n};\n\nObject.defineProperties( Particle.prototype, prototypeAccessors );\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Particle);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/particles/Particle.js\n// module id = 44\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/particles/Particle.js?");

/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("// Interface for force generators\nvar ParticleForceGenerator = function ParticleForceGenerator () {};\n\nParticleForceGenerator.prototype.updateForce = function updateForce (particle, dt) {\n  // abstract\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (ParticleForceGenerator);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/particles/ParticleForceGenerator.js\n// module id = 45\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/particles/ParticleForceGenerator.js?");

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseScene__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_Resources__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_engine_physics_RigidBody__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_engine_physics_particles_ParticleForceRegistry__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_engine_physics_particles_GravityForceGenerator__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_src_entities_AxisBasisObject__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_engine_physics_particles_ParticleContact__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_src_utils__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_engine_physics_Spring__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_engine_render_DebugDraw__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__ = __webpack_require__(23);\n\n\n\n\n\n\n\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].vec3;\n\n\n\n\n\n\n\n\nvar p = vec3.create();\nvar helperVec = vec3.create();\nvar helperMatrix = mat4.create();\n\nvar RigidbodyScene = (function (BaseScene) {\n  function RigidbodyScene () {\n    BaseScene.apply(this, arguments);\n  }\n\n  if ( BaseScene ) RigidbodyScene.__proto__ = BaseScene;\n  RigidbodyScene.prototype = Object.create( BaseScene && BaseScene.prototype );\n  RigidbodyScene.prototype.constructor = RigidbodyScene;\n\n  RigidbodyScene.prototype.initEntities = function initEntities () {\n    this.isHolding = false;\n    this.distance = 0;\n\n    BaseScene.prototype.initEntities.call(this);\n\n    this.bodyAxis = new __WEBPACK_IMPORTED_MODULE_6_src_entities_AxisBasisObject__[\"a\" /* default */]();\n\n    this.whiteShader = __WEBPACK_IMPORTED_MODULE_2_engine_Resources__[\"a\" /* default */].getShader('whiteShader');\n    this.directionalLightingShader = __WEBPACK_IMPORTED_MODULE_2_engine_Resources__[\"a\" /* default */].getShader('directionalLightingShader');\n\n    this.sphereMesh = new __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__[\"a\" /* default */]();\n    __WEBPACK_IMPORTED_MODULE_9_src_utils__[\"a\" /* default */].generateSphere(this.sphereMesh, 30, 30, 0.5);\n    this.sphereMesh.calculateNormals();\n    this.sphereMesh.createBuffer();\n\n    this.boxMesh = new __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__[\"a\" /* default */]();\n    __WEBPACK_IMPORTED_MODULE_9_src_utils__[\"a\" /* default */].generateBox(this.boxMesh, 1, 1, 1);\n    this.boxMesh.calculateNormals();\n    this.boxMesh.createBuffer();\n\n    this.collisionData = new __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"a\" /* CollisionData */](256);\n\n    this.bodies = [];\n\n    this.floorPlane = new __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"b\" /* CollisionPlane */]();\n    this.floorPlane.setup([0, 1, 0], 0);\n\n    this.body = this.addBody(-1, 2, 3);\n    this.body.acceleration[1] = 0;\n    this.body.angularDamping = 0.2;\n    this.body.linearDamping = 0.2;\n    // this.body.setSphere(0.5);\n    this.body.setBox([1, 1, 1]);\n\n    this.collisionBody = this.addBody(1, 2, 3);\n    this.collisionBody.acceleration[1] = 0;\n    this.collisionBody.angularDamping = 0.2;\n    this.collisionBody.linearDamping = 0.2;\n    this.collisionBody.setBox([1, 1, 1]);\n    // this.collisionBody.setSphere(0.5);\n\n\n    // this.spring = new Spring([0, 3, 3], [0.0, 0.4, 0.4], null, 20, 1);\n  };\n\n  RigidbodyScene.prototype.render = function render (dt, gl) {\n    var this$1 = this;\n\n    BaseScene.prototype.render.call(this, dt, gl);\n\n    // this.spring.updateForce(this.body, dt);\n\n    this.collisionData.clear();\n\n    // this.debugDraw.addLineXYZ(0, 2, 0, 2, 2, 2, DebugDraw.LIME);\n    // this.debugDraw.addLineXYZ(0, 3, 0, 0, 4, 0, DebugDraw.LIME);\n    // this.debugDraw.addLineXYZ(-2, 2, -2, -2, 4, 1, DebugDraw.RED);\n\n    this.integrate(dt);\n    this.processCollision();\n\n    for (var i = 0; i < this.bodies.length; i++) {\n      var body = this$1.bodies[i];\n\n      this$1.drawBody(body);\n    }\n\n    this.drawContacts();\n\n    // mat4.fromTranslation(helperMatrix, this.spring.localBodyPoint);\n    // this.renderer.renderMesh(this.sphereMesh, this.whiteShader, helperMatrix);\n  };\n\n  RigidbodyScene.prototype.integrate = function integrate (dt) {\n    var this$1 = this;\n\n    for (var i = 0; i < this.bodies.length; i++) {\n      var body = this$1.bodies[i];\n\n      body.integrate(dt);\n    }\n  };\n\n  RigidbodyScene.prototype.processCollision = function processCollision () {\n    var this$1 = this;\n\n    var bodies = this.bodies;\n    var count = bodies.length;\n    var collisionData = this.collisionData;\n\n    for (var i = 0; i < count; i++) {\n      var body1 = bodies[i];\n      for (var j = i + 1; j < count; j++) {\n        var body2 = bodies[j];\n        this$1.collideBodies(body1.shape, body2.shape, collisionData);\n      }\n\n      this$1.collideBodies(body1.shape, this$1.floorPlane, collisionData);\n    }\n  };\n\n  RigidbodyScene.prototype.collideBodies = function collideBodies (shape1, shape2, collisionData) {\n    if (shape1.type > shape2.type) {\n      var temp = shape1;\n      shape1 = shape2;\n      shape2 = temp;\n    }\n\n    var type1 = shape1.type;\n    var type2 = shape2.type;\n\n\n    if (type1 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE && type2 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE) {\n      __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"b\" /* CollisionDetector */].sphereVsSphere(shape1, shape2, collisionData);\n    } else if (type1 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE && type2 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].PLANE) {\n      __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"b\" /* CollisionDetector */].sphereVsHalfSpace(shape1, shape2, collisionData);\n    } else if (type1 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE && type2 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX) {\n      __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"b\" /* CollisionDetector */].sphereVsBox(shape1, shape2, collisionData);\n    } else if (type1 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX && type2 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].PLANE) {\n      __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"b\" /* CollisionDetector */].boxVsHalfSpace(shape1, shape2, collisionData);\n    } else if (type1 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX && type2 === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX) {\n      __WEBPACK_IMPORTED_MODULE_14_engine_physics_CollisionNarrow__[\"b\" /* CollisionDetector */].boxVsBox(shape1, shape2, collisionData);\n    }\n\n  };\n\n  RigidbodyScene.prototype.addBody = function addBody (x, y, z) {\n    var body = new __WEBPACK_IMPORTED_MODULE_3_engine_physics_RigidBody__[\"a\" /* default */]();\n    body.setPosition(x, y, z);\n    this.bodies.push(body);\n    return body;\n  };\n\n  //------------------------------------------------------------------------\n  // Render\n  //------------------------------------------------------------------------\n\n  RigidbodyScene.prototype.drawContacts = function drawContacts () {\n    var this$1 = this;\n\n    var contacts = this.collisionData.contacts;\n    var count = this.collisionData.contactsCount;\n    for (var i = 0; i < count; i++) {\n      var contact = contacts[i];\n      vec3.scaleAndAdd(p, contact.contactPoint, contact.contactNormal, contact.penetration);\n      this$1.debugDraw.addLine(contact.contactPoint, p, __WEBPACK_IMPORTED_MODULE_12_engine_render_DebugDraw__[\"a\" /* default */].RED);\n    }\n  };\n\n  RigidbodyScene.prototype.drawBody = function drawBody (body) {\n    // mat4.copy(this.bodyAxis.transform, body.transformMatrix);\n    // this.bodyAxis.render();\n\n    if (body.shape.type === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE) {\n      this.drawSphere(body);\n    } else if (body.shape.type === __WEBPACK_IMPORTED_MODULE_13_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX) {\n      this.drawBox(body);\n    }\n  };\n\n  RigidbodyScene.prototype.drawSphere = function drawSphere (body) {\n    vec3.set(helperVec, body.shape.radius * 2, body.shape.radius * 2, body.shape.radius * 2);\n    mat4.fromScaling(helperMatrix, helperVec);\n    mat4.multiply(helperMatrix, body.transformMatrix, helperMatrix);\n    this.renderer.renderMesh(this.sphereMesh, this.directionalLightingShader, helperMatrix);\n  };\n\n  RigidbodyScene.prototype.drawBox = function drawBox (body) {\n    vec3.scale(helperVec, body.shape.halfSize, 2);\n    mat4.fromScaling(helperMatrix, helperVec);\n    mat4.multiply(helperMatrix, body.transformMatrix, helperMatrix);\n    this.renderer.renderMesh(this.boxMesh, this.directionalLightingShader, helperMatrix);\n  };\n\n  RigidbodyScene.prototype.handleInput = function handleInput (dt) {\n    BaseScene.prototype.handleInput.call(this, dt);\n    var input = __WEBPACK_IMPORTED_MODULE_0_engine_Application__[\"a\" /* default */].instance.input;\n\n    if (input.keyDown(32)) {\n      if (!this.isHolding) {\n        this.distance = vec3.distance(this.camera.position, this.body.position);\n      }\n      vec3.scaleAndAdd(helperVec, this.camera.position, this.camera.forward, -this.distance);\n      this.body.setPosition(helperVec);\n    } else {\n      this.isHolding = false;\n    }\n\n    if (input.keyDown('C'.charCodeAt(0))) {\n      this.body.addTorque(this.camera.forward);\n    }\n  };\n\n  return RigidbodyScene;\n}(__WEBPACK_IMPORTED_MODULE_1__BaseScene__[\"a\" /* default */]));\n\n/* unused harmony default export */ var _unused_webpack_default_export = (RigidbodyScene);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scenes/RigidbodyScene.js\n// module id = 46\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/scenes/RigidbodyScene.js?");

/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_math__ = __webpack_require__(0);\n\nvar vec3 = __WEBPACK_IMPORTED_MODULE_0_math__[\"a\" /* default */].vec3;\n\nvar Contact = function Contact () {\n  this.contactPoint = vec3.create();\n  this.contactNormal = vec3.create();\n  this.penetration = 0;\n  this.friction = 0;\n  this.restitution = 0;\n  this.body1 = null;\n  this.body2 = null;\n};\n\nContact.prototype.setBodyData = function setBodyData (body1, body2, friction, restitution) {\n  this.body1 = body1;\n  this.body2 = body2;\n  this.friction = friction;\n  this.restitution = restitution;\n};\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (Contact);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/engine/physics/Contact.js\n// module id = 47\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/engine/physics/Contact.js?");

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_engine_Application__ = __webpack_require__(1);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__BaseScene__ = __webpack_require__(9);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_engine_Resources__ = __webpack_require__(4);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_engine_physics_RigidBody__ = __webpack_require__(21);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_engine_physics_particles_ParticleForceRegistry__ = __webpack_require__(11);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_engine_physics_particles_GravityForceGenerator__ = __webpack_require__(12);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_src_entities_AxisBasisObject__ = __webpack_require__(10);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_engine_physics_particles_ParticleContact__ = __webpack_require__(13);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8_math__ = __webpack_require__(0);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9_src_utils__ = __webpack_require__(5);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__ = __webpack_require__(3);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_engine_physics_Spring__ = __webpack_require__(22);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_engine_render_DebugDraw__ = __webpack_require__(8);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_engine_render_Material__ = __webpack_require__(18);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14_engine_scene_GameObject__ = __webpack_require__(20);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_15_engine_physics_Primitive__ = __webpack_require__(14);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_16_engine_physics_CollisionNarrow__ = __webpack_require__(23);\n\n\n\n\n\n\n\n\n\nvar mat4 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].mat4;\nvar vec3 = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].vec3;\nvar quat = __WEBPACK_IMPORTED_MODULE_8_math__[\"a\" /* default */].quat;\n\n\n\n\n\n\n\n\n\n\nvar p = vec3.create();\nvar helperVec = vec3.create();\nvar helperMatrix = mat4.create();\n\nvar GameObjectScene = (function (BaseScene) {\n  function GameObjectScene () {\n    BaseScene.apply(this, arguments);\n  }\n\n  if ( BaseScene ) GameObjectScene.__proto__ = BaseScene;\n  GameObjectScene.prototype = Object.create( BaseScene && BaseScene.prototype );\n  GameObjectScene.prototype.constructor = GameObjectScene;\n\n  GameObjectScene.prototype.initEntities = function initEntities () {\n    this.scene = __WEBPACK_IMPORTED_MODULE_0_engine_Application__[\"a\" /* default */].instance.scene;\n\n    this.isHolding = false;\n    this.distance = 0;\n\n    this.setupMaterials();\n    BaseScene.prototype.initEntities.call(this);\n\n    this.bodyAxis = new __WEBPACK_IMPORTED_MODULE_6_src_entities_AxisBasisObject__[\"a\" /* default */]();\n\n    this.sphereMesh = new __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__[\"a\" /* default */]();\n    __WEBPACK_IMPORTED_MODULE_9_src_utils__[\"a\" /* default */].generateSphere(this.sphereMesh, 30, 30, 0.5);\n    this.sphereMesh.calculateNormals();\n    this.sphereMesh.createBuffer();\n\n    this.boxMesh = new __WEBPACK_IMPORTED_MODULE_10_engine_render_Mesh__[\"a\" /* default */]();\n    __WEBPACK_IMPORTED_MODULE_9_src_utils__[\"a\" /* default */].generateBox(this.boxMesh, 1, 1, 1);\n    this.boxMesh.calculateNormals();\n    this.boxMesh.createBuffer();\n\n\n    this.boxObject = new __WEBPACK_IMPORTED_MODULE_14_engine_scene_GameObject__[\"a\" /* default */]();\n    this.boxObject.mesh = this.boxMesh;\n    this.boxObject.material = this.directionalMaterial;\n    this.scene.addChild(this.boxObject);\n\n    this.sphereObject = new __WEBPACK_IMPORTED_MODULE_14_engine_scene_GameObject__[\"a\" /* default */]();\n    this.sphereObject.mesh = this.sphereMesh;\n    this.sphereObject.material = this.directionalMaterial;\n    vec3.set(this.sphereObject.scale, 0.3, 0.3, 0.3);\n    vec3.set(this.sphereObject.position, 0, 1, 0);\n    this.boxObject.addChild(this.sphereObject);\n\n    this.smallBoxObject = new __WEBPACK_IMPORTED_MODULE_14_engine_scene_GameObject__[\"a\" /* default */]();\n    this.smallBoxObject.mesh = this.boxMesh;\n    this.smallBoxObject.material = this.directionalMaterial;\n    vec3.set(this.smallBoxObject.scale, 0.5, 0.5, 0.5);\n    vec3.set(this.smallBoxObject.position, 2, 0, 0);\n    this.sphereObject.addChild(this.smallBoxObject);\n  };\n\n  GameObjectScene.prototype.setupMaterials = function setupMaterials () {\n    this.whiteShader = __WEBPACK_IMPORTED_MODULE_2_engine_Resources__[\"a\" /* default */].getShader('whiteShader');\n    this.directionalLightingShader = __WEBPACK_IMPORTED_MODULE_2_engine_Resources__[\"a\" /* default */].getShader('directionalLightingShader');\n\n    this.whiteMaterial = new __WEBPACK_IMPORTED_MODULE_13_engine_render_Material__[\"a\" /* default */]();\n    this.whiteMaterial.shader = this.whiteShader;\n    this.directionalMaterial = new __WEBPACK_IMPORTED_MODULE_13_engine_render_Material__[\"a\" /* default */]();\n    this.directionalMaterial.shader = this.directionalLightingShader;\n  };\n\n  GameObjectScene.prototype.render = function render (dt, gl) {\n    BaseScene.prototype.render.call(this, dt, gl);\n  };\n\n  //------------------------------------------------------------------------\n  // Render\n  //------------------------------------------------------------------------\n\n  GameObjectScene.prototype.drawBody = function drawBody (body) {\n    // mat4.copy(this.bodyAxis.transform, body.transformMatrix);\n    // this.bodyAxis.render();\n\n    if (body.shape.type === __WEBPACK_IMPORTED_MODULE_15_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].SPHERE) {\n      this.drawSphere(body);\n    } else if (body.shape.type === __WEBPACK_IMPORTED_MODULE_15_engine_physics_Primitive__[\"c\" /* CollisionPrimitive */].BOX) {\n      this.drawBox(body);\n    }\n  };\n\n  GameObjectScene.prototype.drawSphere = function drawSphere (body) {\n    vec3.set(helperVec, body.shape.radius * 2, body.shape.radius * 2, body.shape.radius * 2);\n    mat4.fromScaling(helperMatrix, helperVec);\n    mat4.multiply(helperMatrix, body.transformMatrix, helperMatrix);\n    this.renderer.renderMesh(this.sphereMesh, this.directionalLightingShader, helperMatrix);\n  };\n\n  GameObjectScene.prototype.drawBox = function drawBox (body) {\n    vec3.scale(helperVec, body.shape.halfSize, 2);\n    mat4.fromScaling(helperMatrix, helperVec);\n    mat4.multiply(helperMatrix, body.transformMatrix, helperMatrix);\n    this.renderer.renderMesh(this.boxMesh, this.directionalLightingShader, helperMatrix);\n  };\n\n  GameObjectScene.prototype.handleInput = function handleInput (dt) {\n    BaseScene.prototype.handleInput.call(this, dt);\n\n    var input = __WEBPACK_IMPORTED_MODULE_0_engine_Application__[\"a\" /* default */].instance.input;\n\n    if (input.keyDown('C'.charCodeAt(0))) {\n      quat.rotateX(this.boxObject.rotation, this.boxObject.rotation, Math.PI * dt);\n    }\n    if (input.keyDown('X'.charCodeAt(0))) {\n      quat.rotateY(this.sphereObject.rotation, this.sphereObject.rotation, Math.PI * dt);\n    }\n\n  };\n\n  return GameObjectScene;\n}(__WEBPACK_IMPORTED_MODULE_1__BaseScene__[\"a\" /* default */]));\n\n/* harmony default export */ __webpack_exports__[\"a\"] = (GameObjectScene);\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/scenes/GameObjectScene.js\n// module id = 48\n// module chunks = 0\n\n//# sourceURL=webpack:///./src/scenes/GameObjectScene.js?");

/***/ })
/******/ ]);